
Below is a **step‑by‑step, file‑level migration plan** that takes your current Jekyll‑based `docs/` tree and converts it to a fully‑automated **MkDocs + Material** site that

* builds locally with `mkdocs serve/build`;
* publishes via **GitHub Actions** back into **`/docs` on the `main` branch** (so Pages can keep using “*Branch = main / Folder = docs*”);
* uses the **`mkdocs‑awesome‑nav`** and **`mkdocs‑nav‑weight`** plugins for effortless, weight‑based navigation.

## A single paragraph summary

You will **delete all Jekyll‑specific artifacts (Gemfile, `_config*.yml`, `_sass`, layouts, helper shell scripts, etc.)**, **move every Markdown source file into a new `docs_src/` directory**, add a **new `mkdocs.yml`** (with Material theme, Awesome‑Nav and Nav‑Weight plugins, asset references and `docs_dir: docs_src`/`site_dir: docs`), update **`package.json`** (or add `requirements.txt`) so developers can `pip install "mkdocs‑material mkdocs‑awesome‑nav mkdocs‑nav‑weight"` and run `npm run docs:serve`, and finally create a **`.github/workflows/docs.yml`** workflow that installs those Python packages, calls `mkdocs build`, and commits the freshly‑rendered static files back into `docs/` automatically using **EndBug/add‑and‑commit**.  No Pages settings need to change.

---

## 1. Preparatory housekeeping

### 1.1 Create a migration branch

```bash
git checkout -b chore/mkdocs-migration
```

Work on this branch until everything renders locally.

### 1.2 Upgrade local toolchain

Python 3.10+ is recommended because the two plugins require `mkdocs>=1.5`, which dropped Python <3.8.
Install the core packages globally or inside a venv:

```bash
python -m pip install --upgrade pip
pip install mkdocs-material mkdocs-awesome-nav mkdocs-nav-weight
```

MkDocs Material is the theme; Awesome‑Nav and Nav‑Weight extend navigation building ([GitHub][1], [GitHub][2]).

---

## 2. Files & folders to **REMOVE**

These belong only to Jekyll (or the old Tailwind build) and must be deleted from the repository:

| Path                                                   | Why it goes                                                                    |
| ------------------------------------------------------ | ------------------------------------------------------------------------------ |
| `docs/_config.yml` and the `_config.yaml` you included | Jekyll configuration, unused by MkDocs                                         |
| `docs/_layouts/**`                                     | Liquid templates for Jekyll                                                    |
| `docs/_sass/**`                                        | Jekyll/Sass partials                                                           |
| `docs/_build.sh`, `docs/_serve.sh`                     | Jekyll helper scripts                                                          |
| `docs/Gemfile`, `docs/Gemfile.lock`                    | Ruby/Jekyll dependencies                                                       |
| Any `*.orig`, `.erb`, `_site` remnants                 | Legacy artefacts                                                               |
| `postcss.config.js`, `tailwind.config.js`, `bun.lock`  | Only needed if you intend to keep Tailwind; otherwise Material’s CSS is enough |
| `docs/_data/benchmarks.json`                           | Move to `docs_src/data` (see § 3.4)                                            |

*(removal is as simple as `git rm -r` on each)*

---

## 3. Files & folders to **ADD**

### 3.1 `mkdocs.yml` (at repository root)

```yaml
site_name: Vexy SVGO
site_url: https://vexyart.github.io/vexy-svgo
repo_url: https://github.com/vexyart/vexy-svgo
repo_name: vexyart/vexy-svgo
edit_uri: blob/main/docs_src/  # “Edit on GitHub” links

# Where MkDocs should read & write
docs_dir: docs_src      # <‑‑ new source tree
site_dir: docs          # <‑‑ rendered output; GitHub Pages already uses this

theme:
  name: material
  palette:
    scheme: slate       # dark‑mode out of the box
  features:
    - navigation.expand
    - navigation.sections
    - navigation.top
    - content.code.copy
    - content.tabs.link
  favicon: assets/favicon.ico
  logo: assets/favicon.ico

markdown_extensions:
  - admonition
  - attr_list
  - footnotes
  - tables
  - toc:
      permalink: true
  - pymdownx.superfences
  - pymdownx.tabbed

plugins:
  - search
  - awesome-nav               # auto‑build nav tree :contentReference[oaicite:1]{index=1}
  - nav-weight:               # order by front‑matter nav_weight :contentReference[oaicite:2]{index=2}
      enabled: true

extra_css:
  - assets/css/main.css       # static assets copied verbatim :contentReference[oaicite:3]{index=3}
extra_javascript:
  - assets/js/svgo-optimizer.js
  - assets/js/theme.js

extra:
  social:
    - icon: fontawesome/brands/github
      link: https://github.com/vexyart/vexy-svgo
```

*Notes*

* `docs_dir`/`site_dir` are standard MkDocs knobs ([MkDocs][3], [mkdocs.org][4]).
* `awesome-nav` will build navigation automatically unless a file/folder has a `.pages` descriptor; meanwhile `nav-weight` looks for `nav_weight:` in a page’s YAML front‑matter and sorts siblings numerically.

### 3.2 `requirements.txt`

```text
mkdocs-material>=9.5
mkdocs-awesome-nav>=2.9
mkdocs-nav-weight>=0.2.1
```

This allows `pip install -r requirements.txt` in CI.

### 3.3 Developer helpers

* **`Makefile`** (optional):

  ```make
  serve:
  	mkdocs serve -a localhost:8000

  build:
  	mkdocs build

  gh-deploy:
  	mkdocs build && git add docs && git commit -m "build docs" || true
  ```

* **`package.json`** (if you keep Node):

  ```jsonc
  {
    "scripts": {
      "docs:serve": "mkdocs serve --config-file mkdocs.yml",
      "docs:build": "mkdocs build --config-file mkdocs.yml"
    },
    "devDependencies": {}
  }
  ```

### 3.4 New *source* tree `docs_src/`

1. **Move** every Markdown page (`index.md`, `developer/**`, `user/**`) here *unchanged* – see § 4.
2. **Create** `docs_src/assets/` and copy `docs/assets/{css,js}/*` plus `favicon.ico`.
3. If you still need Tailwind‑generated CSS, run Tailwind separately and write its output to `docs_src/assets/css/main.css`; Material will include it via `extra_css` ([squidfunk.github.io][5]).

### 3.5 `.github/workflows/docs.yml`

```yaml
name: build-and-publish-docs
on:
  push:
    branches: [main]
    paths:
      - "docs_src/**"
      - "mkdocs.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install MkDocs toolchain
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build MkDocs site into /docs
        run: mkdocs build --config-file mkdocs.yml

      - name: Commit & push generated docs
        uses: EndBug/add-and-commit@v9      # lightweight “commit back” action :contentReference[oaicite:6]{index=6}
        with:
          add: "docs"
          message: "ci(docs): auto‑build with MkDocs"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

Why commit instead of `gh-deploy`? Because you explicitly want GitHub Pages to **read from `docs/` on `main`**, not a separate `gh-pages` branch, which is the typical `mkdocs gh-deploy` flow ([squidfunk.github.io][6], [mkdocs.org][4]).

---

## 4. Files & folders to **MOVE**

| From                         | To                              | Notes                                                                |
| ---------------------------- | ------------------------------- | -------------------------------------------------------------------- |
| `docs/index.md`              | `docs_src/index.md`             | root landing page                                                    |
| `docs/developer/**`          | `docs_src/developer/`           | keep same hierarchy                                                  |
| `docs/user/**`               | `docs_src/user/`                | keep same hierarchy                                                  |
| `docs/assets/css/*`          | `docs_src/assets/css/`          |                                                                      |
| `docs/assets/js/*`           | `docs_src/assets/js/`           |                                                                      |
| `docs/_data/benchmarks.json` | `docs_src/data/benchmarks.json` | MkDocs copies arbitrary data; reference with custom plugin if needed |

Execute moves with:

```bash
mkdir -p docs_src/assets/{css,js} docs_src/data
git mv docs/index.md docs_src/
git mv docs/developer docs_src/
git mv docs/user docs_src/
git mv docs/assets/css docs_src/assets/
git mv docs/assets/js docs_src/assets/
git mv docs/_data/benchmarks.json docs_src/data/
```

---

## 5. Files to **CHANGE**

### 5.1 Add **front‑matter weights** for ordered nav

At the top of each Markdown file whose position matters, prepend:

```yaml
---
nav_weight: 10   # smaller = higher in sidebar
---
```

`mkdocs-nav-weight` will read those values before Awesome‑Nav builds the tree ([David Pilato][7]).

### 5.2 Asset‑path fixes

Inside any Markdown that referenced `{{ site.baseurl }}` or Jekyll filters, replace:

* `{{ site.baseurl }}` → `/vexy-svgo` (or omit leading slash; Material handles relative links).
* `{% link foo.md %}` or `{% include %}` with normal Markdown links.

### 5.3 CI status badge in `README.md`

Because you are adding `build-and-publish-docs`, insert a badge:

```md
[![docs](https://github.com/vexyart/vexy-svgo/actions/workflows/docs.yml/badge.svg)](https://github.com/vexyart/vexy-svgo/actions/workflows/docs.yml)
```

---

## 6. Local workflow for contributors

1. `python -m pip install -r requirements.txt`
2. `mkdocs serve` (or `npm run docs:serve`) – opens [http://127.0.0.1:8000](http://127.0.0.1:8000).
3. Edit Markdown; Save; browser hot‑reloads.

When ready:

```bash
mkdocs build    # regenerates docs/
git add .
git commit -m "docs: update"
git push
```

The push triggers the workflow, which will regenerate and recommit if you skipped a local build.

---

## 7. Post‑migration clean‑up

* Delete obsolete GitHub Action workflows referencing Jekyll.
* In **Settings → Pages** confirm “*Branch = main / Folder = docs*”.  GitHub’s documentation allows this source configuration ([GitHub Docs][8]).
* Optionally add `docs/**/` to `.gitignore` *while* the workflow commits them, but that would fight the action. Generally keep them versioned so people can browse raw HTML offline.

---

## 8. Why these choices?

* **`site_dir: docs`** keeps your existing Pages source path. MkDocs’ `site_dir` is explicitly designed for this ([mkdocs.org][4]).
* **Committing built artifacts** is lighter than maintaining a `gh-pages` branch when Pages reads from `docs/`. EndBug/add‑and‑commit is purpose‑built ([GitHub][9]).
* **Awesome‑Nav** replaces the verbose `nav:` list; **Nav‑Weight** gives fine‑grained ordering without hard‑coding the entire tree ([GitHub][1], [GitHub][2]).
* Material’s **extra\_css/extra\_javascript** mechanism attaches your existing customisations ([mkdocs.org][10]).

---

## 9. Checklist (copy into an issue)

* [ ] Remove Jekyll artefacts listed in § 2
* [ ] `pip install -r requirements.txt`
* [ ] Move markdown + assets into `docs_src/`
* [ ] Add weights where needed
* [ ] Commit `mkdocs.yml`, requirements, workflow
* [ ] Test `mkdocs serve` locally
* [ ] Push branch, confirm Action builds & commits `docs/`
* [ ] Merge into `main`; verify [https://vexyart.github.io/vexy-svgo/](https://vexyart.github.io/vexy-svgo/) renders Material UI
* [ ] Delete old workflows/badges

---

Following this spec ensures a clean, minimal‑risk cut‑over while preserving your existing URL structure and GitHub Pages workflow.

[1]: https://github.com/lukasgeiter/mkdocs-awesome-nav?utm_source=chatgpt.com "lukasgeiter/mkdocs-awesome-nav: A plugin for customizing ... - GitHub"
[2]: https://github.com/shu307/mkdocs-nav-weight?utm_source=chatgpt.com "shu307/mkdocs-nav-weight - GitHub"
[3]: https://mkdocs.readthedocs.io/en/859/user-guide/configuration/?utm_source=chatgpt.com "Configuration - MkDocs - Read the Docs"
[4]: https://www.mkdocs.org/user-guide/deploying-your-docs/?utm_source=chatgpt.com "Deploying Your Docs - MkDocs"
[5]: https://squidfunk.github.io/mkdocs-material/customization/?utm_source=chatgpt.com "Customization - Material for MkDocs - GitHub Pages"
[6]: https://squidfunk.github.io/mkdocs-material/publishing-your-site/?utm_source=chatgpt.com "Publishing your site - Material for MkDocs - GitHub Pages"
[7]: https://david.pilato.fr/posts/2023-01-12-automatically-update-documentation-with-github-actions/?utm_source=chatgpt.com "Automatically update documentation with Github Actions - David Pilato"
[8]: https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site?utm_source=chatgpt.com "Configuring a publishing source for your GitHub Pages site"
[9]: https://github.com/marketplace/actions/add-commit?utm_source=chatgpt.com "Add & Commit · Actions · GitHub Marketplace"
[10]: https://www.mkdocs.org/user-guide/configuration/?utm_source=chatgpt.com "Configuration - MkDocs"
