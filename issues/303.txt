     |                   --------- ^^^ expected `&String`, found `&str`
     |                   |
     |                   arguments to this method are incorrect
     |
     = note: expected reference `&std::string::String`
                found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:260:42
     |
260  | ..._coord(element.attr("cx").unwrap_or("0")) {
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---^
     |                                        |
     |                                        this argument influences the return type of `unwrap_or`
note: method defined here
    --> /Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:1023:12
     |
1023 |     pub fn unwrap_or(self, default: T) -> T {
     |            ^^^^^^^^^
help: use `Option::map_or` to deref inner value of `Option`
     |
260  -         let cx = match Self::parse_coord(element.attr("cx").unwrap_or("0")) {
260  +         let cx = match Self::parse_coord(element.attr("cx").map_or("0", |v| v)) {
     |

error[E0308]: mismatched types
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:264:71
     |
264  | ...ent.attr("cy").unwrap_or("0")) {
     |                   --------- ^^^ expected `&String`, found `&str`
     |                   |
     |                   arguments to this method are incorrect
     |
     = note: expected reference `&std::string::String`
                found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:264:42
     |
264  | ..._coord(element.attr("cy").unwrap_or("0")) {
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---^
     |                                        |
     |                                        this argument influences the return type of `unwrap_or`
note: method defined here
    --> /Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:1023:12
     |
1023 |     pub fn unwrap_or(self, default: T) -> T {
     |            ^^^^^^^^^
help: use `Option::map_or` to deref inner value of `Option`
     |
264  -         let cy = match Self::parse_coord(element.attr("cy").unwrap_or("0")) {
264  +         let cy = match Self::parse_coord(element.attr("cy").map_or("0", |v| v)) {
     |

error[E0308]: mismatched types
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:268:69
     |
268  | ...ment.attr("r").unwrap_or("0")) {
     |                   --------- ^^^ expected `&String`, found `&str`
     |                   |
     |                   arguments to this method are incorrect
     |
     = note: expected reference `&std::string::String`
                found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:268:41
     |
268  | ..._coord(element.attr("r").unwrap_or("0")) {
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^---^
     |                                       |
     |                                       this argument influences the return type of `unwrap_or`
note: method defined here
    --> /Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:1023:12
     |
1023 |     pub fn unwrap_or(self, default: T) -> T {
     |            ^^^^^^^^^
help: use `Option::map_or` to deref inner value of `Option`
     |
268  -         let r = match Self::parse_coord(element.attr("r").unwrap_or("0")) {
268  +         let r = match Self::parse_coord(element.attr("r").map_or("0", |v| v)) {
     |

error[E0308]: mismatched types
   --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:289:24
    |
289 |         element.name = "path".to_string();
    |         ------------   ^^^^^^^^^^^^^^^^^^ expected `Cow<'_, str>`, found `String`
    |         |
    |         expected due to the type of this binding
    |
    = note: expected enum `Cow<'_, str>`
             found struct `std::string::String`
help: call `Into::into` on this expression to convert `std::string::String` into `Cow<'_, str>`
    |
289 |         element.name = "path".to_string().into();
    |                                          +++++++

error[E0308]: mismatched types
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:298:71
     |
298  | ...ent.attr("cx").unwrap_or("0")) {
     |                   --------- ^^^ expected `&String`, found `&str`
     |                   |
     |                   arguments to this method are incorrect
     |
     = note: expected reference `&std::string::String`
                found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:298:42
     |
298  | ..._coord(element.attr("cx").unwrap_or("0")) {
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---^
     |                                        |
     |                                        this argument influences the return type of `unwrap_or`
note: method defined here
    --> /Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:1023:12
     |
1023 |     pub fn unwrap_or(self, default: T) -> T {
     |            ^^^^^^^^^
help: use `Option::map_or` to deref inner value of `Option`
     |
298  -         let cx = match Self::parse_coord(element.attr("cx").unwrap_or("0")) {
298  +         let cx = match Self::parse_coord(element.attr("cx").map_or("0", |v| v)) {
     |

error[E0308]: mismatched types
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:302:71
     |
302  | ...ent.attr("cy").unwrap_or("0")) {
     |                   --------- ^^^ expected `&String`, found `&str`
     |                   |
     |                   arguments to this method are incorrect
     |
     = note: expected reference `&std::string::String`
                found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:302:42
     |
302  | ..._coord(element.attr("cy").unwrap_or("0")) {
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---^
     |                                        |
     |                                        this argument influences the return type of `unwrap_or`
note: method defined here
    --> /Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:1023:12
     |
1023 |     pub fn unwrap_or(self, default: T) -> T {
     |            ^^^^^^^^^
help: use `Option::map_or` to deref inner value of `Option`
     |
302  -         let cy = match Self::parse_coord(element.attr("cy").unwrap_or("0")) {
302  +         let cy = match Self::parse_coord(element.attr("cy").map_or("0", |v| v)) {
     |

error[E0308]: mismatched types
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:306:71
     |
306  | ...ent.attr("rx").unwrap_or("0")) {
     |                   --------- ^^^ expected `&String`, found `&str`
     |                   |
     |                   arguments to this method are incorrect
     |
     = note: expected reference `&std::string::String`
                found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:306:42
     |
306  | ..._coord(element.attr("rx").unwrap_or("0")) {
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---^
     |                                        |
     |                                        this argument influences the return type of `unwrap_or`
note: method defined here
    --> /Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:1023:12
     |
1023 |     pub fn unwrap_or(self, default: T) -> T {
     |            ^^^^^^^^^
help: use `Option::map_or` to deref inner value of `Option`
     |
306  -         let rx = match Self::parse_coord(element.attr("rx").unwrap_or("0")) {
306  +         let rx = match Self::parse_coord(element.attr("rx").map_or("0", |v| v)) {
     |

error[E0308]: mismatched types
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:310:71
     |
310  | ...ent.attr("ry").unwrap_or("0")) {
     |                   --------- ^^^ expected `&String`, found `&str`
     |                   |
     |                   arguments to this method are incorrect
     |
     = note: expected reference `&std::string::String`
                found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
    --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:310:42
     |
310  | ..._coord(element.attr("ry").unwrap_or("0")) {
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---^
     |                                        |
     |                                        this argument influences the return type of `unwrap_or`
note: method defined here
    --> /Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:1023:12
     |
1023 |     pub fn unwrap_or(self, default: T) -> T {
     |            ^^^^^^^^^
help: use `Option::map_or` to deref inner value of `Option`
     |
310  -         let ry = match Self::parse_coord(element.attr("ry").unwrap_or("0")) {
310  +         let ry = match Self::parse_coord(element.attr("ry").map_or("0", |v| v)) {
     |

error[E0308]: mismatched types
   --> crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:331:24
    |
331 |         element.name = "path".to_string();
    |         ------------   ^^^^^^^^^^^^^^^^^^ expected `Cow<'_, str>`, found `String`
    |         |
    |         expected due to the type of this binding
    |
    = note: expected enum `Cow<'_, str>`
             found struct `std::string::String`
help: call `Into::into` on this expression to convert `std::string::String` into `Cow<'_, str>`
    |
331 |         element.name = "path".to_string().into();
    |                                          +++++++

warning: use of deprecated method `indexmap::IndexMap::<K, V, S>::remove`: `remove` disrupts the map order -- use `swap_remove` or `shift_remove` for explicit behavior.
   --> crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs:273:36
    |
273 |                 element.attributes.remove("style");
    |                                    ^^^^^^

warning: use of deprecated method `indexmap::IndexMap::<K, V, S>::remove`: `remove` disrupts the map order -- use `swap_remove` or `shift_remove` for explicit behavior.
   --> crates/plugin-sdk/src/plugins/minify_styles.rs:295:55
    |
295 | ...   child_elem.attributes.remove("style");
    |                             ^^^^^^

error[E0658]: use of unstable library feature `str_as_str`
  --> crates/plugin-sdk/src/plugins/move_elems_attrs_to_group.rs:56:26
   |
56 |             element.name.as_str(),
   |                          ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0277]: the trait bound `String: From<&&str>` is not satisfied
   --> crates/plugin-sdk/src/plugins/prefix_ids.rs:166:38
    |
166 |                     element.set_attr(attr_name, processed);
    |                             -------- ^^^^^^^^^ unsatisfied trait bound
    |                             |
    |                             required by a bound introduced by this call
    |
    = help: the trait `std::convert::From<&&str>` is not implemented for `std::string::String`
    = note: required for `&&str` to implement `Into<std::string::String>`
note: required by a bound in `vexy_svgo_core::Element::<'a>::set_attr`
   --> /Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/core/src/ast.rs:141:43
    |
141 | ...self, name: impl Into<String>, value: impl Into<Strin...
    |                     ^^^^^^^^^^^^ required by this bound in `Element::<'a>::set_attr`
    = note: the full name for the type has been written to '/Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/target/release/deps/vexy_svgo_plugin_sdk-6b990db9d64b0eb3.long-type-645078880835283767.txt'
    = note: consider using `--verbose` to print the full type name to the console
help: consider dereferencing here
    |
166 |                     element.set_attr(*attr_name, processed);
    |                                      +

warning: use of deprecated method `indexmap::IndexMap::<K, V, S>::remove`: `remove` disrupts the map order -- use `swap_remove` or `shift_remove` for explicit behavior.
   --> crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs:231:36
    |
231 |                 element.attributes.remove(&attr_name);
    |                                    ^^^^^^

error[E0658]: use of unstable library feature `str_as_str`
   --> crates/plugin-sdk/src/plugins/remove_off_canvas_paths.rs:102:28
    |
102 |         match element.name.as_str() {
    |                            ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:121:51
    |
121 | ...contains(&element.name.as_str()) {
    |                           ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0599]: no method named `attrs` found for reference `&vexy_svgo_core::Element<'_>` in the current scope
   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:154:38
    |
154 |         for (attr, value) in element.attrs() {
    |                                      ^^^^^
    |
help: there is a method `attr` with a similar name, but with different arguments
   --> /Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/core/src/ast.rs:135:5
    |
135 |     pub fn attr(&self, name: &str) -> Option<&String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `attrs` found for mutable reference `&mut vexy_svgo_core::Element<'_>` in the current scope
   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:202:22
    |
201 |                   let stroke_attrs: Vec<String> = element
    |  _________________________________________________-
202 | |                     .attrs()
    | |_____________________-^^^^^
    |
help: there is a method `attr` with a similar name, but with different arguments
   --> /Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/core/src/ast.rs:135:5
    |
135 |     pub fn attr(&self, name: &str) -> Option<&String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:207:21
    |
207 |                 for attr in stroke_attrs {
    |                     ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:207:17
    |
207 | /                 for attr in stroke_attrs {
208 | |                     element.remove_attr(&attr);
209 | |                 }
    | |_________________^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::None`
   --> /Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:589:17
    |
589 | pub enum Option<T> {
    |                 ^ required by this bound in `Option::None`
...
593 |     None,
    |     ---- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:207:29
    |
207 |                 for attr in stroke_attrs {
    |                             ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by an implicit `Sized` bound in `std::option::Option`
   --> /Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:589:17
    |
589 | pub enum Option<T> {
    |                 ^ required by the implicit `Sized` requirement on this type parameter in `Option`

error[E0599]: no method named `attrs` found for mutable reference `&mut vexy_svgo_core::Element<'_>` in the current scope
   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:234:18
    |
233 |               let fill_attrs: Vec<String> = element
    |  ___________________________________________-
234 | |                 .attrs()
    | |_________________-^^^^^
    |
help: there is a method `attr` with a similar name, but with different arguments
   --> /Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/core/src/ast.rs:135:5
    |
135 |     pub fn attr(&self, name: &str) -> Option<&String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:239:17
    |
239 |             for attr in fill_attrs {
    |                 ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:239:13
    |
239 | /             for attr in fill_attrs {
240 | |                 element.remove_attr(&attr);
241 | |             }
    | |_____________^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::None`
   --> /Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:589:17
    |
589 | pub enum Option<T> {
    |                 ^ required by this bound in `Option::None`
...
593 |     None,
    |     ---- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:239:25
    |
239 |             for attr in fill_attrs {
    |                         ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by an implicit `Sized` bound in `std::option::Option`
   --> /Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:589:17
    |
589 | pub enum Option<T> {
    |                 ^ required by the implicit `Sized` requirement on this type parameter in `Option`

error[E0658]: use of unstable library feature `str_as_str`
  --> crates/plugin-sdk/src/plugins/remove_xlink.rs:78:64
   |
78 | ....contains(&element.name.as_str());
   |                            ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0277]: the trait bound `&&String: Into<String>` is not satisfied
   --> crates/plugin-sdk/src/plugins/remove_xlink.rs:155:46
    |
155 |                     element.set_attr("href", &href_value);
    |                             --------         ^^^^^^^^^^^ unsatisfied trait bound
    |                             |
    |                             required by a bound introduced by this call
    |
    = help: the trait `std::convert::From<&&std::string::String>` is not implemented for `std::string::String`
    = note: required for `&&std::string::String` to implement `Into<std::string::String>`
note: required by a bound in `vexy_svgo_core::Element::<'a>::set_attr`
   --> /Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/core/src/ast.rs:141:69
    |
141 | ...ng>, value: impl Into<String>) {
    |                     ^^^^^^^^^^^^ required by this bound in `Element::<'a>::set_attr`
    = note: the full name for the type has been written to '/Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/target/release/deps/vexy_svgo_plugin_sdk-6b990db9d64b0eb3.long-type-8854570748098809002.txt'
    = note: consider using `--verbose` to print the full type name to the console
help: consider dereferencing here
    |
155 |                     element.set_attr("href", &*href_value);
    |                                               +

error[E0308]: mismatched types
   --> crates/plugin-sdk/src/plugins/remove_xlink.rs:219:31
    |
219 |                         name: "title".to_string(),
    |                               ^^^^^^^^^^^^^^^^^^^ expected `Cow<'_, str>`, found `String`
    |
    = note: expected enum `Cow<'_, str>`
             found struct `std::string::String`
help: call `Into::into` on this expression to convert `std::string::String` into `Cow<'_, str>`
    |
219 |                         name: "title".to_string().into(),
    |                                                  +++++++

error[E0308]: mismatched types
   --> crates/plugin-sdk/src/plugins/remove_xlink.rs:221:37
    |
221 |                         namespaces: HashMap::new(),
    |                                     ^^^^^^^^^^^^^^ expected `IndexMap<String, String>`, found `HashMap<_, _>`
    |
    = note: expected struct `IndexMap<std::string::String, std::string::String>`
               found struct `HashMap<_, _>`

error[E0308]: mismatched types
   --> crates/plugin-sdk/src/plugins/remove_xlink.rs:222:51
    |
222 | ...ildren: vec![Node::Text(title_value)],
    |                 ---------- ^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                 |          |
    |                 |          expected `String`, found `&String`
    |                 arguments to this enum variant are incorrect
    |
note: tuple variant defined here
   --> /Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/core/src/ast.rs:71:5
    |
71  |     Text(String),
    |     ^^^^

error[E0599]: no method named `configure` found for struct `std::boxed::Box<dyn Plugin>` in the current scope
   --> crates/plugin-sdk/src/enhanced_registry.rs:306:32
    |
306 |         if let Err(e) = plugin.configure(config) {
    |                                ^^^^^^^^^ method not found in `Box<dyn Plugin>`

error[E0425]: cannot find function `parse_svg_string` in this scope
   --> crates/plugin-sdk/src/test_framework.rs:324:28
    |
324 |         let mut document = parse_svg_string(svg)?;
    |                            ^^^^^^^^^^^^^^^^ not found in this scope

error[E0599]: no method named `configure` found for mutable reference `&mut P` in the current scope
   --> crates/plugin-sdk/src/test_framework.rs:328:20
    |
328 |             plugin.configure(config.clone())?;
    |                    ^^^^^^^^^ method not found in `&mut P`

error[E0599]: no method named `optimize` found for mutable reference `&mut P` in the current scope
   --> crates/plugin-sdk/src/test_framework.rs:332:16
    |
332 |         plugin.optimize(&mut document)?;
    |                ^^^^^^^^ method not found in `&mut P`

warning: variable does not need to be mutable
   --> crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs:305:13
    |
305 | ...   let mut used_ids: HashSet<String> = self.reference...
    |           ----^^^^^^^^
    |           |
    |           help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `obj`
   --> crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs:151:21
    |
151 |         if let Some(obj) = params.as_object() {
    |                     ^^^ help: if this is intentional, prefix it with an underscore: `_obj`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `obj`
  --> crates/plugin-sdk/src/plugins/inline_styles.rs:95:21
   |
95 |         if let Some(obj) = params.as_object() {
   |                     ^^^ help: if this is intentional, prefix it with an underscore: `_obj`

error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference
   --> crates/plugin-sdk/src/plugins/move_elems_attrs_to_group.rs:227:9
    |
226 |     fn apply(&self, document: &mut Document) -> Result<(...
    |              ----- this is an immutable reference
227 |         self.process_element(&mut document.root);
    |         ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable

warning: unused variable: `plugin`
   --> crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs:138:13
    |
138 |         let plugin = RemoveUnknownsAndDefaultsPlugin::wi...
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_plugin`

warning: unused variable: `plugin`
   --> crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs:161:13
    |
161 |         let plugin = RemoveUnknownsAndDefaultsPlugin::wi...
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_plugin`

error: lifetime may not live long enough
   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:140:13
    |
111 |         element: &mut Element,
    |         ------- has type `&mut vexy_svgo_core::Element<'1>`
112 |         parent_styles: &HashMap<String, String>,
113 |         nodes_to_remove: &mut Vec<*mut Element>,
    |         --------------- has type `&mut Vec<*mut vexy_svgo_core::Element<'2>>`
...
140 |             nodes_to_remove.push(element as *mut Element);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`
    |
    = note: requirement occurs because of a mutable reference to `Vec<*mut vexy_svgo_core::Element<'_>>`
    = note: mutable references are invariant over their type parameter
    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
help: consider introducing a named lifetime parameter and update trait if needed
    |
109 ~     fn process_element<'a>(
110 |         &self,
111 ~         element: &mut Element<'a>,
112 |         parent_styles: &HashMap<String, String>,
113 ~         nodes_to_remove: &mut Vec<*mut Element<'a>>,
    |

error: lifetime may not live long enough
   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:140:13
    |
111 |         element: &mut Element,
    |         ------- has type `&mut vexy_svgo_core::Element<'1>`
112 |         parent_styles: &HashMap<String, String>,
113 |         nodes_to_remove: &mut Vec<*mut Element>,
    |         --------------- has type `&mut Vec<*mut vexy_svgo_core::Element<'2>>`
...
140 |             nodes_to_remove.push(element as *mut Element);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'2` must outlive `'1`
    |
    = note: requirement occurs because of a mutable pointer to `vexy_svgo_core::Element<'_>`
    = note: mutable pointers are invariant over their type parameter
    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
help: consider introducing a named lifetime parameter and update trait if needed
    |
109 ~     fn process_element<'a>(
110 |         &self,
111 ~         element: &mut Element<'a>,
112 |         parent_styles: &HashMap<String, String>,
113 ~         nodes_to_remove: &mut Vec<*mut Element<'a>>,
    |

error: lifetime may not live long enough
   --> crates/plugin-sdk/src/plugins/reuse_paths.rs:124:24
    |
109 | ...or_create_defs<'b>(&self, svg_element: &'b mut Elemen...
    |                       -      ----------- has type `&mut vexy_svgo_core::Element<'2>`
    |                       |
    |                       let's call the lifetime of this reference `'1`
...
124 | ...    return Ok(defs);
    |               ^^^^^^^^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`
    |
    = note: requirement occurs because of a mutable reference to `vexy_svgo_core::Element<'_>`
    = note: mutable references are invariant over their type parameter
    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
help: consider reusing a named lifetime parameter and update trait if needed
    |
109 |     fn find_or_create_defs<'b>(&'b self, svg_element: &'b mut Element) -> Result<&'b mut Element<'b>> {
    |                                 ++                                                              ++++

error: lifetime may not live long enough
   --> crates/plugin-sdk/src/plugins/reuse_paths.rs:124:24
    |
109 | ...or_create_defs<'b>(&self, svg_element: &'b mut Elemen...
    |                       -      ----------- has type `&mut vexy_svgo_core::Element<'2>`
    |                       |
    |                       let's call the lifetime of this reference `'1`
...
124 | ...    return Ok(defs);
    |               ^^^^^^^^ method was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`
    |
    = note: requirement occurs because of a mutable reference to `vexy_svgo_core::Element<'_>`
    = note: mutable references are invariant over their type parameter
    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
help: consider reusing a named lifetime parameter and update trait if needed
    |
109 |     fn find_or_create_defs<'b>(&self, svg_element: &'b mut Element<'b>) -> Result<&'b mut Element<'b>> {
    |                                                                   ++++                           ++++

error[E0499]: cannot borrow `svg_element.children` as mutable more than once at a time
   --> crates/plugin-sdk/src/plugins/reuse_paths.rs:130:9
    |
109 | ...n find_or_create_defs<'b>(&self, svg_element: &'b mut Element) -...
    |                          -- lifetime `'b` defined here
...
123 | ...       if let Node::Element(defs) = &mut svg_element.children[in...
    |                                             -------------------- first mutable borrow occurs here
124 | ...           return Ok(defs);
    |                      -------- returning this value requires that `svg_element.children` is borrowed for `'b`
...
130 | ...   svg_element.children.insert(0, Node::Element(defs_element));
    |       ^^^^^^^^^^^^^^^^^^^^ second mutable borrow occurs here

error[E0499]: cannot borrow `svg_element.children` as mutable more than once at a time
   --> crates/plugin-sdk/src/plugins/reuse_paths.rs:133:43
    |
109 | ...e_defs<'b>(&self, svg_element: &'b mut Element) -> Re...
    |           -- lifetime `'b` defined here
...
123 | ...ode::Element(defs) = &mut svg_element.children[index] {
    |                              -------------------- first mutable borrow occurs here
124 | ...rn Ok(defs);
    |       -------- returning this value requires that `svg_element.children` is borrowed for `'b`
...
133 | ...:Element(defs) = &mut svg_element.children[0] {
    |                          ^^^^^^^^^^^^^^^^^^^^ second mutable borrow occurs here
    |
    = help: use `.split_at_mut(position)` to obtain two mutable non-overlapping sub-slices

warning: variable `changed` is assigned to, but never used
   --> crates/plugin-sdk/src/plugins/reuse_paths.rs:215:17
    |
215 |         let mut changed = false;
    |                 ^^^^^^^
    |
    = note: consider using `_changed` instead

warning: value assigned to `changed` is never read
   --> crates/plugin-sdk/src/plugins/reuse_paths.rs:304:21
    |
304 |                     changed = true;
    |                     ^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

error[E0499]: cannot borrow `document.root` as mutable more than once at a time
   --> crates/plugin-sdk/src/plugins/reuse_paths.rs:302:47
    |
241 | ...et defs = self.find_or_create_defs(&mut document.root)?;
    |                                       ------------------ first mutable borrow occurs here
...
298 | ...   defs.children.push(Node::Element(reusable_path));
    |       ------------- first borrow later used here
...
302 | ...       if self.replace_path_with_use(&mut document.root, p...
    |                                         ^^^^^^^^^^^^^^^^^^ second mutable borrow occurs here

error[E0382]: borrow of moved value: `definition_id`
    --> crates/plugin-sdk/src/plugins/reuse_paths.rs:302:73
     |
277  | ...et definition_id = if let Some(id) = original_id {
     |       ------------- move occurs because `definition_id` has type `std::string::String`, which does not implement the `Copy` trait
...
294  | ...eusable_path.set_attr("id", definition_id);
     |                                ------------- value moved here
...
302  | ...   if self.replace_path_with_use(&mut document.root, path, &definition_id) {
     |                                                               ^^^^^^^^^^^^^^ value borrowed here after move
     |
     = note: borrow occurs due to deref coercion to `str`
note: deref defined here
    --> /Users/adam/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/string.rs:2703:5
     |
2703 |     type Target = str;
     |     ^^^^^^^^^^^
help: consider borrowing `definition_id`
     |
294  |             reusable_path.set_attr("id", &definition_id);
     |                                          +

error[E0505]: cannot move out of `factory` because it is borrowed
   --> crates/plugin-sdk/src/enhanced_registry.rs:246:53
    |
224 | ...ter_factory(&self, factory: Arc<dyn PluginFactory>) -...
    |                       ------- binding `factory` declared here
225 | ...data = factory.metadata();
    |           ------- borrow of `factory` occurs here
...
246 | ...ories.insert(metadata.name.clone(), factory);
    |                                        ^^^^^^^ move out of `factory` occurs here
...
252 | ...s.insert(metadata.name.clone(), PluginStats::default());
    |             ------------- borrow later used here

warning: unused variable: `cached_plugin`
   --> crates/plugin-sdk/src/enhanced_registry.rs:265:25
    |
265 | ...   if let Some(cached_plugin) = cache.get(resolved_na...
    |                   ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_cached_plugin`

error: lifetime may not live long enough
   --> crates/plugin-sdk/src/enhanced_registry.rs:458:9
    |
456 | ...n resolve_name(&self, name: &str) -> &str {
    |                   -            - let's call the lifetime of this reference `'1`
    |                   |
    |                   let's call the lifetime of this reference `'2`
457 | ...   let aliases = self.aliases.read().unwrap();
458 | ...   aliases.get(name).map(|s| s.as_str()).unwrap_or(name)
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`
    |
help: consider introducing a named lifetime parameter and update trait if needed
    |
456 |     fn resolve_name<'a>(&self, name: &'a str) -> &'a str {
    |                    ++++               ++          ++

error[E0515]: cannot return value referencing local variable `aliases`
   --> crates/plugin-sdk/src/enhanced_registry.rs:458:9
    |
458 | ...   aliases.get(name).map(|s| s.as_str()).unwrap_or(name)
    |       -------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |       |
    |       returns a value referencing data owned by the current function
    |       `aliases` is borrowed here

warning: unused variable: `name`
   --> crates/plugin-sdk/src/enhanced_registry.rs:461:28
    |
461 | ...dd_to_cache(&self, name: String, plugin: &dyn Plugin) {
    |                       ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `plugin`
   --> crates/plugin-sdk/src/enhanced_registry.rs:461:42
    |
461 | ...elf, name: String, plugin: &dyn Plugin) {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_plugin`

warning: variable does not need to be mutable
   --> crates/plugin-sdk/src/test_framework.rs:239:52
    |
239 | ...gin>(&self, mut plugin: P, generator: &dyn TestCaseGe...
    |                ----^^^^^^
    |                |
    |                help: remove this `mut`

warning: variable does not need to be mutable
   --> crates/plugin-sdk/src/test_framework.rs:301:54
    |
301 | ...gin>(&self, mut plugin: P, svgo_test_data: &SvgoTestD...
    |                ----^^^^^^
    |                |
    |                help: remove this `mut`

warning: unused variable: `path`
   --> crates/plugin-sdk/src/test_framework.rs:456:32
    |
456 | ...oad_from_directory(path: &str) -> Result<Self> {
    |                       ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

Some errors have detailed explanations: E0277, E0308, E0382, E0425, E0499, E0505, E0515, E0596, E0599...
For more information about an error, try `rustc --explain E0277`.
warning: `vexy_svgo-plugin-sdk` (lib) generated 33 warnings
error: could not compile `vexy_svgo-plugin-sdk` (lib) due to 60 previous errors; 33 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: `vexy_svgo-core` (lib) generated 2 warnings
warning: `vexy_svgo-core` (lib) generated 2 warnings (2 duplicates)
    Building [======================>  ] 425/445: boa_engine   