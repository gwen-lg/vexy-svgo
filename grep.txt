migrate.sh-#!/usr/bin/env bash
migrate.sh-DIRNAME="$(dirname "$1")"
migrate.sh-FILENAME="$(basename "$1")"
migrate.sh:PROMPT="Read 'PLUGIN_MIGRATE.md' and then check if the plugin '$FILENAME' has already been migrated from './vexy_svgo/src/plugins/' to './crates/plugin-sdk/src/plugins/'. If not, migrate it."
migrate.sh-echo $PROMPT
migrate.sh-echo $FILENAME
migrate.sh-export GOOGLE_CLOUD_PROJECT="powerful-tree-444423-k8"
--
build-wasm.sh-            --strip-producers \
build-wasm.sh-            --vacuum \
build-wasm.sh-            --dce \
build-wasm.sh:            "$out_dir"/vexy_svgo_bg.wasm \
build-wasm.sh:            -o "$out_dir"/vexy_svgo_bg_opt.wasm
build-wasm.sh:        mv "$out_dir"/vexy_svgo_bg_opt.wasm "$out_dir"/vexy_svgo_bg.wasm
build-wasm.sh-        echo "  wasm-opt optimization complete"
build-wasm.sh-    else
build-wasm.sh-        echo "  wasm-opt not found, skipping additional optimizations"
--
build-wasm.sh-        echo "  Removing unused functions with wasm-snip..."
build-wasm.sh-        wasm-snip --snip-rust-fmt-code \
build-wasm.sh-            --snip-rust-panicking-code \
build-wasm.sh:            "$out_dir"/vexy_svgo_bg.wasm \
build-wasm.sh:            -o "$out_dir"/vexy_svgo_bg_snipped.wasm 2>/dev/null && \
build-wasm.sh:        mv "$out_dir"/vexy_svgo_bg_snipped.wasm "$out_dir"/vexy_svgo_bg.wasm && \
build-wasm.sh-        echo "  wasm-snip optimization complete" || \
build-wasm.sh-        echo "  wasm-snip optimization skipped (no unused functions found)"
build-wasm.sh-    else
--
build-wasm.sh-echo "  - pkg-full/     : Full build with all plugins"
build-wasm.sh-echo ""
build-wasm.sh-echo "To use in a web project:"
build-wasm.sh:echo "  import init, { optimize } from './pkg-web/vexy_svgo.js';"
build-wasm.sh-echo "  await init();"
build-wasm.sh-echo "  const result = optimize(svgString);"
--
scripts/marketplace-setup.sh-  postgres:
scripts/marketplace-setup.sh-    image: postgres:15-alpine
scripts/marketplace-setup.sh-    environment:
scripts/marketplace-setup.sh:      POSTGRES_DB: vexy_svgo_marketplace
scripts/marketplace-setup.sh:      POSTGRES_USER: vexy_svgo
scripts/marketplace-setup.sh:      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vexy_svgo_dev_password}
scripts/marketplace-setup.sh-    ports:
scripts/marketplace-setup.sh-      - "${POSTGRES_PORT:-5432}:5432"
scripts/marketplace-setup.sh-    volumes:
scripts/marketplace-setup.sh-      - postgres_data:/var/lib/postgresql/data
scripts/marketplace-setup.sh-      - ./database/init:/docker-entrypoint-initdb.d
scripts/marketplace-setup.sh-    healthcheck:
scripts/marketplace-setup.sh:      test: ["CMD-SHELL", "pg_isready -U vexy_svgo"]
scripts/marketplace-setup.sh-      interval: 30s
scripts/marketplace-setup.sh-      timeout: 10s
scripts/marketplace-setup.sh-      retries: 3
--
scripts/marketplace-setup.sh-      context: ./api
scripts/marketplace-setup.sh-      dockerfile: Dockerfile
scripts/marketplace-setup.sh-    environment:
scripts/marketplace-setup.sh:      DATABASE_URL: postgres://vexy_svgo:${POSTGRES_PASSWORD:-vexy_svgo_dev_password}@postgres:5432/vexy_svgo_marketplace
scripts/marketplace-setup.sh-      REDIS_URL: redis://redis:6379
scripts/marketplace-setup.sh-      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
scripts/marketplace-setup.sh-      API_PORT: ${API_PORT:-3000}
--
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh-networks:
scripts/marketplace-setup.sh-  default:
scripts/marketplace-setup.sh:    name: vexy_svgo_marketplace
scripts/marketplace-setup.sh-EOF
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh-    log "Docker Compose configuration created"
--
scripts/marketplace-setup.sh-    # Create Cargo.toml for API
scripts/marketplace-setup.sh-    cat > ${MARKETPLACE_DIR}/api/Cargo.toml << 'EOF'
scripts/marketplace-setup.sh-[package]
scripts/marketplace-setup.sh:name = "vexy_svgo-marketplace-api"
scripts/marketplace-setup.sh-version = "0.1.0"
scripts/marketplace-setup.sh-edition = "2021"
scripts/marketplace-setup.sh-
--
scripts/marketplace-setup.sh-    // Mock data for development
scripts/marketplace-setup.sh-    let plugins = vec![
scripts/marketplace-setup.sh-        PluginInfo {
scripts/marketplace-setup.sh:            name: "vexy_svgo-plugin-accessibility".to_string(),
scripts/marketplace-setup.sh-            version: "1.0.0".to_string(),
scripts/marketplace-setup.sh-            description: "Adds accessibility attributes to SVG elements".to_string(),
scripts/marketplace-setup.sh-            author: "Vexy SVGO Team".to_string(),
--
scripts/marketplace-setup.sh-            stars: 34,
scripts/marketplace-setup.sh-        },
scripts/marketplace-setup.sh-        PluginInfo {
scripts/marketplace-setup.sh:            name: "vexy_svgo-plugin-minify".to_string(),
scripts/marketplace-setup.sh-            version: "2.1.0".to_string(),
scripts/marketplace-setup.sh-            description: "Advanced minification for SVG files".to_string(),
scripts/marketplace-setup.sh-            author: "Community".to_string(),
--
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh-async fn get_plugin(axum::extract::Path(name): axum::extract::Path<String>) -> Result<Json<PluginInfo>, StatusCode> {
scripts/marketplace-setup.sh-    // Mock plugin lookup
scripts/marketplace-setup.sh:    if name == "vexy_svgo-plugin-accessibility" {
scripts/marketplace-setup.sh-        Ok(Json(PluginInfo {
scripts/marketplace-setup.sh:            name: "vexy_svgo-plugin-accessibility".to_string(),
scripts/marketplace-setup.sh-            version: "1.0.0".to_string(),
scripts/marketplace-setup.sh-            description: "Adds accessibility attributes to SVG elements".to_string(),
scripts/marketplace-setup.sh-            author: "Vexy SVGO Team".to_string(),
--
scripts/marketplace-setup.sh-WORKDIR /app
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh-# Copy binary from builder stage
scripts/marketplace-setup.sh:COPY --from=builder /app/target/release/vexy_svgo-marketplace-api .
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh-EXPOSE 3000
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh:CMD ["./vexy_svgo-marketplace-api"]
scripts/marketplace-setup.sh-EOF
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh-    log "API server scaffold created"
--
scripts/marketplace-setup.sh-    # Create package.json
scripts/marketplace-setup.sh-    cat > ${MARKETPLACE_DIR}/web/package.json << 'EOF'
scripts/marketplace-setup.sh-{
scripts/marketplace-setup.sh:  "name": "vexy_svgo-marketplace-web",
scripts/marketplace-setup.sh-  "version": "0.1.0",
scripts/marketplace-setup.sh-  "private": true,
scripts/marketplace-setup.sh-  "scripts": {
--
scripts/marketplace-setup.sh-    package_size BIGINT,
scripts/marketplace-setup.sh-    package_hash VARCHAR(128),
scripts/marketplace-setup.sh-    signature TEXT,
scripts/marketplace-setup.sh:    vexy_svgo_version_requirement VARCHAR(100),
scripts/marketplace-setup.sh-    published_at TIMESTAMP DEFAULT NOW(),
scripts/marketplace-setup.sh-    yanked BOOLEAN DEFAULT FALSE,
scripts/marketplace-setup.sh-    yank_reason TEXT,
--
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh--- Insert test users
scripts/marketplace-setup.sh-INSERT INTO users (username, email, password_hash, github_username, is_verified) VALUES
scripts/marketplace-setup.sh:('admin', 'admin@vexy_svgo.org', '$2b$12$dummy.hash.for.development', 'vexy_svgo-admin', true),
scripts/marketplace-setup.sh-('developer1', 'dev1@example.com', '$2b$12$dummy.hash.for.development', 'dev1', true),
scripts/marketplace-setup.sh-('developer2', 'dev2@example.com', '$2b$12$dummy.hash.for.development', 'dev2', true);
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh--- Insert test plugins
scripts/marketplace-setup.sh-INSERT INTO plugins (name, display_name, description, author_id, license, repository, keywords, categories) VALUES
scripts/marketplace-setup.sh-(
scripts/marketplace-setup.sh:    'vexy_svgo-plugin-accessibility',
scripts/marketplace-setup.sh-    'Accessibility Plugin',
scripts/marketplace-setup.sh-    'Adds accessibility attributes to SVG elements for better screen reader support',
scripts/marketplace-setup.sh-    2,
scripts/marketplace-setup.sh-    'MIT',
scripts/marketplace-setup.sh:    'https://github.com/dev1/vexy_svgo-plugin-accessibility',
scripts/marketplace-setup.sh-    ARRAY['accessibility', 'a11y', 'aria'],
scripts/marketplace-setup.sh-    ARRAY['accessibility', 'enhancement']
scripts/marketplace-setup.sh-),
scripts/marketplace-setup.sh-(
scripts/marketplace-setup.sh:    'vexy_svgo-plugin-minify',
scripts/marketplace-setup.sh-    'Advanced Minifier',
scripts/marketplace-setup.sh-    'Advanced minification techniques for maximum file size reduction',
scripts/marketplace-setup.sh-    3,
scripts/marketplace-setup.sh-    'Apache-2.0',
scripts/marketplace-setup.sh:    'https://github.com/dev2/vexy_svgo-plugin-minify',
scripts/marketplace-setup.sh-    ARRAY['minify', 'compression', 'optimization'],
scripts/marketplace-setup.sh-    ARRAY['optimization', 'size-reduction']
scripts/marketplace-setup.sh-);
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh--- Insert plugin versions
scripts/marketplace-setup.sh:INSERT INTO plugin_versions (plugin_id, version, changelog, package_size, vexy_svgo_version_requirement) VALUES
scripts/marketplace-setup.sh-(1, '1.0.0', 'Initial release with basic accessibility features', 45632, '>=2.0.0'),
scripts/marketplace-setup.sh-(1, '1.0.1', 'Bug fixes for aria-label generation', 45891, '>=2.0.0'),
scripts/marketplace-setup.sh-(2, '2.0.0', 'Complete rewrite with better compression algorithms', 78234, '>=2.0.0'),
--
scripts/marketplace-setup.sh-    
scripts/marketplace-setup.sh-    cat > ${MARKETPLACE_DIR}/.env.example << 'EOF'
scripts/marketplace-setup.sh-# Database Configuration
scripts/marketplace-setup.sh:POSTGRES_PASSWORD=vexy_svgo_dev_password
scripts/marketplace-setup.sh:DATABASE_URL=postgres://vexy_svgo:vexy_svgo_dev_password@localhost:5432/vexy_svgo_marketplace
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh-# Redis Configuration
scripts/marketplace-setup.sh-REDIS_URL=redis://localhost:6379
--
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh-echo "Creating database backup..."
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh:docker-compose exec -T postgres pg_dump -U vexy_svgo vexy_svgo_marketplace > "${BACKUP_DIR}/${BACKUP_FILE}"
scripts/marketplace-setup.sh-
scripts/marketplace-setup.sh-echo "Backup created: ${BACKUP_FILE}"
scripts/marketplace-setup.sh-
--
test/svgo_compatibility_tests.rs-//! These tests verify that Vexy SVGO is feature-compatible with SVGO
test/svgo_compatibility_tests.rs-
test/svgo_compatibility_tests.rs-use serde_json::json;
test/svgo_compatibility_tests.rs:use vexy_svgo::config::{Js2SvgOptions, LineEnding, QuoteAttrsStyle};
test/svgo_compatibility_tests.rs:use vexy_svgo::{optimize, Config, OptimizeOptions, PluginConfig};
test/svgo_compatibility_tests.rs-
test/svgo_compatibility_tests.rs-/// Test helper function to run optimization with specific plugins
test/svgo_compatibility_tests.rs-fn test_optimization(
--
CHANGELOG.md-## 2025-01-11 - Session 23: Vexify Tool Implementation
CHANGELOG.md-
CHANGELOG.md-### Created Vexify Tool for Rebranding
CHANGELOG.md:- **Implemented vexify.py**: Smart renaming tool for vexy_svgo → vexy_svgo migration
CHANGELOG.md:  - Analyzes codebase for all occurrences of 'vexy_svgo' (case-insensitive)
CHANGELOG.md-  - Performs intelligent replacements:
CHANGELOG.md:    - Filenames: `vexy_svgo` → `vexy_svgo`
CHANGELOG.md:    - Code identifiers: `vexy_svgo` → `vexy_svgo`
CHANGELOG.md-    - TypeScript types: `VexySVGOConfig` → `VexySVGOConfig`, `VexySVGOWrapper` → `VexySVGOWrapper`
CHANGELOG.md-    - Documentation/UI: `Vexy SVGO` → `Vexy SVGO`
CHANGELOG.md-  - Protects strings and comments from unwanted replacements
--
CHANGELOG.md-  - Can rewrite git history with `--deep` flag
CHANGELOG.md-  
CHANGELOG.md-### Documentation
CHANGELOG.md:- **Created vexify.txt**: Comprehensive analysis of all vexy_svgo occurrences
CHANGELOG.md:  - Found ~3,950+ lowercase `vexy_svgo` occurrences
CHANGELOG.md-  - Found ~260+ uppercase `Vexy SVGO` occurrences
CHANGELOG.md-  - Categorized by context (filenames, code, documentation, etc.)
CHANGELOG.md-  
--
CHANGELOG.md-- ✅ **XML parsing issues resolved** - Comments and whitespace properly preserved
CHANGELOG.md-- ✅ **Main library compiles successfully** - Zero compilation errors in plugin-sdk
CHANGELOG.md-- ✅ **Release automation complete** - Comprehensive release-v2.sh script created
CHANGELOG.md:- ✅ **CLI functional** - vexy_svgo optimizer works correctly
CHANGELOG.md-
CHANGELOG.md-### Current Work
CHANGELOG.md-- ✅ **Test framework updates** - Fixed all ~160 test compilation errors
--
CHANGELOG.md-
CHANGELOG.md-### Build Status
CHANGELOG.md-- **Main Release Build**: Successful compilation of release binary
CHANGELOG.md:- **CLI Functionality**: vexy_svgo optimizer working correctly
CHANGELOG.md-- **Plugin System**: All plugins compile without errors
CHANGELOG.md-
CHANGELOG.md-## 2025-01-11 - Session 15: Release Automation and Plugin Fixes
--
CHANGELOG.md-
CHANGELOG.md-### Documentation Updates
CHANGELOG.md-- **CLAUDE.md Corrections**: Updated to reflect actual project structure
CHANGELOG.md:  - Corrected plugin location from `vexy_svgo/src/plugins/` to `crates/plugin-sdk/src/plugins/`
CHANGELOG.md:  - Updated architecture description to show `vexy_svgo` crate as re-export facade
CHANGELOG.md-  - Added information about advanced lyon-based geometric features
CHANGELOG.md-- **Plugin Module Organization**: Added proper module declarations to lib.rs
CHANGELOG.md-
--
CHANGELOG.md-  - Removed 55 duplicate test files
CHANGELOG.md-
CHANGELOG.md-### Project Architecture Clarification
CHANGELOG.md:- **Plugin Location**: Confirmed plugins are implemented in `crates/plugin-sdk/src/plugins/` (not `vexy_svgo/src/plugins/` as CLAUDE.md suggests)
CHANGELOG.md:- **vexy_svgo Crate Role**: Currently serves as a facade that re-exports functionality from core crates
CHANGELOG.md:- **No Code Duplication**: Verified no duplication between `vexy_svgo/` and `crates/` folders
CHANGELOG.md-
CHANGELOG.md-### Next Priority
CHANGELOG.md-- Fix compilation errors listed in TODO.md to restore build stability
--
CHANGELOG.md-### Project Structure Consolidation (Issue #211)
CHANGELOG.md-- **Consolidated Documentation**: Merged all relevant information from `PLAN.md`, `WORK.md`, `REFACTOR.md`, `PLUGIN_MIGRATE.md`, `LEAN.md`, and `SPEC.md` into comprehensive `TODO.md`
CHANGELOG.md-- **Removed Redundant Files**: Deleted obsolete markdown files to maintain single source of truth in `TODO.md`
CHANGELOG.md:- **Legacy Code Cleanup**: Removed duplicate files from `vexy_svgo/src/` that were superseded by `crates/` structure:
CHANGELOG.md:  - Removed `vexy_svgo/src/ast.rs`, `vexy_svgo/src/config.rs`, `vexy_svgo/src/stringifier.rs`, `vexy_svgo/src/visitor.rs`
CHANGELOG.md:  - Removed `vexy_svgo/src/test_utils.rs`, `vexy_svgo/src/preset.rs`
CHANGELOG.md:  - Maintained clean `vexy_svgo/src/lib.rs` as main library facade
CHANGELOG.md-
CHANGELOG.md-### Compilation Issues Resolution
CHANGELOG.md-- **Fixed Import Issues**: Updated `crates/core/src/optimizer/mod.rs` to use correct stringifier function
--
CHANGELOG.md-- **Error Handling**: Added proper anyhow::Error conversion for plugin system
CHANGELOG.md-
CHANGELOG.md-### Project Architecture Status
CHANGELOG.md:- **Clean Structure**: Project now has clear separation between legacy `vexy_svgo/` facade and modern `crates/` implementation
CHANGELOG.md-- **Single Documentation Source**: All project information consolidated in `TODO.md` with clear priorities and roadmap
CHANGELOG.md-- **Build System**: Working toward compilation stability after structural cleanup
CHANGELOG.md-
--
CHANGELOG.md-## 2025-07-09 - Session 4: Codebase Consolidation and Refactoring
CHANGELOG.md-
CHANGELOG.md-### Codebase Restructuring
CHANGELOG.md:- Moved `vexy_svgo/src/parser.rs` to `crates/core/src/parser/mod.rs`.
CHANGELOG.md:- Moved `vexy_svgo/src/optimizer.rs` to `crates/core/src/optimizer/mod.rs`.
CHANGELOG.md:- Moved `vexy_svgo/src/plugin.rs` to `crates/plugin-sdk/src/lib.rs`.
CHANGELOG.md:- Moved `vexy_svgo/src/bin/vexy_svgo.rs` (CLI) to `crates/cli/src/main.rs`.
CHANGELOG.md:- Moved `vexy_svgo/src/wasm.rs` to `crates/wasm/src/lib.rs`.
CHANGELOG.md-- Updated `Cargo.toml` files to reflect the new module paths and dependencies.
CHANGELOG.md-
CHANGELOG.md-### Cleanup
CHANGELOG.md-- Consolidated `REFACTOR.md`, `PLUGIN_MIGRATE.md`, `LEAN.md`, `SPEC.md`, `WORK.md`, and `PLAN.md` into `TODO.md`.
CHANGELOG.md-- Removed the old markdown files (`REFACTOR.md`, `PLUGIN_MIGRATE.md`, `LEAN.md`, `SPEC.md`, `WORK.md`, `PLAN.md`).
CHANGELOG.md-- Removed the `examples/` directory.
CHANGELOG.md:- Removed the `vexy_svgo/benches/` directory.
CHANGELOG.md-
CHANGELOG.md-### Documentation
CHANGELOG.md-- Updated `TODO.md` with all relevant information from the consolidated markdown files.
--
CHANGELOG.md-## 2025-07-09 - Session 2: API Documentation
CHANGELOG.md-
CHANGELOG.md-### Documentation
CHANGELOG.md:- Added comprehensive documentation to all public APIs in the `vexy_svgo-cli` and `vexy_svgo-core` crates.
CHANGELOG.md-- Documented the `main` function and `Args` struct in the CLI crate.
CHANGELOG.md-- Documented the `optimize` function, `Optimizer` struct, `parser` module, and `ast` module in the core crate.
CHANGELOG.md-- This provides a solid foundation for developers to understand and use the project.
--
CHANGELOG.md-- Successfully built and tested the project after installing the Rust toolchain.
CHANGELOG.md-
CHANGELOG.md-### Testing
CHANGELOG.md:- Added the first integration test for the `vexy_svgo` CLI crate, verifying the `--version` command.
CHANGELOG.md-- This establishes a baseline for future test-driven development.
CHANGELOG.md-
CHANGELOG.md-## 2025-01-09 - Session 5: Build System Fixes & Plugin Migration Ready
--
Cargo.toml-edition = "2021"
Cargo.toml-authors = [ "Adam Twardoch <adam@twardoch.com>" ]
Cargo.toml-license = "MIT"
Cargo.toml:repository = "https://github.com/twardoch/vexy-svgo"
Cargo.toml:homepage = "https://github.com/twardoch/vexy-svgo"
Cargo.toml-
Cargo.toml-
Cargo.toml-[workspace.dependencies]
--
tree_output.txt-│       │   ├── enhanced.rs
tree_output.txt-│       │   ├── lib.rs
tree_output.txt-│       │   └── minimal.rs
tree_output.txt:│       ├── vexy_svgo.d.ts
tree_output.txt-│       └── wrapper.js
tree_output.txt-├── debug_comment_issue
tree_output.txt-├── debug_comment_issue.rs
--
tree_output.txt-│   ├── SVGO_PLUGINS_COMPREHENSIVE_LIST.md
tree_output.txt-│   ├── tailwind.config.js
tree_output.txt-│   ├── usage.md
tree_output.txt:│   ├── vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md
tree_output.txt-│   └── wasm-demo.html
tree_output.txt-├── examples
tree_output.txt-│   ├── .DS_Store
--
tree_output.txt-├── vexify_report.json
tree_output.txt-├── vexify.py
tree_output.txt-├── vexify.txt
tree_output.txt:├── vexy_svgo
tree_output.txt-│   ├── .DS_Store
tree_output.txt-│   ├── build.rs
tree_output.txt-│   ├── Cargo.lock
--
CLAUDE.md-
CLAUDE.md-After every iteration, /report and mark completed items as done in @PLAN.md and @TODO.md. Then run `./build.sh` and then check the `./build_logs`. If needed read the @llms.txt code snapshot. Then /work on items from @TODO.md consulting on @PLAN.md. Then review reflect refine revise, and then continue to /work on @PLAN.md and @TODO.md until every single item and issue has been fixed. Iterate iterate iterate! Do not stop, do not ask for confirmation. Work! When you're finishing one task or item, say "Wait, but..." and go on to the next task/item. It’s CRUCIAL that we get to a solution that BUILDS everything correctly!
CLAUDE.md-
CLAUDE.md:# Claude Development Guide for vexy_svgo
CLAUDE.md-
CLAUDE.md:This document provides the necessary context and guidelines for developing `vexy_svgo`, a high-performance SVG optimizer written in Rust. It is an API-compatible port of the popular Node.js-based tool, `svgo`.
CLAUDE.md-
CLAUDE.md-## 1. Project Overview
CLAUDE.md-
CLAUDE.md:`vexy_svgo` is an advanced, native Rust port of `svgo`. It is designed for speed, efficiency, and seamless integration into various workflows.
CLAUDE.md-
CLAUDE.md-**Key Features:**
CLAUDE.md-*   **High Performance:** Significantly faster than the original `svgo`.
--
CLAUDE.md-The repository is organized as a Cargo workspace with several crates:
CLAUDE.md-
CLAUDE.md-*   `crates/`: Home for all the Rust crates.
CLAUDE.md:    *   `cli/`: The command-line interface for `vexy_svgo`. This crate handles argument parsing, configuration loading, and file I/O.
CLAUDE.md:    *   `core/`: The heart of `vexy_svgo`. It contains the SVG parser, the optimizer, the plugin driver, and the stringifier. It does not know about specific plugins.
CLAUDE.md:    *   `ffi/`: Provides Foreign Function Interface (FFI) bindings for `vexy_svgo`, allowing it to be called from other languages like C, Python, or Node.js.
CLAUDE.md-    *   `plugin-sdk/`: Provides the traits and types for creating plugins. It also includes a registry for discovering and managing plugins.
CLAUDE.md-    *   `test-utils/`: Contains helper functions and macros for testing plugins and the core engine.
CLAUDE.md:    *   `wasm/`: The WebAssembly bindings for `vexy_svgo`, allowing it to run in the browser and Node.js.
CLAUDE.md:*   `vexy_svgo/`: The main Rust crate that integrates all the other crates. Currently serves primarily as a re-export crate.
CLAUDE.md:    *   `tests/`: Contains integration and compatibility tests, including those that compare `vexy_svgo`'s output with `svgo`'s.
CLAUDE.md-*   `ref/svgo/`: A git submodule pointing to the original `svgo` repository. This is used for reference and for running compatibility tests.
CLAUDE.md-*   `docs/`: The documentation website, built with Jekyll.
CLAUDE.md-*   `scripts/`: A collection of shell scripts for building, testing, and benchmarking the project.
--
CLAUDE.md-
CLAUDE.md-## 4. Architecture
CLAUDE.md-
CLAUDE.md:`vexy_svgo`'s architecture is modular and inspired by `svgo` to ensure API and functional compatibility. The core logic is separated into several crates:
CLAUDE.md-
CLAUDE.md-1.  **`crates/core`:** This crate is the heart of the optimizer. It is responsible for:
CLAUDE.md-    *   **Parsing (`parser.rs`):** An XML parser (`roxmltree`) reads the input SVG string into a custom Abstract Syntax Tree (AST) defined in `ast.rs`. It includes advanced features like XML entity expansion and selective whitespace preservation.
--
CLAUDE.md-    *   A plugin registry for discovering and managing available plugins.
CLAUDE.md-    *   The implementations of all the optimization plugins in `src/plugins/`. This includes advanced geometric features using the `lyon` crate for path data optimization.
CLAUDE.md-
CLAUDE.md:3.  **`vexy_svgo` crate:** This is the main crate that brings everything together. It primarily serves as a re-export crate that provides the public API.
CLAUDE.md-
CLAUDE.md:4.  **`crates/cli`:** This crate provides the command-line interface for `vexy_svgo`. It is responsible for parsing command-line arguments, loading configuration files, and running the optimizer on the specified files.
CLAUDE.md-
CLAUDE.md:5.  **`crates/wasm`:** This crate is a thin wrapper around the `vexy_svgo` crate that exposes a WebAssembly-compatible API.
CLAUDE.md-
CLAUDE.md:6.  **`crates/ffi`:** This crate provides Foreign Function Interface (FFI) bindings for `vexy_svgo`, allowing it to be called from other languages like C, Python, or Node.js.
CLAUDE.md-
CLAUDE.md-## 5. Testing Strategy
CLAUDE.md-
CLAUDE.md-The project relies on a robust testing strategy to ensure correctness and compatibility.
CLAUDE.md-
CLAUDE.md:*   **Unit & Integration Tests:** Located within the `vexy_svgo` crate in `vexy_svgo/tests`, these tests cover individual functions and modules. Run with `cargo test`.
CLAUDE.md:*   **SVGO Compatibility Tests:** The `vexy_svgo/tests/svgo_compatibility_tests.rs` file runs a large suite of tests ported from `svgo`. The script `generate_compatibility_tests.py` helps automate the creation of these test cases from the `ref/svgo` submodule. This is critical for maintaining parity.
CLAUDE.md-*   **Plugin Tests:** Each plugin has its own set of tests in `test/plugins/`. These tests are automatically generated from the `svgo` test fixtures. Additionally, property-based tests are used to ensure robustness and correctness across a wide range of inputs.
CLAUDE.md-*   **CI Automation:** GitHub Actions automatically run all tests, lints, and format checks on every push and pull request across macOS, Windows, and Linux.
CLAUDE.md-
CLAUDE.md-## 6. Reference: SVGO Specification
CLAUDE.md-
CLAUDE.md:Since `vexy_svgo` is an API-compatible port, the `svgo` specification is the primary reference for functionality and the plugin system. The goal is to match the behavior of `svgo` as closely as possible.
CLAUDE.md-
CLAUDE.md-### 6.1. Core API: `optimize(input, config)`
CLAUDE.md-The main function takes an SVG string and an optional configuration object. The configuration allows enabling/disabling plugins and setting their parameters.
CLAUDE.md-
CLAUDE.md-### 6.2. Plugins
CLAUDE.md:Plugins are the core of the optimization process. `vexy_svgo` aims to implement all major `svgo` plugins. When working on a plugin, refer to its counterpart in `ref/svgo/plugins/` for the exact logic and behavior. The default plugin preset from `svgo` is the baseline for default optimizations.
CLAUDE.md-
CLAUDE.md:*(A full list of SVGO plugins can be found in the original `svgo` documentation or the `GEMINI.md` file for this project. This list serves as the implementation roadmap for `vexy_svgo`.)*
CLAUDE.md-
CLAUDE.md-## 7. AI Assistant Guidelines
CLAUDE.md-
--
scripts/track-bundle-size.sh-failed=0
scripts/track-bundle-size.sh-
scripts/track-bundle-size.sh-# Check each bundle
scripts/track-bundle-size.sh:check_size "Web target" "pkg-web/vexy_svgo_wasm_bg.wasm" $LIMIT_WEB || failed=1
scripts/track-bundle-size.sh:check_size "Node.js target" "pkg-node/vexy_svgo_wasm_bg.wasm" $LIMIT_NODE || failed=1
scripts/track-bundle-size.sh:check_size "Bundler target" "pkg-bundler/vexy_svgo_wasm_bg.wasm" $LIMIT_BUNDLER || failed=1
scripts/track-bundle-size.sh:check_size "Minimal build" "pkg-minimal/vexy_svgo_wasm_bg.wasm" $LIMIT_MINIMAL || failed=1
scripts/track-bundle-size.sh:check_size "Full build" "pkg-full/vexy_svgo_wasm_bg.wasm" $LIMIT_FULL || failed=1
scripts/track-bundle-size.sh-
scripts/track-bundle-size.sh-echo -e "\nGzipped sizes:"
scripts/track-bundle-size.sh-for pkg in pkg-web pkg-node pkg-bundler pkg-minimal pkg-full; do
scripts/track-bundle-size.sh:    if [ -f "$pkg/vexy_svgo_wasm_bg.wasm" ]; then
scripts/track-bundle-size.sh:        gzip -c "$pkg/vexy_svgo_wasm_bg.wasm" > "$pkg/vexy_svgo_wasm_bg.wasm.gz"
scripts/track-bundle-size.sh:        gzip_size=$(get_size_kb "$pkg/vexy_svgo_wasm_bg.wasm.gz")
scripts/track-bundle-size.sh-        echo "  $pkg: ${gzip_size}KB (gzipped)"
scripts/track-bundle-size.sh:        rm "$pkg/vexy_svgo_wasm_bg.wasm.gz"
scripts/track-bundle-size.sh-    fi
scripts/track-bundle-size.sh-done
scripts/track-bundle-size.sh-
--
scripts/track-bundle-size.sh-
scripts/track-bundle-size.sh-| Target | Size (KB) | Limit (KB) | Status |
scripts/track-bundle-size.sh-|--------|-----------|------------|--------|
scripts/track-bundle-size.sh:| Web | $(get_size_kb "pkg-web/vexy_svgo_wasm_bg.wasm") | $LIMIT_WEB | $([ $(get_size_kb "pkg-web/vexy_svgo_wasm_bg.wasm") -le $LIMIT_WEB ] && echo "✅" || echo "❌") |
scripts/track-bundle-size.sh:| Node.js | $(get_size_kb "pkg-node/vexy_svgo_wasm_bg.wasm") | $LIMIT_NODE | $([ $(get_size_kb "pkg-node/vexy_svgo_wasm_bg.wasm") -le $LIMIT_NODE ] && echo "✅" || echo "❌") |
scripts/track-bundle-size.sh:| Bundler | $(get_size_kb "pkg-bundler/vexy_svgo_wasm_bg.wasm") | $LIMIT_BUNDLER | $([ $(get_size_kb "pkg-bundler/vexy_svgo_wasm_bg.wasm") -le $LIMIT_BUNDLER ] && echo "✅" || echo "❌") |
scripts/track-bundle-size.sh:| Minimal | $(get_size_kb "pkg-minimal/vexy_svgo_wasm_bg.wasm") | $LIMIT_MINIMAL | $([ $(get_size_kb "pkg-minimal/vexy_svgo_wasm_bg.wasm") -le $LIMIT_MINIMAL ] && echo "✅" || echo "❌") |
scripts/track-bundle-size.sh:| Full | $(get_size_kb "pkg-full/vexy_svgo_wasm_bg.wasm") | $LIMIT_FULL | $([ $(get_size_kb "pkg-full/vexy_svgo_wasm_bg.wasm") -le $LIMIT_FULL ] && echo "✅" || echo "❌") |
scripts/track-bundle-size.sh-
scripts/track-bundle-size.sh-## Size History
scripts/track-bundle-size.sh-
--
CONTRIBUTING.md-1. **Fork the repository** on GitHub
CONTRIBUTING.md-2. **Clone your fork** locally:
CONTRIBUTING.md-   ```bash
CONTRIBUTING.md:   git clone https://github.com/YOUR-USERNAME/vexy_svgo.git
CONTRIBUTING.md:   cd vexy_svgo
CONTRIBUTING.md-   ```
CONTRIBUTING.md-3. **Add the upstream remote**:
CONTRIBUTING.md-   ```bash
CONTRIBUTING.md:   git remote add upstream https://github.com/twardoch/vexy_svgo.git
CONTRIBUTING.md-   ```
CONTRIBUTING.md-
CONTRIBUTING.md-## Development Setup
--
CONTRIBUTING.md-## Project Structure
CONTRIBUTING.md-
CONTRIBUTING.md-```
CONTRIBUTING.md:vexy_svgo/
CONTRIBUTING.md-├── crates/
CONTRIBUTING.md-│   ├── core/          # Core SVG processing engine
CONTRIBUTING.md-│   ├── cli/           # Command-line interface
--
docs/plugin-development.md-
docs/plugin-development.md-## Introduction
docs/plugin-development.md-
docs/plugin-development.md:Vexy SVGO plugins are Rust modules that implement the `Plugin` trait from the `vexy_svgo-plugin-sdk`. They can traverse and modify the SVG AST (Abstract Syntax Tree) to perform optimizations.
docs/plugin-development.md-
docs/plugin-development.md-### Why Create Plugins?
docs/plugin-development.md-
--
docs/plugin-development.md-curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
docs/plugin-development.md-
docs/plugin-development.md-# Clone the Vexy SVGO repository
docs/plugin-development.md:git clone https://github.com/twardoch/vexy_svgo.git
docs/plugin-development.md:cd vexy_svgo
docs/plugin-development.md-
docs/plugin-development.md-# Build the project
docs/plugin-development.md-./build.sh
--
docs/plugin-development.md-Create a new directory for your plugin:
docs/plugin-development.md-
docs/plugin-development.md-```bash
docs/plugin-development.md:mkdir -p vexy_svgo/src/plugins/my_custom_plugin
docs/plugin-development.md:cd vexy_svgo/src/plugins/my_custom_plugin
docs/plugin-development.md-```
docs/plugin-development.md-
docs/plugin-development.md-## Creating Your First Plugin
--
docs/plugin-development.md-
docs/plugin-development.md-### Step 1: Create the Plugin Module
docs/plugin-development.md-
docs/plugin-development.md:Create `vexy_svgo/src/plugins/my_custom_plugin/mod.rs`:
docs/plugin-development.md-
docs/plugin-development.md-```rust
docs/plugin-development.md:// this_file: vexy_svgo/src/plugins/my_custom_plugin/mod.rs
docs/plugin-development.md-
docs/plugin-development.md:use vexy_svgo_plugin_sdk::{Plugin, PluginMetadata};
docs/plugin-development.md:use vexy_svgo_core::visitor::{Visitor, VisitorContext};
docs/plugin-development.md:use vexy_svgo_core::ast::{Document, Element, Node};
docs/plugin-development.md-use anyhow::Result;
docs/plugin-development.md-use serde::{Deserialize, Serialize};
docs/plugin-development.md-
--
docs/plugin-development.md-#[cfg(test)]
docs/plugin-development.md-mod tests {
docs/plugin-development.md-    use super::*;
docs/plugin-development.md:    use vexy_svgo_core::parser::parse_svg_string;
docs/plugin-development.md:    use vexy_svgo_core::stringifier::stringify;
docs/plugin-development.md-    
docs/plugin-development.md-    #[test]
docs/plugin-development.md-    fn test_basic_functionality() {
--
docs/plugin-development.md-
docs/plugin-development.md-### Step 2: Register the Plugin
docs/plugin-development.md-
docs/plugin-development.md:Add your plugin to `vexy_svgo/src/plugins/mod.rs`:
docs/plugin-development.md-
docs/plugin-development.md-```rust
docs/plugin-development.md-// Add to the plugin modules
--
docs/plugin-development.md-
docs/plugin-development.md-# Test with CLI
docs/plugin-development.md-echo '<svg><rect x="0" y="0" width="100" height="100"/></svg>' | \
docs/plugin-development.md:  target/release/vexy_svgo --enable myCustomPlugin
docs/plugin-development.md-```
docs/plugin-development.md-
docs/plugin-development.md-## Advanced Plugin Development
--
docs/plugin-development.md-Here's a more advanced plugin that optimizes gradients:
docs/plugin-development.md-
docs/plugin-development.md-```rust
docs/plugin-development.md:// this_file: vexy_svgo/src/plugins/optimize_gradients/mod.rs
docs/plugin-development.md-
docs/plugin-development.md:use vexy_svgo_plugin_sdk::Plugin;
docs/plugin-development.md:use vexy_svgo_core::visitor::{Visitor, VisitorContext};
docs/plugin-development.md:use vexy_svgo_core::ast::{Document, Element, Node};
docs/plugin-development.md-use std::collections::{HashMap, HashSet};
docs/plugin-development.md-
docs/plugin-development.md-pub struct OptimizeGradientsPlugin {
--
docs/plugin-development.md-}
docs/plugin-development.md-
docs/plugin-development.md-impl Plugin for OptimizeGradientsPlugin {
docs/plugin-development.md:    fn metadata(&self) -> vexy_svgo_plugin_sdk::PluginMetadata {
docs/plugin-development.md:        vexy_svgo_plugin_sdk::PluginMetadata {
docs/plugin-development.md-            name: "optimizeGradients".to_string(),
docs/plugin-development.md-            description: "Removes duplicate gradients and unused gradients".to_string(),
docs/plugin-development.md-            version: "1.0.0".to_string(),
--
docs/plugin-development.md-Plugins can share data through the visitor context:
docs/plugin-development.md-
docs/plugin-development.md-```rust
docs/plugin-development.md:use vexy_svgo_core::visitor::{VisitorContext, ContextData};
docs/plugin-development.md-
docs/plugin-development.md-impl<'a> Visitor<'a> for MyPlugin {
docs/plugin-development.md-    fn visit_element_enter(
--
docs/plugin-development.md-#[cfg(test)]
docs/plugin-development.md-mod tests {
docs/plugin-development.md-    use super::*;
docs/plugin-development.md:    use vexy_svgo_test_utils::{assert_svg_eq, optimize_with_plugin};
docs/plugin-development.md-    
docs/plugin-development.md-    #[test]
docs/plugin-development.md-    fn test_removes_duplicate_gradients() {
--
docs/plugin-development.md-```toml
docs/plugin-development.md-# Cargo.toml
docs/plugin-development.md-[package]
docs/plugin-development.md:name = "vexy_svgo-plugin-custom"
docs/plugin-development.md-version = "0.1.0"
docs/plugin-development.md-edition = "2021"
docs/plugin-development.md-
docs/plugin-development.md-[dependencies]
docs/plugin-development.md:vexy_svgo-plugin-sdk = "2.0"
docs/plugin-development.md:vexy_svgo-core = "2.0"
docs/plugin-development.md-anyhow = "1.0"
docs/plugin-development.md-serde = { version = "1.0", features = ["derive"] }
docs/plugin-development.md-serde_json = "1.0"
docs/plugin-development.md-
docs/plugin-development.md-[dev-dependencies]
docs/plugin-development.md:vexy_svgo-test-utils = "2.0"
docs/plugin-development.md-```
docs/plugin-development.md-
docs/plugin-development.md-### 2. Documentation
--
docs/plugin-development.md-//! ## Usage
docs/plugin-development.md-//!
docs/plugin-development.md-//! ```rust
docs/plugin-development.md://! use vexy_svgo_plugin_custom::MyCustomPlugin;
docs/plugin-development.md://! use vexy_svgo_core::Config;
docs/plugin-development.md-//!
docs/plugin-development.md-//! let mut config = Config::default();
docs/plugin-development.md-//! config.plugins.push(PluginConfig::Name("myCustomPlugin".to_string()));
--
docs/plugin-development.md-
docs/plugin-development.md-## Resources
docs/plugin-development.md-
docs/plugin-development.md:- [Vexy SVGO Plugin SDK Documentation](https://docs.rs/vexy_svgo-plugin-sdk)
docs/plugin-development.md-- [SVG Specification](https://www.w3.org/TR/SVG2/)
docs/plugin-development.md-- [SVGO Plugin Reference](https://github.com/svg/svgo#plugins)
docs/plugin-development.md-- [Rust Visitor Pattern Guide](https://rust-unofficial.github.io/patterns/patterns/behavioural/visitor.html)
--
README.md-# Vexy SVGO - SVG Optimizer Next-generation
README.md-
README.md:[![CI Status](https://github.com/twardoch/vexy-svgo/workflows/CI/badge.svg)](https://github.com/twardoch/vexy-svgo/actions/workflows/ci.yml)
README.md:[![Documentation](https://img.shields.io/badge/docs-latest-blue.svg)](https://twardoch.github.io/vexy-svgo/)
README.md:[![Crates.io](https://img.shields.io/crates/v/vexy-svgo.svg)](https://crates.io/crates/vexy-svgo)
README.md-[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
README.md:[![Coverage](https://codecov.io/gh/twardoch/vexy_svgo/branch/main/graph/badge.svg)](https://codecov.io/gh/twardoch/vexy_svgo)
README.md-
README.md-**Vexy SVGO** is a high-performance SVG optimizer written in Rust, designed as a modern, API-compatible alternative to the popular Node.js-based SVGO tool. Built for speed, reliability, and extensibility.
README.md-
--
README.md-### **Package Managers**
README.md-```bash
README.md-# macOS (Homebrew)
README.md:brew install vexy-svgo
README.md-
README.md-# Windows (Chocolatey)
README.md:choco install vexy-svgo
README.md-
README.md-# Rust (Cargo)
README.md:cargo install vexy-svgo-cli
README.md-```
README.md-
README.md-### **Pre-built Binaries**
README.md:Download the latest binaries from [GitHub Releases](https://github.com/twardoch/vexy_svgo/releases):
README.md-- **macOS**: Universal binary (Apple Silicon + Intel)
README.md-- **Windows**: x64 executable
README.md-- **Linux**: x64 binary (statically linked)
--
README.md-### **Command Line**
README.md-```bash
README.md-# Basic optimization
README.md:vexy-svgo input.svg -o output.svg
README.md-
README.md-# Pipe from stdin to stdout
README.md:cat input.svg | vexy-svgo > output.svg
README.md-
README.md-# Batch processing
README.md:vexy-svgo *.svg --suffix .min
README.md-
README.md-# With configuration
README.md:vexy-svgo input.svg -o output.svg --config config.json
README.md-
README.md-# Interactive mode
README.md:vexy-svgo --interactive input.svg
README.md-```
README.md-
README.md-### **Configuration**
--
README.md-
README.md-### **JavaScript API (via WebAssembly)**
README.md-```javascript
README.md:import { optimize } from 'vexy-svgo';
README.md-
README.md-const result = await optimize(svgString, {
README.md-  plugins: ['removeComments', 'removeEmptyAttrs']
--
README.md-
README.md-### **Workspace Structure**
README.md-```
README.md:vexy_svgo/
README.md-├── crates/
README.md-│   ├── core/           # Core optimization engine
README.md-│   ├── cli/            # Command-line interface  
--
README.md-│   ├── wasm/           # WebAssembly bindings
README.md-│   ├── ffi/            # C FFI bindings
README.md-│   └── test-utils/     # Testing utilities
README.md:├── vexy_svgo/               # Main library crate
README.md-├── docs/               # Documentation website
README.md-└── examples/           # Usage examples
README.md-```
--
README.md-- `applyTransforms`, `inlineStyles`, `cleanupIds`
README.md-- `removeViewBox`, `sortAttrs`, `reusePaths`
README.md-
README.md:[View complete plugin list](https://twardoch.github.io/vexy_svgo/plugins.html)
README.md-
README.md-## 🚀 Performance
README.md-
--
README.md-### **Build Steps**
README.md-```bash
README.md-# Clone repository
README.md:git clone https://github.com/twardoch/vexy_svgo.git
README.md:cd vexy_svgo
README.md-
README.md-# Build release binary
README.md-cargo build --release
README.md-
README.md:# The binary will be at target/release/vexy_svgo
README.md-```
README.md-
README.md-### **Development Build**
--
README.md-./build.sh
README.md-
README.md-# Run specific tests
README.md:cargo test --package vexy_svgo-core
README.md:cargo test --package vexy_svgo-plugin-sdk
README.md-```
README.md-
README.md-### **WebAssembly Build**
--
README.md-
README.md-## 📚 Documentation
README.md-
README.md:- **[API Documentation](https://twardoch.github.io/vexy_svgo/)**
README.md:- **[Plugin Reference](https://twardoch.github.io/vexy_svgo/plugins.html)**
README.md-- **[Release Notes](RELEASE_CANDIDATE.md)**
README.md:- **[Migration Guide](https://twardoch.github.io/vexy_svgo/migration.html)**
README.md-
README.md-## 🤝 Contributing
README.md-
--
README.md-curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
README.md-
README.md-# Clone and build
README.md:git clone https://github.com/twardoch/vexy_svgo.git
README.md:cd vexy_svgo
README.md-./build.sh
README.md-```
README.md-
--
README.md-cargo test --workspace
README.md-
README.md-# Run specific test suite
README.md:cargo test --package vexy_svgo-core
README.md:cargo test --package vexy_svgo-plugin-sdk
README.md-
README.md-# Run benchmarks
README.md-cargo bench
--
README.md-
README.md-## 🐛 Issues & Support
README.md-
README.md:- **Bug Reports**: [GitHub Issues](https://github.com/twardoch/vexy_svgo/issues)
README.md:- **Feature Requests**: [GitHub Discussions](https://github.com/twardoch/vexy_svgo/discussions)
README.md:- **Documentation**: [Project Wiki](https://github.com/twardoch/vexy_svgo/wiki)
README.md-
README.md-## 📈 Roadmap
README.md-
--
build.sh-echo "Generating code snapshot in ./llms.txt ..."
build.sh-llms . "llms*.txt,*.d,*.json,*.html,*.svg,.specstory,ref,testdata,*.lock,*.svg,*.css"
build.sh-
build.sh:echo "Building the vexy_svgo project..."
build.sh-{
build.sh-    # Call the consolidated build script
build.sh-    ./scripts/build.sh
--
build.sh-    cargo fmt --check
build.sh-
build.sh-    echo "Build and verification complete."
build.sh:    echo "To run the optimized binary, use: ./target/release/vexy_svgo"
build.sh-
build.sh:    # ./target/release/vexy_svgo --help # This will be handled by the new build script
build.sh-} >build.log.txt 2>&1
build.sh-
build.sh-echo "build log created in: build.log.txt"
--
scripts/build.sh-        log_info "Building for Linux ($TARGET)..."
scripts/build.sh-        rustup target add "$TARGET" || true # Add target if not already added
scripts/build.sh-        cd "$CARGO_DIR"
scripts/build.sh:        cargo build --release --target "$TARGET" -p vexy_svgo-cli
scripts/build.sh:        cp "target/$TARGET/release/vexy_svgo" "$DIST_DIR/vexy_svgo-linux-$ARCH_TYPE"
scripts/build.sh:        chmod +x "$DIST_DIR/vexy_svgo-linux-$ARCH_TYPE"
scripts/build.sh-        log_info "Stripping binary..."
scripts/build.sh:        strip "$DIST_DIR/vexy_svgo-linux-$ARCH_TYPE" || log_warn "strip command not found, skipping binary stripping."
scripts/build.sh-        ;;
scripts/build.sh-    Darwin*)
scripts/build.sh-        log_info "Building for macOS (universal binary)..."
scripts/build.sh-        rustup target add x86_64-apple-darwin || true
scripts/build.sh-        rustup target add aarch64-apple-darwin || true
scripts/build.sh-        cd "$CARGO_DIR"
scripts/build.sh:        cargo build --release --target x86_64-apple-darwin -p vexy_svgo-cli
scripts/build.sh:        cargo build --release --target aarch64-apple-darwin -p vexy_svgo-cli
scripts/build.sh-        log_info "Creating universal binary..."
scripts/build.sh-        lipo -create \
scripts/build.sh:            "$PROJECT_ROOT/target/x86_64-apple-darwin/release/vexy_svgo" \
scripts/build.sh:            "$PROJECT_ROOT/target/aarch64-apple-darwin/release/vexy_svgo" \
scripts/build.sh:            -output "$DIST_DIR/vexy_svgo-macos-universal"
scripts/build.sh:        chmod +x "$DIST_DIR/vexy_svgo-macos-universal"
scripts/build.sh-        log_info "Verifying universal binary..."
scripts/build.sh:        file "$DIST_DIR/vexy_svgo-macos-universal"
scripts/build.sh:        lipo -info "$DIST_DIR/vexy_svgo-macos-universal"
scripts/build.sh-        ;;
scripts/build.sh-    CYGWIN*|MINGW32*|MSYS*|MINGW64*)
scripts/build.sh-        log_info "Building for Windows..."
--
scripts/build.sh-        esac
scripts/build.sh-        rustup target add "$TARGET" || true
scripts/build.sh-        cd "$CARGO_DIR"
scripts/build.sh:        cargo build --release --target "$TARGET" -p vexy_svgo-cli
scripts/build.sh:        cp "target/$TARGET/release/vexy_svgo.exe" "$DIST_DIR/vexy_svgo-windows-$ARCH_TYPE.exe"
scripts/build.sh-        ;;
scripts/build.sh-    *)
scripts/build.sh-        log_error "Unsupported operating system: $OS_TYPE"
--
scripts/build.sh-log_info "Creating archives..."
scripts/build.sh-cd "$DIST_DIR"
scripts/build.sh-if [[ "$OS_TYPE" == "Linux"* ]]; then
scripts/build.sh:    tar -czf "vexy_svgo-$VERSION-linux-$ARCH_TYPE.tar.gz" "vexy_svgo-linux-$ARCH_TYPE"
scripts/build.sh-elif [[ "$OS_TYPE" == "Darwin"* ]]; then
scripts/build.sh:    tar -czf "vexy_svgo-$VERSION-macos-universal.tar.gz" "vexy_svgo-macos-universal"
scripts/build.sh-elif [[ "$OS_TYPE" == "CYGWIN"* || "$OS_TYPE" == "MINGW32"* || "$OS_TYPE" == "MSYS"* || "$OS_TYPE" == "MINGW64"* ]]; then
scripts/build.sh:    zip "vexy_svgo-$VERSION-windows-$ARCH_TYPE.zip" "vexy_svgo-$ARCH_TYPE.exe"
scripts/build.sh-fi
scripts/build.sh-cd "$PROJECT_ROOT"
scripts/build.sh-
--
Cargo.lock-checksum = "0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a"
Cargo.lock-
Cargo.lock-[[package]]
Cargo.lock:name = "vexy_svgo-cli"
Cargo.lock-version = "2.1.0"
Cargo.lock-dependencies = [
Cargo.lock- "anyhow",
--
Cargo.lock- "serde_json",
Cargo.lock- "tempfile",
Cargo.lock- "toml 0.8.23",
Cargo.lock: "vexy_svgo-core",
Cargo.lock-]
Cargo.lock-
Cargo.lock-[[package]]
Cargo.lock:name = "vexy_svgo-core"
Cargo.lock-version = "2.1.0"
Cargo.lock-dependencies = [
Cargo.lock- "anyhow",
--
Cargo.lock-]
Cargo.lock-
Cargo.lock-[[package]]
Cargo.lock:name = "vexy_svgo-ffi"
Cargo.lock-version = "2.1.0"
Cargo.lock-dependencies = [
Cargo.lock- "anyhow",
Cargo.lock- "cbindgen",
Cargo.lock- "libc",
Cargo.lock- "serde_json",
Cargo.lock: "vexy_svgo-core",
Cargo.lock-]
Cargo.lock-
Cargo.lock-[[package]]
Cargo.lock:name = "vexy_svgo-wasm"
Cargo.lock-version = "2.1.0"
Cargo.lock-dependencies = [
Cargo.lock- "getrandom 0.3.3",
Cargo.lock- "js-sys",
Cargo.lock- "serde",
Cargo.lock- "serde_json",
Cargo.lock: "vexy_svgo-core",
Cargo.lock- "wasm-bindgen",
Cargo.lock- "wee_alloc",
Cargo.lock-]
--
TODO.md-
TODO.md-This phase focuses on standardizing the naming conventions across the codebase, documentation, and CLI to ensure consistency and clarity.
TODO.md-
TODO.md:1.  [ ] **Standardize `vexy_svgo` (snake_case) usage:**
TODO.md-
TODO.md:    - [ ] Verify all existing uses adhere to `vexy_svgo` in Rust crate names, module paths, internal code identifiers (variables, functions), WASM file names, JavaScript module imports, configuration file names, database names, storage keys. (Keep `vexy_svgo` for internal Rust identifiers, crate names, module paths, WASM file names, and configuration files where snake_case is idiomatic.)
TODO.md-
TODO.md-2.  [ ] **Standardize `Vexy SVGO` (Title Case, space separated) usage:**
TODO.md-
--
TODO.md-    - [ ] Change `Building VEXYSVGO...` to `Building Vexy SVGO...` in `test/comparative/test_plugins.sh`. (Change to `Vexy SVGO` for human-readable output.)
TODO.md-    - [ ] Change `VEXYSVGO` to `Vexy SVGO` in `crates/ffi/src/lib.rs` comment (related to FFI function descriptions). (Change to `Vexy SVGO` for human-readable comments.)
TODO.md-    - [ ] Change `VEXYSVGO Team` to `Vexy SVGO Team` in `CHANGELOG.md` and `scripts/marketplace-setup.sh`. (Change to `Vexy SVGO` for human-readable team names in documentation and scripts.)
TODO.md:    - [ ] Change `VEXYSVGO WebAssembly module` to `Vexy SVGO WebAssembly module` in `crates/wasm/vexy_svgo.d.ts`. (Change to `Vexy SVGO` for human-readable descriptions in type definitions.)
TODO.md-
TODO.md:3.  [ ] **Standardize `vexy-svgo` (kebab-case) usage for CLI and external references:**
TODO.md-
TODO.md:    - [ ] Rename CLI executable: Change the `vexy_svgo` binary name to `vexy-svgo`. This will involve updating `Cargo.toml` for the `cli` crate and build scripts. (Change to `vexy-svgo` for the CLI executable name and related build script references.)
TODO.md:    - [ ] Update CLI command examples: Change all instances of `vexy_svgo` to `vexy-svgo` in `README.md`, `examples/cli-usage.md`, and `docs/plugin-marketplace.md` (CLI commands). (Change to `vexy-svgo` for all CLI command examples.)
TODO.md:    - [ ] Update binary names in build scripts: Change `vexy_svgo-linux`, `vexy_svgo-macos-universal`, `vexy_svgo-windows` to `vexy-svgo-linux`, `vexy-svgo-macos-universal`, `vexy-svgo-windows` in `scripts/build.sh`. (Change to `vexy-svgo` for binary names in build scripts.)
TODO.md:    - [ ] Update repository URLs: Change `https://github.com/twardoch/vexy_svgo` to `https://github.com/twardoch/vexy-svgo` in `Cargo.toml`, `README.md`, `examples/wasm-enhanced-demo.html`, `docs/wasm-demo.html`, `docs/plugin-development.md`, `release.sh`, `issues/301.txt`. (Change to `vexy-svgo` for repository URLs.)
TODO.md:    - [ ] Update package manager instructions: Ensure `brew install vexy-svgo` and `choco install vexy-svgo` are used in `README.md`. (Change to `vexy-svgo` for package manager instructions.)
TODO.md:    - [ ] Update project root check in `release.sh`: Change `vexy_svgo` to `vexy-svgo`. (Change to `vexy-svgo` for project root checks in scripts.)
TODO.md:    - [ ] Update `docs/plugin-development.md`: Change `vexy_svgo` in clone/build/mkdir commands to `vexy-svgo`. (Change to `vexy-svgo` for commands in documentation.)
TODO.md-
TODO.md-4.  [ ] **Remove `VEXYSVGO` (all caps) for general use:**
TODO.md:    - [ ] Change all instances identified in step 2.2 to `Vexy SVGO` or `vexy_svgo` as appropriate. (Remove `VEXYSVGO` and replace with `Vexy SVGO` for human-readable text or `vexy_svgo` for code identifiers, depending on context.)
TODO.md-
TODO.md-## 2. 🔧 Phase 1: Code Cleanup (Immediate Priority)
TODO.md-
--
test/comparative/test_plugins.sh-    local plugin=""
test/comparative/test_plugins.sh-    local test_file=""
test/comparative/test_plugins.sh-    local verbose=false
test/comparative/test_plugins.sh:    local build_vexy_svgo=false
test/comparative/test_plugins.sh-    local quick=false
test/comparative/test_plugins.sh-    local list_plugins_flag=false
test/comparative/test_plugins.sh-    local test_all=false
--
test/comparative/test_plugins.sh-                shift
test/comparative/test_plugins.sh-                ;;
test/comparative/test_plugins.sh-            --build)
test/comparative/test_plugins.sh:                build_vexy_svgo=true
test/comparative/test_plugins.sh-                shift
test/comparative/test_plugins.sh-                ;;
test/comparative/test_plugins.sh-            --quick)
--
test/comparative/test_plugins.sh-    fi
test/comparative/test_plugins.sh-    
test/comparative/test_plugins.sh-    # Build Vexy SVGO if requested
test/comparative/test_plugins.sh:    if [[ "$build_vexy_svgo" == "true" ]]; then
test/comparative/test_plugins.sh-        log "Building Vexy SVGO..."
test/comparative/test_plugins.sh-        cd "$ROOT_DIR"
test/comparative/test_plugins.sh-        cargo build --release
--
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md-## Key Findings
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md-
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md-### 1. Overall Implementation Status
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md:- **47 plugin files** exist in `/vexy_svgo/src/plugins/`
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md-- **46 plugins** are registered in the plugin registry
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md-- **1 plugin** (removeAttributesBySelector) is implemented but commented out due to CSS selector parsing issues
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md-
--
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md-
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md-#### ⚠️ Problematic Implementations (2 plugins)
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md-1. **convertPathData** - Stub implementation that returns an error
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md:   - Error message: "convertPathData plugin not yet implemented in vexy_svgo"
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md-   - This is a critical plugin for path optimization
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md-   
docs/vexy_svgo_PLUGIN_ANALYSIS_SUMMARY.md-2. **removeAttributesBySelector** - Implemented but disabled
--
issues/602.txt-33 |     config: SortDefsChildrenConfig,
issues/602.txt-   |     ^^^^^^
issues/602.txt-
issues/602.txt:warning: `vexy_svgo-core` (lib) generated 5 warnings (run `cargo fix --lib -p vexy_svgo-core` to apply 2 suggestions)
issues/602.txt:warning: `vexy_svgo-core` (lib) generated 5 warnings (5 duplicates)
issues/602.txt:warning: `vexy_svgo-plugin-sdk` (lib) generated 75 warnings (run `cargo fix --lib -p vexy_svgo-plugin-sdk` to apply 17 suggestions)
issues/602.txt:   Compiling vexy_svgo-cli v2.1.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/cli)
issues/602.txt:   Compiling vexy_svgo-wasm v2.1.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/wasm)
issues/602.txt:   Compiling vexy_svgo-ffi v2.1.0 (/Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/ffi)
issues/602.txt:error[E0432]: unresolved import `vexy_svgo_core::config::QuoteAttrsStyle`
issues/602.txt- --> crates/test-utils/tests/compat.rs:7:52
issues/602.txt-  |
issues/602.txt-7 | ...s, LineEnding, QuoteAttrsStyle};
issues/602.txt-  |                   ^^^^^^^^^^^^^^^ no `QuoteAttrsStyle` in `parser::config`
issues/602.txt-
issues/602.txt:error[E0615]: attempted to take value of method `params` on type `vexy_svgo_core::PluginConfig`
issues/602.txt-  --> crates/test-utils/tests/compat.rs:22:20
issues/602.txt-   |
issues/602.txt-22 |             plugin.params = params.clone();
--
issues/602.txt-warning: unused import: `Plugin`
issues/602.txt- --> crates/plugin-sdk/tests/registry_test.rs:9:23
issues/602.txt-  |
issues/602.txt:9 | use vexy_svgo_plugin_sdk::{Plugin, plugins::{CollapseGroupsPlug...
issues/602.txt-  |                       ^^^^^^
issues/602.txt-  |
issues/602.txt-  = note: `#[warn(unused_imports)]` on by default
--
issues/602.txt-
issues/602.txt-Some errors have detailed explanations: E0308, E0432, E0560, E0599, E0615.
issues/602.txt-For more information about an error, try `rustc --explain E0308`.
issues/602.txt:error: could not compile `vexy_svgo-test-utils` (test "compat") due to 25 previous errors
issues/602.txt-warning: build failed, waiting for other jobs to finish...
issues/602.txt-error[E0308]: mismatched types
issues/602.txt-    --> crates/core/src/optimizer/mod.rs:299:19
--
issues/602.txt-318 |         use std::collections::HashMap;
issues/602.txt-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
issues/602.txt-
issues/602.txt:warning: unused import: `vexy_svgo_core::ast::*`
issues/602.txt-   --> crates/plugin-sdk/src/plugins/move_elems_attrs_to_group.rs:235:9
issues/602.txt-    |
issues/602.txt:235 |     use vexy_svgo_core::ast::*;
issues/602.txt-    |         ^^^^^^^^^^^^^^^^^
issues/602.txt-
issues/602.txt-warning: unused import: `std::collections::HashMap`
--
issues/602.txt-warning: unused import: `Element`
issues/602.txt-   --> crates/plugin-sdk/src/plugins/remove_empty_attrs.rs:121:36
issues/602.txt-    |
issues/602.txt:121 |     use vexy_svgo_core::ast::{Document, Element};
issues/602.txt-    |                                    ^^^^^^^
issues/602.txt-
issues/602.txt-warning: unused import: `Document`
issues/602.txt-   --> crates/plugin-sdk/src/plugins/reuse_paths.rs:336:26
issues/602.txt-    |
issues/602.txt:336 |     use vexy_svgo_core::ast::{Document, Element, Node};
issues/602.txt-    |                          ^^^^^^^^
issues/602.txt-
issues/602.txt-warning: unused import: `anyhow`
--
issues/602.txt-12 | use std::path::{Path, PathBuf};
issues/602.txt-   |                       ^^^^^^^
issues/602.txt-
issues/602.txt:warning: unused import: `vexy_svgo_core::ast::Document`
issues/602.txt-  --> crates/plugin-sdk/src/test_utils.rs:13:5
issues/602.txt-   |
issues/602.txt:13 | use vexy_svgo_core::ast::Document;
issues/602.txt-   |     ^^^^^^^^^^^^^^^^^^^^^^^^
issues/602.txt-
issues/602.txt-Some errors have detailed explanations: E0106, E0308.
issues/602.txt-For more information about an error, try `rustc --explain E0106`.
issues/602.txt:warning: `vexy_svgo-core` (lib test) generated 5 warnings (4 duplicates)
issues/602.txt:error: could not compile `vexy_svgo-core` (lib test) due to 3 previous errors; 5 warnings emitted
issues/602.txt-warning: variable does not need to be mutable
issues/602.txt-   --> crates/plugin-sdk/src/property_tests.rs:149:13
issues/602.txt-    |
--
issues/602.txt-208 |     fn is_deoptimized(&self, element: &Element) -> bool {
issues/602.txt-    |        ^^^^^^^^^^^^^^
issues/602.txt-
issues/602.txt:warning: `vexy_svgo-plugin-sdk` (test "registry_test") generated 2 warnings
issues/602.txt:    Building [=======================> ] 452/456: vexy_svgo_plugi...
--
docs/plugins.md-
docs/plugins.md-# Vexy SVGO Plugins
docs/plugins.md-
docs/plugins.md:Plugins are the core of `vexy_svgo`'s optimization capabilities, just as they are for `svgo`. They perform specific transformations on the SVG's Abstract Syntax Tree (AST) to reduce file size and improve rendering efficiency. `vexy_svgo` aims to port all of `svgo`'s plugins, maintaining functional parity and API compatibility where it makes sense in a Rust context.
docs/plugins.md-
docs/plugins.md-## Plugin Architecture
docs/plugins.md-
docs/plugins.md:Similar to `svgo`, `vexy_svgo` utilizes a plugin-based architecture. Each plugin is a distinct module responsible for a specific optimization task. This modularity allows for flexible configuration and extensibility.
docs/plugins.md-
docs/plugins.md:In `vexy_svgo`, plugins are implemented as Rust functions or structs that operate on the SVG's AST. The core optimizer iterates through the enabled plugins, applying their transformations sequentially.
docs/plugins.md-
docs/plugins.md-## Default Preset
docs/plugins.md-
docs/plugins.md:`vexy_svgo`, like `svgo`, includes a default preset of plugins that are generally safe and provide good optimization results. This preset is applied by default when no custom plugin configuration is provided. 
docs/plugins.md-
docs/plugins.md-The default preset currently includes most implemented plugins but is more conservative than SVGO's default preset. Vexy SVGO's default preset is being actively aligned with SVGO's. Currently, several complex plugins from SVGO's default preset (mergePaths, moveElemsAttrsToGroup, moveGroupAttrsToElems) are not yet implemented and are excluded from the default configuration.
docs/plugins.md-
--
docs/plugins.md-
docs/plugins.md-### Fully Implemented Plugins (55/53)
docs/plugins.md-
docs/plugins.md:The following `svgo` plugins have been successfully ported to `vexy_svgo`:
docs/plugins.md-
docs/plugins.md-#### Basic Optimization Plugins
docs/plugins.md--   **`cleanupAttrs`**: Cleans up attributes from newlines, trailing, and repeating spaces
--
docs/plugins.md-
docs/plugins.md-## Plugin Configuration
docs/plugins.md-
docs/plugins.md:Configuring plugins in `vexy_svgo` is similar to `svgo`. You can enable or disable plugins, and for some, provide specific parameters to control their behavior. This is done through the `VexySvgoConfig` structure, as shown in the [Usage documentation](./usage.md).
docs/plugins.md-
docs/plugins.md-### Example: Disabling a Plugin
docs/plugins.md-
docs/plugins.md-To disable a plugin from the command line:
docs/plugins.md-
docs/plugins.md-```bash
docs/plugins.md:vexy_svgo input.svg -o output.svg --disable removeComments
docs/plugins.md-```
docs/plugins.md-
docs/plugins.md-Or in Rust code, omit it from your `plugins` list in the `VexySvgoConfig`.
--
docs/plugins.md-### Example: Configuring a Plugin with Parameters
docs/plugins.md-
docs/plugins.md-```rust
docs/plugins.md:use vexy_svgo::config::{VexySvgoConfig, PluginConfig};
docs/plugins.md-use serde_json::json;
docs/plugins.md-
docs/plugins.md-let config = VexySvgoConfig {
--
docs/plugins.md-To see all available plugins with their descriptions:
docs/plugins.md-
docs/plugins.md-```bash
docs/plugins.md:vexy_svgo --show-plugins
docs/plugins.md-```
docs/plugins.md-
docs/plugins.md-This will list all 45 implemented plugins, making it easy to understand what optimizations are available.
--
scripts/dist/build_macos.sh-
scripts/dist/build_macos.sh-PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
scripts/dist/build_macos.sh-DIST_DIR="$PROJECT_ROOT/dist/macos"
scripts/dist/build_macos.sh:BIN_NAME="vexy_svgo"
scripts/dist/build_macos.sh:PKG_ID="com.twardoch.vexy_svgo"
scripts/dist/build_macos.sh-VERSION=$(grep '^version =' "$PROJECT_ROOT/Cargo.toml" | head -1 | cut -d'"' -f2)
scripts/dist/build_macos.sh-
scripts/dist/build_macos.sh-# Clean and prepare directories
--
scripts/dist/build_windows.sh-
scripts/dist/build_windows.sh-PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
scripts/dist/build_windows.sh-DIST_DIR="$PROJECT_ROOT/dist/windows"
scripts/dist/build_windows.sh:BIN_NAME="vexy_svgo.exe"
scripts/dist/build_windows.sh-VERSION=$(grep '^version =' "$PROJECT_ROOT/Cargo.toml" | head -1 | cut -d'"' -f2)
scripts/dist/build_windows.sh-
scripts/dist/build_windows.sh-# Clean and prepare directories
--
scripts/dist/build_windows.sh-# Build release binary for Windows (x86_64)
scripts/dist/build_windows.sh-cd "$PROJECT_ROOT"
scripts/dist/build_windows.sh-cargo build --release --target x86_64-pc-windows-gnu
scripts/dist/build_windows.sh:cp "target/x86_64-pc-windows-gnu/release/vexy_svgo.exe" "$DIST_DIR/"
scripts/dist/build_windows.sh-
scripts/dist/build_windows.sh-# Zip the binary
scripts/dist/build_windows.sh-cd "$DIST_DIR"
scripts/dist/build_windows.sh:ZIP_NAME="vexy_svgo-$VERSION-windows.zip"
scripts/dist/build_windows.sh:zip "$ZIP_NAME" vexy_svgo.exe
scripts/dist/build_windows.sh-
scripts/dist/build_windows.sh-# Output result
scripts/dist/build_windows.sh-ls -lh "$ZIP_NAME"
--
scripts/build-all.sh-
scripts/build-all.sh-# Build CLI for current platform
scripts/build-all.sh-log_info "Building CLI for current platform"
scripts/build-all.sh:if ! cargo build --release --package vexy_svgo-cli; then
scripts/build-all.sh-    log_error "CLI build failed"
scripts/build-all.sh-    exit 1
scripts/build-all.sh-fi
--
scripts/build-all.sh-
scripts/build-all.sh-# Copy CLI binary to dist
scripts/build-all.sh-log_info "Copying CLI binary to dist"
scripts/build-all.sh:cp "$TARGET_DIR/vexy_svgo" "$DIST_DIR/"
scripts/build-all.sh-
scripts/build-all.sh-# Copy WASM modules to dist
scripts/build-all.sh-log_info "Copying WASM modules to dist"
--
issues/603.txt:Read the @llms.txt code snapshot and into `vexify.txt` record all occurrences of all case variants of `vexy_svgo` found in the codebase. 
issues/603.txt-
issues/603.txt:Write a `vexify.py` tool that will generally replace both in the current codebase and in the entire git history the name `vexy_svgo` with `vexy svgo` but in a smart way: 
issues/603.txt-
issues/603.txt:- In filenames, it should replace `vexy_svgo` with `vexy_svgo`
issues/603.txt:- In code, it should replace `vexy_svgo` with `vexy_svgo` when it is used as a variable or function name, not in comments or strings.
issues/603.txt-- In documentation, comments and UI strings (like in HTML) it should replace the all-uppercase `Vexy SVGO` with `Vexy SVGO`.
issues/603.txt:- It should report all changes made, including filenames, code changes, and documentation updates, and then report the places where `vexy_svgo` still occurs.
issues/603.txt-
issues/603.txt-Make it Fire CLI. If `--deep` is given, it should also rewrite the git history. Without `--deep`, it should only modify the current state of the codebase.
--
test/comparative/README.md-└── 20240115_143022_mytest/         # Single comparison
test/comparative/README.md-    ├── original.svg
test/comparative/README.md-    ├── svgo.svg
test/comparative/README.md:    ├── vexy_svgo.svg
test/comparative/README.md-    └── report.txt
test/comparative/README.md-```
test/comparative/README.md-
--
test/comparative/README.md-### Environment Variables
test/comparative/README.md-
test/comparative/README.md-- `SVGO_CMD` - Path to SVGO binary (default: `npx svgo`)
test/comparative/README.md:- `Vexy SVGO_CMD` - Path to Vexy SVGO binary (default: `target/release/vexy_svgo`)
test/comparative/README.md:- `TEMP_DIR` - Temporary directory for comparisons (default: `/tmp/vexy_svgo_comparison`)
test/comparative/README.md-
test/comparative/README.md-### Test Data Organization
test/comparative/README.md-
--
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-```json
docs/plugin-marketplace.md-{
docs/plugin-marketplace.md:  "name": "vexy_svgo-plugin-accessibility",
docs/plugin-marketplace.md-  "version": "1.2.0",
docs/plugin-marketplace.md-  "description": "Adds accessibility attributes to SVG elements",
docs/plugin-marketplace.md-  "author": {
--
docs/plugin-marketplace.md-    "github": "johndoe"
docs/plugin-marketplace.md-  },
docs/plugin-marketplace.md-  "license": "MIT",
docs/plugin-marketplace.md:  "homepage": "https://github.com/johndoe/vexy_svgo-plugin-accessibility",
docs/plugin-marketplace.md-  "repository": {
docs/plugin-marketplace.md-    "type": "git",
docs/plugin-marketplace.md:    "url": "https://github.com/johndoe/vexy_svgo-plugin-accessibility.git"
docs/plugin-marketplace.md-  },
docs/plugin-marketplace.md-  "keywords": ["accessibility", "a11y", "aria", "optimization"],
docs/plugin-marketplace.md-  "categories": ["accessibility", "enhancement"],
docs/plugin-marketplace.md:  "vexy_svgo_version": ">=2.0.0",
docs/plugin-marketplace.md-  "dependencies": {
docs/plugin-marketplace.md-    "regex": "1.0",
docs/plugin-marketplace.md-    "serde": "1.0"
--
docs/plugin-marketplace.md-│   └── basic_usage.rs
docs/plugin-marketplace.md-├── tests/                  # Test files
docs/plugin-marketplace.md-│   └── integration_tests.rs
docs/plugin-marketplace.md:├── .vexy_svgo-plugin.toml       # Plugin metadata
docs/plugin-marketplace.md-└── .signature              # Digital signature
docs/plugin-marketplace.md-```
docs/plugin-marketplace.md-
--
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-```bash
docs/plugin-marketplace.md-# Search for plugins
docs/plugin-marketplace.md:vexy_svgo plugin search "accessibility"
docs/plugin-marketplace.md:vexy_svgo plugin search --tag "optimization"
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-# Get plugin information
docs/plugin-marketplace.md:vexy_svgo plugin info vexy_svgo-plugin-accessibility
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-# Install plugins
docs/plugin-marketplace.md:vexy_svgo plugin install vexy_svgo-plugin-accessibility
docs/plugin-marketplace.md:vexy_svgo plugin install vexy_svgo-plugin-accessibility@1.2.0
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-# List installed plugins
docs/plugin-marketplace.md:vexy_svgo plugin list
docs/plugin-marketplace.md:vexy_svgo plugin list --outdated
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-# Update plugins
docs/plugin-marketplace.md:vexy_svgo plugin update vexy_svgo-plugin-accessibility
docs/plugin-marketplace.md:vexy_svgo plugin update --all
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-# Remove plugins
docs/plugin-marketplace.md:vexy_svgo plugin remove vexy_svgo-plugin-accessibility
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-# Plugin management
docs/plugin-marketplace.md:vexy_svgo plugin enable vexy_svgo-plugin-accessibility
docs/plugin-marketplace.md:vexy_svgo plugin disable vexy_svgo-plugin-accessibility
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-# Publishing (for plugin authors)
docs/plugin-marketplace.md:vexy_svgo plugin publish
docs/plugin-marketplace.md:vexy_svgo plugin publish --dry-run
docs/plugin-marketplace.md:vexy_svgo plugin login --token <api-token>
docs/plugin-marketplace.md-```
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-### Configuration
--
docs/plugin-marketplace.md-Plugins are managed through the Vexy SVGO configuration system:
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-```yaml
docs/plugin-marketplace.md:# ~/.vexy_svgo/config.yml
docs/plugin-marketplace.md-plugins:
docs/plugin-marketplace.md:  registry: "https://plugins.vexy_svgo.org"
docs/plugin-marketplace.md-  auto_update: false
docs/plugin-marketplace.md-  trust_level: "verified_only"  # all, verified_only, signed_only
docs/plugin-marketplace.md-  
docs/plugin-marketplace.md-installed_plugins:
docs/plugin-marketplace.md:  - name: "vexy_svgo-plugin-accessibility"
docs/plugin-marketplace.md-    version: "1.2.0"
docs/plugin-marketplace.md-    enabled: true
docs/plugin-marketplace.md-    config:
--
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-### Plugin Discovery Page
docs/plugin-marketplace.md-
docs/plugin-marketplace.md:**URL**: `https://plugins.vexy_svgo.org`
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-**Features**:
docs/plugin-marketplace.md-- Search and filter plugins by name, tags, categories
--
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-### Plugin Detail Page
docs/plugin-marketplace.md-
docs/plugin-marketplace.md:**URL**: `https://plugins.vexy_svgo.org/plugins/{name}`
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-**Content**:
docs/plugin-marketplace.md-- Plugin description and documentation
--
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-### User Dashboard
docs/plugin-marketplace.md-
docs/plugin-marketplace.md:**URL**: `https://plugins.vexy_svgo.org/dashboard`
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-**Features**:
docs/plugin-marketplace.md-- Manage published plugins
--
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-### Admin Interface
docs/plugin-marketplace.md-
docs/plugin-marketplace.md:**URL**: `https://plugins.vexy_svgo.org/admin`
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-**Features**:
docs/plugin-marketplace.md-- Plugin approval workflow
--
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-### 1. Centralized Registry (Primary)
docs/plugin-marketplace.md-
docs/plugin-marketplace.md:- Official Vexy SVGO plugin registry at `plugins.vexy_svgo.org`
docs/plugin-marketplace.md-- Curated and security-scanned plugins
docs/plugin-marketplace.md-- Built-in CLI integration
docs/plugin-marketplace.md-- Web interface for discovery
--
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-```bash
docs/plugin-marketplace.md-# Install directly from Git
docs/plugin-marketplace.md:vexy_svgo plugin install git+https://github.com/user/vexy_svgo-plugin-name
docs/plugin-marketplace.md:vexy_svgo plugin install git+https://github.com/user/vexy_svgo-plugin-name@v1.0.0
docs/plugin-marketplace.md-```
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-### 3. Local Packages
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-```bash
docs/plugin-marketplace.md-# Install from local directory
docs/plugin-marketplace.md:vexy_svgo plugin install ./path/to/plugin
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-# Install from archive
docs/plugin-marketplace.md:vexy_svgo plugin install plugin-package.tar.gz
docs/plugin-marketplace.md-```
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-### 4. Alternative Registries
--
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-```bash
docs/plugin-marketplace.md-# Add custom registry
docs/plugin-marketplace.md:vexy_svgo plugin registry add corporate https://plugins.corp.internal
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-# Install from specific registry
docs/plugin-marketplace.md:vexy_svgo plugin install --registry corporate vexy_svgo-plugin-internal
docs/plugin-marketplace.md-```
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-## Implementation Roadmap
--
docs/plugin-marketplace.md-- [ ] **Admin Interface**: Basic moderation and management tools
docs/plugin-marketplace.md-
docs/plugin-marketplace.md-**Deliverables**:
docs/plugin-marketplace.md:- Public web interface at plugins.vexy_svgo.org
docs/plugin-marketplace.md-- User registration and authentication
docs/plugin-marketplace.md-- Plugin submission workflow
docs/plugin-marketplace.md-- Search and discovery features
--
examples/wasm-enhanced-demo.html-      </div>
examples/wasm-enhanced-demo.html-      <div class="navbar-end">
examples/wasm-enhanced-demo.html-        <a
examples/wasm-enhanced-demo.html:          href="https://github.com/twardoch/vexy_svgo"
examples/wasm-enhanced-demo.html-          target="_blank"
examples/wasm-enhanced-demo.html-          class="btn btn-ghost"
examples/wasm-enhanced-demo.html-          >GitHub</a
--
docs/assets/js/theme.js-
docs/assets/js/theme.js-class ThemeManager {
docs/assets/js/theme.js-  constructor() {
docs/assets/js/theme.js:    this.STORAGE_KEY = 'vexy_svgo-theme';
docs/assets/js/theme.js-    this.THEMES = {
docs/assets/js/theme.js-      LIGHT: 'light',
docs/assets/js/theme.js-      DARK: 'dark',
--
docs/index.md-
docs/index.md-## 1. Introduction
docs/index.md-
docs/index.md:`vexy_svgo` is a high-performance, native Rust port of `svgo` (SVG Optimizer), the popular Node.js-based tool for optimizing SVG vector graphics files. While `svgo` has been instrumental in reducing SVG file sizes by removing redundant information, minifying code, and applying various optimizations, `vexy_svgo` aims to bring these benefits to a new level with the power and efficiency of Rust.
docs/index.md-
docs/index.md:This documentation serves as a comprehensive guide to `vexy_svgo`, detailing its structure, API, and plugin system. Throughout these pages, we will draw parallels and highlight key differences with the original JavaScript `svgo` reference implementation, providing context for developers familiar with `svgo` and a clear understanding for newcomers.
docs/index.md-
docs/index.md-### 1.1. Current Status
docs/index.md-
--
docs/index.md-  <p class="mb-6 text-base-content/70">High-performance SVG optimization at your fingertips</p>
docs/index.md-  
docs/index.md-  <div class="flex flex-wrap justify-center gap-4 mb-6">
docs/index.md:    <a href="https://github.com/twardoch/vexy_svgo/releases/latest" class="btn btn-primary" target="_blank" rel="noopener noreferrer">
docs/index.md-      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
docs/index.md-        <path d="M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z"/>
docs/index.md-      </svg>
docs/index.md-      Download Latest Release
docs/index.md-    </a>
docs/index.md:    <a href="https://github.com/twardoch/vexy_svgo" class="btn btn-outline" target="_blank" rel="noopener noreferrer">
docs/index.md-      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
docs/index.md-        <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
docs/index.md-      </svg>
--
docs/index.md-
docs/index.md-## 3. Why Vexy SVGO?
docs/index.md-
docs/index.md:The primary motivations behind developing `vexy_svgo` are rooted in the desire for superior performance, broader integration capabilities, and enhanced reliability for SVG optimization tasks.
docs/index.md-
docs/index.md:-   **Unmatched Performance**: Leveraging Rust's focus on zero-cost abstractions, memory safety, and efficient concurrency, `vexy_svgo` processes SVG files significantly faster than its JavaScript counterpart. This makes it an ideal choice for:
docs/index.md-    *   **Large-scale batch processing**: Optimizing thousands of SVG assets in build pipelines.
docs/index.md-    *   **Real-time applications**: Where low latency SVG manipulation is critical.
docs/index.md-    *   **Server-side rendering**: Reducing payload sizes and improving page load times.
docs/index.md:-   **Seamless Native Integration**: As a native Rust library, `vexy_svgo` can be effortlessly integrated into a wide array of applications without the overhead of a Node.js runtime. This includes:
docs/index.md-    *   **Desktop applications**: Building performant SVG tools.
docs/index.md-    *   **Command-line interfaces (CLIs)**: Creating fast and efficient SVG optimization scripts.
docs/index.md-    *   **Backend services**: Optimizing SVGs directly within Rust-based web servers or microservices.
docs/index.md-    *   **Embedded systems**: Where resource constraints demand highly optimized code.
docs/index.md:-   **WebAssembly (WASM) Compatibility**: `vexy_svgo` is meticulously designed with WebAssembly compilation in mind. This enables high-performance SVG optimization directly within web browsers, edge computing environments, or other WASM-compatible runtimes, unlocking new possibilities for client-side SVG processing.
docs/index.md:-   **API Compatibility with `svgo`**: `vexy_svgo` strives for a high degree of API compatibility with `svgo` v4.0.0. This design choice significantly eases the transition for developers already familiar with `svgo`, allowing them to leverage their existing knowledge and configurations with minimal adjustments. Our goal is to ensure that if you know `svgo`, you'll feel right at home with `vexy_svgo`.
docs/index.md-
docs/index.md-## 4. Key Features
docs/index.md-
docs/index.md:`vexy_svgo` offers a robust set of features designed to provide comprehensive SVG optimization:
docs/index.md-
docs/index.md--   **Plugin-based Architecture**: A flexible and extensible system where individual optimization rules are encapsulated as plugins, allowing for fine-grained control over the optimization process.
docs/index.md--   **AST-based Transformations**: Utilizes an Abstract Syntax Tree (AST) for SVG manipulation, ensuring precise and reliable transformations.
docs/index.md--   **Comprehensive Optimization Plugins**: 50 production-ready plugins covering essential SVG optimizations.
docs/index.md--   **Enhanced CLI Tool**: Full SVGO CLI compatibility plus additional features like string input, better STDIN/STDOUT handling, and precision control.
docs/index.md--   **Rust Library**: A powerful and efficient Rust library for programmatic integration into your projects.
docs/index.md:-   **WebAssembly (WASM) Compatibility**: `vexy_svgo` is meticulously designed with WebAssembly compilation in mind. This enables high-performance SVG optimization directly within web browsers, edge computing environments, or other WASM-compatible runtimes, unlocking new possibilities for client-side SVG processing. *(Details on WASM usage will be added as the WASM compilation target matures.)*
docs/index.md--   **Superior Performance**: **12x faster than SVGO** on npx, 7x faster on bunx for common optimization tasks.
docs/index.md:-   **Benchmarking Tool**: A comprehensive benchmarking tool is available to compare `vexy_svgo`'s performance against `svgo`, generating Jekyll-compatible reports.
docs/index.md-
docs/index.md-## 5. Project Structure
docs/index.md-
docs/index.md:The `vexy_svgo` repository is organized to reflect its native Rust implementation while maintaining a clear reference to the original `svgo` structure for architectural guidance and functional parity testing:
docs/index.md-
docs/index.md:-   **/vexy_svgo**: Contains the core Rust library and the `vexy_svgo` CLI application. This is where the primary Rust source code resides.
docs/index.md:-   **/src**: Within the `vexy_svgo` directory, this folder holds the Rust source code for `vexy_svgo`'s core components, including the parser, optimizer, stringifier, and individual plugin implementations.
docs/index.md--   **/ref/svgo**: This directory contains the complete `svgo` v4.0.0 JavaScript reference implementation. It serves as a crucial benchmark for functional parity testing and provides architectural insights during the porting process.
docs/index.md--   **/docs**: This folder contains the project's documentation, which you are currently reading.
docs/index.md:-   **/tests**: Comprehensive test suites for `vexy_svgo`, including integration and unit tests. Many of these tests are designed to mirror `svgo`'s test cases, ensuring that `vexy_svgo` produces identical optimization results.
docs/index.md-
docs/index.md-## 6. Installation
docs/index.md-
docs/index.md:To get started with `vexy_svgo`, you'll need to have Rust and Cargo (Rust's package manager) installed on your system. If you don't have them, you can install them conveniently via `rustup`, the recommended Rust toolchain installer:
docs/index.md-
docs/index.md-```bash
docs/index.md-curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
docs/index.md-```
docs/index.md-
docs/index.md:Follow the on-screen instructions to complete the `rustup` installation. Once Rust and Cargo are set up, you have two primary ways to use `vexy_svgo`:
docs/index.md-
docs/index.md-### 6.1. As a Command-Line Tool
docs/index.md-
docs/index.md-#### 6.1.1. From Crates.io (when published)
docs/index.md-
docs/index.md:You can install `vexy_svgo` as a global command-line tool:
docs/index.md-
docs/index.md-```bash
docs/index.md:cargo install vexy_svgo
docs/index.md-```
docs/index.md-
docs/index.md-#### 6.1.2. From Source
--
docs/index.md-To build from the latest source:
docs/index.md-
docs/index.md-```bash
docs/index.md:git clone https://github.com/twardoch/vexy_svgo.git
docs/index.md:cd vexy_svgo
docs/index.md-cargo build --release
docs/index.md:# The binary will be at ./target/release/vexy_svgo
docs/index.md-```
docs/index.md-
docs/index.md:Once installed, `vexy_svgo` can be used as a drop-in replacement for the `svgo` CLI with enhanced features.
docs/index.md-
docs/index.md-### 6.2. As a Rust Library
docs/index.md-
docs/index.md:To integrate `vexy_svgo` directly into your Rust project as a dependency, add it to your `Cargo.toml` file:
docs/index.md-
docs/index.md-```toml
docs/index.md-[dependencies]
docs/index.md:vexy_svgo = { git = "https://github.com/twardoch/vexy_svgo.git" }
docs/index.md-# Or when published to crates.io:
docs/index.md:# vexy_svgo = "0.1.0"
docs/index.md-```
docs/index.md-
docs/index.md-After adding the dependency, you can use the `optimize` function:
docs/index.md-
docs/index.md-```rust
docs/index.md:use vexy_svgo::{optimize, config::Config};
docs/index.md-
docs/index.md-let svg = "<svg>...</svg>";
docs/index.md-let config = Config::default();
--
docs/wasm-demo.html-          <li><a href="#features">Features</a></li>
docs/wasm-demo.html-          <li><a href="#demo">Demo</a></li>
docs/wasm-demo.html-          <li>
docs/wasm-demo.html:            <a href="https://github.com/twardoch/vexy_svgo" target="_blank"
docs/wasm-demo.html-              >GitHub</a
docs/wasm-demo.html-            >
docs/wasm-demo.html-          </li>
--
docs/wasm-demo.html-    </footer>
docs/wasm-demo.html-
docs/wasm-demo.html-    <script type="module">
docs/wasm-demo.html:      let vexy_svgo = null;
docs/wasm-demo.html-      let wasmModule = null;
docs/wasm-demo.html-
docs/wasm-demo.html-      // Theme handling
--
docs/wasm-demo.html-      // Initialize WASM
docs/wasm-demo.html-      async function initWasm() {
docs/wasm-demo.html-        try {
docs/wasm-demo.html:          const wasmResponse = await fetch('./vexy_svgo_wasm_bg.wasm');
docs/wasm-demo.html-          const wasmBytes = await wasmResponse.arrayBuffer();
docs/wasm-demo.html-
docs/wasm-demo.html-          // Basic WASM instantiation
--
docs/wasm-demo.html-          }
docs/wasm-demo.html-
docs/wasm-demo.html-          // Create wrapper API
docs/wasm-demo.html:          vexy_svgo = {
docs/wasm-demo.html-            optimize: (svg, config = {}) => {
docs/wasm-demo.html-              const svgPtr = allocString(svg);
docs/wasm-demo.html-              const configPtr = allocString(JSON.stringify(config));
--
docs/wasm-demo.html-          // Show success
docs/wasm-demo.html-          document.getElementById('loadingStatus').innerHTML = `
docs/wasm-demo.html-                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
docs/wasm-demo.html:                    <span>Vexy SVGO WebAssembly loaded successfully! Version: ${vexy_svgo.version()}</span>
docs/wasm-demo.html-                `;
docs/wasm-demo.html-          document.getElementById('loadingStatus').className =
docs/wasm-demo.html-            'alert alert-success';
--
docs/wasm-demo.html-
docs/wasm-demo.html-          // Measure time
docs/wasm-demo.html-          const startTime = performance.now();
docs/wasm-demo.html:          const result = vexy_svgo.optimize(input, config);
docs/wasm-demo.html-          const duration = performance.now() - startTime;
docs/wasm-demo.html-
docs/wasm-demo.html-          // Display results
--
examples/wasm-browser.html-    </div>
examples/wasm-browser.html-
examples/wasm-browser.html-    <script type="module">
examples/wasm-browser.html:      let vexy_svgo;
examples/wasm-browser.html-
examples/wasm-browser.html-      // Load Vexy SVGO WASM module
examples/wasm-browser.html-      async function loadVEXYSVGO() {
examples/wasm-browser.html-        try {
examples/wasm-browser.html-          // Import the WASM module
examples/wasm-browser.html:          const module = await import('./pkg-web/vexy_svgo_wasm.js');
examples/wasm-browser.html-          await module.default();
examples/wasm-browser.html:          vexy_svgo = module;
examples/wasm-browser.html-
examples/wasm-browser.html-          // Hide loading, show app
examples/wasm-browser.html-          document.getElementById('loading').style.display = 'none';
--
examples/wasm-browser.html-
examples/wasm-browser.html-        try {
examples/wasm-browser.html-          // Create configuration
examples/wasm-browser.html:          const config = new vexy_svgo.JsConfig();
examples/wasm-browser.html-          config.multipass = document.getElementById('multipass').checked;
examples/wasm-browser.html-          config.pretty = document.getElementById('pretty').checked;
examples/wasm-browser.html-          config.indent =
--
examples/wasm-browser.html-
examples/wasm-browser.html-          // Optimize
examples/wasm-browser.html-          const startTime = performance.now();
examples/wasm-browser.html:          const result = vexy_svgo.optimize(input, config);
examples/wasm-browser.html-          const duration = performance.now() - startTime;
examples/wasm-browser.html-
examples/wasm-browser.html-          // Display results
--
issues/610.txt:Read the @llms.txt codebase snapshot. Note: recently we have renamed the project from `SVGN` to `Vexy SVGO`. We have search-replaced many strings like `vexy_svgo` to `vexy_svgo`, but mistakes may have been made. Please review all files, check if the changes have been performed consistently. Run build scripts. Then into @PLAN.md write a detailed plan to improve and fix the code, and then into @TODO.md write a linearized version of that. Then /work on it. 
--
scripts/package-release.sh-        ;;
scripts/package-release.sh-esac
scripts/package-release.sh-
scripts/package-release.sh:BINARY_NAME="vexy_svgo-$VERSION-$PLATFORM_NAME-$ARCH_NAME"
scripts/package-release.sh-
scripts/package-release.sh-# Package CLI binary
scripts/package-release.sh-log_info "Packaging CLI binary"
scripts/package-release.sh:if [ -f "$DIST_DIR/vexy_svgo" ]; then
scripts/package-release.sh-    mkdir -p "$RELEASE_DIR/$BINARY_NAME"
scripts/package-release.sh:    cp "$DIST_DIR/vexy_svgo" "$RELEASE_DIR/$BINARY_NAME/"
scripts/package-release.sh-    cp README.md "$RELEASE_DIR/$BINARY_NAME/"
scripts/package-release.sh-    cp LICENSE "$RELEASE_DIR/$BINARY_NAME/"
scripts/package-release.sh-    cp RELEASE_CANDIDATE.md "$RELEASE_DIR/$BINARY_NAME/"
--
scripts/package-release.sh-# Package WASM modules
scripts/package-release.sh-log_info "Packaging WebAssembly modules"
scripts/package-release.sh-if [ -d "$DIST_DIR/wasm" ]; then
scripts/package-release.sh:    WASM_NAME="vexy_svgo-wasm-$VERSION"
scripts/package-release.sh-    mkdir -p "$RELEASE_DIR/$WASM_NAME"
scripts/package-release.sh-    cp -r "$DIST_DIR/wasm/"* "$RELEASE_DIR/$WASM_NAME/"
scripts/package-release.sh-    cp README.md "$RELEASE_DIR/$WASM_NAME/"
--
scripts/package-release.sh-- **$BINARY_NAME.tar.gz.sha256** - SHA256 checksum
scripts/package-release.sh-
scripts/package-release.sh-### WebAssembly Modules  
scripts/package-release.sh:- **vexy_svgo-wasm-$VERSION.tar.gz** - WebAssembly modules for browser and Node.js
scripts/package-release.sh:- **vexy_svgo-wasm-$VERSION.tar.gz.sha256** - SHA256 checksum
scripts/package-release.sh-
scripts/package-release.sh-## Installation
scripts/package-release.sh-
scripts/package-release.sh-### CLI Binary
scripts/package-release.sh-\`\`\`bash
scripts/package-release.sh-# Download and extract
scripts/package-release.sh:wget https://github.com/twardoch/vexy_svgo/releases/download/v$VERSION/$BINARY_NAME.tar.gz
scripts/package-release.sh-tar -xzf $BINARY_NAME.tar.gz
scripts/package-release.sh-cd $BINARY_NAME
scripts/package-release.sh-
scripts/package-release.sh-# Install to PATH
scripts/package-release.sh:sudo cp vexy_svgo /usr/local/bin/
scripts/package-release.sh-\`\`\`
scripts/package-release.sh-
scripts/package-release.sh-### WebAssembly
scripts/package-release.sh-\`\`\`bash
scripts/package-release.sh-# Download and extract
scripts/package-release.sh:wget https://github.com/twardoch/vexy_svgo/releases/download/v$VERSION/vexy_svgo-wasm-$VERSION.tar.gz
scripts/package-release.sh:tar -xzf vexy_svgo-wasm-$VERSION.tar.gz
scripts/package-release.sh-\`\`\`
scripts/package-release.sh-
scripts/package-release.sh-## Verification
scripts/package-release.sh-Verify the integrity of downloaded files:
scripts/package-release.sh-\`\`\`bash
scripts/package-release.sh-sha256sum -c $BINARY_NAME.tar.gz.sha256
scripts/package-release.sh:sha256sum -c vexy_svgo-wasm-$VERSION.tar.gz.sha256
scripts/package-release.sh-\`\`\`
scripts/package-release.sh-
scripts/package-release.sh-## What's New
scripts/package-release.sh-See [RELEASE_CANDIDATE.md](RELEASE_CANDIDATE.md) for comprehensive release notes.
scripts/package-release.sh-
scripts/package-release.sh-## Support
scripts/package-release.sh:- **Documentation**: https://twardoch.github.io/vexy_svgo/
scripts/package-release.sh:- **Issues**: https://github.com/twardoch/vexy_svgo/issues
scripts/package-release.sh:- **Discussions**: https://github.com/twardoch/vexy_svgo/discussions
scripts/package-release.sh-EOF
scripts/package-release.sh-
scripts/package-release.sh-log_success "Release packaging completed!"
--
docs/comparison.md-
docs/comparison.md-# Vexy SVGO vs. SVGO: A Comparison
docs/comparison.md-
docs/comparison.md:`vexy_svgo` is a native Rust port of `svgo`, the popular JavaScript-based SVG optimizer. While `vexy_svgo` aims for functional parity and API compatibility with `svgo`, there are fundamental differences stemming from their underlying technologies (Rust vs. JavaScript) that impact performance, deployment, and ecosystem integration.
docs/comparison.md-
docs/comparison.md-## Key Differences
docs/comparison.md-
--
docs/comparison.md-
docs/comparison.md-## Functional Parity
docs/comparison.md-
docs/comparison.md:`vexy_svgo` has achieved substantial functional parity with `svgo` v4.0.0:
docs/comparison.md-
docs/comparison.md--   **Plugin Coverage**: 46 out of 53 plugins (87%) have been successfully ported, including all commonly used optimization plugins.
docs/comparison.md:-   **CLI Compatibility**: Full command-line compatibility achieved - `vexy_svgo` can be used as a drop-in replacement for `svgo` CLI.
docs/comparison.md--   **Test Coverage**: 359 tests passing (100% success rate), including SVGO compatibility tests achieving 93.75% parity.
docs/comparison.md:-   **Configuration Mapping**: `vexy_svgo`'s configuration structure (`VexySvgoConfig`) directly maps to `svgo`'s configuration object.
docs/comparison.md-
docs/comparison.md-### Current Implementation Status
docs/comparison.md-
--
docs/comparison.md-
docs/comparison.md-## When to Choose Vexy SVGO?
docs/comparison.md-
docs/comparison.md:Consider using `vexy_svgo` if:
docs/comparison.md-
docs/comparison.md--   You require maximum performance for SVG optimization, especially for large batches of files or in performance-critical environments.
docs/comparison.md--   You are working within a Rust ecosystem and prefer a native solution without Node.js dependencies.
--
docs/comparison.md-
docs/comparison.md--   You are already heavily invested in the Node.js/JavaScript ecosystem.
docs/comparison.md--   Your performance requirements are met by `svgo`'s current capabilities.
docs/comparison.md:-   You require one of the 3 plugins not yet implemented in `vexy_svgo`.
docs/comparison.md--   You need immediate access to the latest `svgo` features and plugins as they are released.
docs/comparison.md--   You prefer the flexibility and rapid development cycles often associated with JavaScript.
docs/comparison.md-
docs/comparison.md:Ultimately, the choice between `vexy_svgo` and `svgo` depends on your specific project requirements, performance needs, and technology stack preferences.
--
scripts/README-benchmarks.md-## Available Scripts
scripts/README-benchmarks.md-
scripts/README-benchmarks.md-### 1. `benchmark1.sh` (Legacy)
scripts/README-benchmarks.md:Basic benchmarking script comparing `bunx --bun svgo` vs `./target/release/vexy_svgo`.
scripts/README-benchmarks.md-
scripts/README-benchmarks.md-**Usage:**
scripts/README-benchmarks.md-```bash
--
scripts/README-benchmarks.md-1. **`$HOME/.bun/bin/bun --bun $(which svgo)`** - Bun runtime with locally installed SVGO (reference)
scripts/README-benchmarks.md-2. **`bunx --bun svgo`** - Bun package runner
scripts/README-benchmarks.md-3. **`npx svgo`** - Node.js package runner  
scripts/README-benchmarks.md:4. **`./target/release/vexy_svgo`** - Our Rust implementation
scripts/README-benchmarks.md-
scripts/README-benchmarks.md-## Metrics Collected
scripts/README-benchmarks.md-
--
scripts/README-benchmarks.md-```csv
scripts/README-benchmarks.md-Tool,Total_Time_Avg,Per_File_Avg,Successful_Files,Failed_Files,Memory_KB_Avg,Original_Size_Total,Optimized_Size_Total,Compression_Ratio
scripts/README-benchmarks.md-svgo_bun_home,2.456,0.0491,147,3,45672,1048576,574259,45.2
scripts/README-benchmarks.md:vexy_svgo,0.892,0.0178,149,1,12845,1048576,555894,47.0
scripts/README-benchmarks.md-```
scripts/README-benchmarks.md-
scripts/README-benchmarks.md-### JSON Output
--
scripts/README-benchmarks.md-# Check if tools are installed and accessible
scripts/README-benchmarks.md-which svgo
scripts/README-benchmarks.md-which bunx
scripts/README-benchmarks.md:ls -la ./target/release/vexy_svgo
scripts/README-benchmarks.md-```
scripts/README-benchmarks.md-
scripts/README-benchmarks.md-**Permission Errors:**
scripts/README-benchmarks.md-```bash
scripts/README-benchmarks.md-# Make scripts executable
scripts/README-benchmarks.md-chmod +x ./scripts/benchmark-comprehensive.sh
scripts/README-benchmarks.md:chmod +x ./target/release/vexy_svgo
scripts/README-benchmarks.md-```
scripts/README-benchmarks.md-
scripts/README-benchmarks.md-**Memory Monitoring Disabled:**
--
test/fixture_tests.rs-//! Tests that load and process SVGO-style test fixtures
test/fixture_tests.rs-//! This matches the pattern used in SVGO's test suite
test/fixture_tests.rs-
test/fixture_tests.rs:use vexy_svgo::config::Js2SvgOptions;
test/fixture_tests.rs:use vexy_svgo::{optimize, Config, OptimizeOptions, PluginConfig};
test/fixture_tests.rs-
test/fixture_tests.rs-/// Parse a test fixture file in SVGO format:
test/fixture_tests.rs-/// ```
--
test/plugins/add_attributes_to_svg_element.rs-//! Tests for the addAttributesToSVGElement plugin
test/plugins/add_attributes_to_svg_element.rs-//! Auto-generated from SVGO test fixtures
test/plugins/add_attributes_to_svg_element.rs-
test/plugins/add_attributes_to_svg_element.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/add_attributes_to_svg_element.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/add_attributes_to_svg_element.rs-use serde_json::json;
test/plugins/add_attributes_to_svg_element.rs-
test/plugins/add_attributes_to_svg_element.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
scripts/dist/build_linux.sh-
scripts/dist/build_linux.sh-PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
scripts/dist/build_linux.sh-DIST_DIR="$PROJECT_ROOT/dist/linux"
scripts/dist/build_linux.sh:BIN_NAME="vexy_svgo"
scripts/dist/build_linux.sh-VERSION=$(grep '^version =' "$PROJECT_ROOT/Cargo.toml" | head -1 | cut -d'"' -f2)
scripts/dist/build_linux.sh-
scripts/dist/build_linux.sh-# Clean and prepare directories
--
scripts/dist/build_linux.sh-
scripts/dist/build_linux.sh-# Tar and gzip the binary
scripts/dist/build_linux.sh-cd "$DIST_DIR"
scripts/dist/build_linux.sh:TAR_NAME="vexy_svgo-$VERSION-linux.tar.gz"
scripts/dist/build_linux.sh-tar -czvf "$TAR_NAME" "$BIN_NAME"
scripts/dist/build_linux.sh-
scripts/dist/build_linux.sh-# Output result
--
issues/611.txt:Read @grep.txt (the result of running `rg -C 3 "vexy" > grep.txt`) to see a list of occurrences of the phrase `vexy`. Our project is called "Vexy SVGO". Review where we should use `Vexy SVGO` and were `VEXYSVGO` and where `vexy_svgo` and where `vexy-svgo` etc. Then into @TODO.md write a VERY DETAILED plan that will discuss in which occurrences we should keep the current spelling, and in which occurrences we need to change it and how. 
--
scripts/scripts.md-# Build Scripts
scripts/scripts.md-
scripts/scripts.md:This directory contains platform-specific build scripts for creating distribution packages of vexy_svgo.
scripts/scripts.md-
scripts/scripts.md-## Scripts
scripts/scripts.md-
scripts/scripts.md-### `build_macos.sh`
scripts/scripts.md:Builds vexy_svgo for macOS, creating:
scripts/scripts.md-- Universal binary (x86_64 + arm64)
scripts/scripts.md-- `.tar.gz` archive
scripts/scripts.md-- `.pkg` installer (installs to `/usr/local/bin`)
--
scripts/scripts.md-- Install script
scripts/scripts.md-
scripts/scripts.md-### `build_linux.sh`
scripts/scripts.md:Builds vexy_svgo for Linux, creating:
scripts/scripts.md-- Native binary for the current architecture
scripts/scripts.md-- `.tar.gz` archive
scripts/scripts.md-- `.deb` package (if dpkg is available)
--
scripts/scripts.md-- Install script
scripts/scripts.md-
scripts/scripts.md-### `build_windows.cmd`
scripts/scripts.md:Builds vexy_svgo for Windows, creating:
scripts/scripts.md-- `.exe` executable
scripts/scripts.md-- `.zip` archive
scripts/scripts.md-- `.msi` installer (if WiX Toolset is available)
--
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Basic optimization with default settings
examples/cli-usage.md:vexy_svgo input.svg -o output.svg
examples/cli-usage.md-
examples/cli-usage.md-# Using stdin/stdout
examples/cli-usage.md:cat input.svg | vexy_svgo > output.svg
examples/cli-usage.md-
examples/cli-usage.md-# Optimize in place (overwrites the original)
examples/cli-usage.md:vexy_svgo input.svg
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-### Optimize multiple files
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Optimize multiple files
examples/cli-usage.md:vexy_svgo file1.svg file2.svg file3.svg
examples/cli-usage.md-
examples/cli-usage.md-# With custom output names
examples/cli-usage.md:vexy_svgo input1.svg -o output1.svg input2.svg -o output2.svg
examples/cli-usage.md-
examples/cli-usage.md-# Using glob patterns (handled by shell)
examples/cli-usage.md:vexy_svgo *.svg
examples/cli-usage.md-
examples/cli-usage.md-# Optimize all SVG files in a directory
examples/cli-usage.md:vexy_svgo -f ./images/
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-## Configuration Options
--
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Pretty print with indentation
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --pretty
examples/cli-usage.md-
examples/cli-usage.md-# Custom indentation (4 spaces)
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --pretty --indent 4
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-### Multipass optimization
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Run optimization passes until no more improvements
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --multipass
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-### Precision control
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Set decimal precision for numbers (default: 3)
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --precision 2
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-## Plugin Management
--
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Disable removeComments plugin
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --disable removeComments
examples/cli-usage.md-
examples/cli-usage.md-# Disable multiple plugins
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --disable removeComments,removeEmptyAttrs
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-### Enable only specific plugins
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Use only specific plugins
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --enable removeComments,collapseGroups
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-### Configure plugin parameters
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Configure convertColors plugin
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --config '{"plugins":[{"name":"convertColors","params":{"currentColor":true}}]}'
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-## Using Configuration Files
examples/cli-usage.md-
examples/cli-usage.md-### YAML configuration
examples/cli-usage.md-
examples/cli-usage.md:Create `vexy_svgo.config.yml`:
examples/cli-usage.md-```yaml
examples/cli-usage.md-multipass: true
examples/cli-usage.md-js2svg:
--
examples/cli-usage.md-
examples/cli-usage.md-Use it:
examples/cli-usage.md-```bash
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --config vexy_svgo.config.yml
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-### JSON configuration
examples/cli-usage.md-
examples/cli-usage.md:Create `vexy_svgo.config.json`:
examples/cli-usage.md-```json
examples/cli-usage.md-{
examples/cli-usage.md-  "multipass": true,
--
examples/cli-usage.md-
examples/cli-usage.md-Use it:
examples/cli-usage.md-```bash
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --config vexy_svgo.config.json
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-## Output Options
--
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Output as data URI (base64)
examples/cli-usage.md:vexy_svgo input.svg --datauri base64
examples/cli-usage.md-
examples/cli-usage.md-# Output as URL-encoded data URI
examples/cli-usage.md:vexy_svgo input.svg --datauri enc
examples/cli-usage.md-
examples/cli-usage.md-# Output as unencoded data URI
examples/cli-usage.md:vexy_svgo input.svg --datauri unenc
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-### Show optimization info
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Display optimization statistics
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --show-info
examples/cli-usage.md-
examples/cli-usage.md-# Example output:
examples/cli-usage.md-# Original: 2,451 bytes
--
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Optimize SVG string directly
examples/cli-usage.md:vexy_svgo -s '<svg><rect x="0" y="0" width="100" height="100"/></svg>'
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-### Batch processing with custom settings
--
examples/cli-usage.md-```bash
examples/cli-usage.md-# Create a script for batch processing
examples/cli-usage.md-for file in images/*.svg; do
examples/cli-usage.md:  vexy_svgo "$file" -o "optimized/$(basename "$file")" \
examples/cli-usage.md-    --multipass \
examples/cli-usage.md-    --precision 2 \
examples/cli-usage.md-    --config production.yml
--
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Combine with imagemin
examples/cli-usage.md:imagemin images/*.svg --plugin=vexy_svgo > optimized/
examples/cli-usage.md-
examples/cli-usage.md-# Use with find
examples/cli-usage.md:find . -name "*.svg" -exec vexy_svgo {} \;
examples/cli-usage.md-
examples/cli-usage.md-# Process and compress
examples/cli-usage.md:vexy_svgo input.svg | gzip > output.svgz
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-## Feature Flags (if enabled in build)
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Enable parallel processing
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --features parallel
examples/cli-usage.md-
examples/cli-usage.md-# Enable experimental plugins
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --features experimental
examples/cli-usage.md-
examples/cli-usage.md-# List available features
examples/cli-usage.md:vexy_svgo features list
examples/cli-usage.md-
examples/cli-usage.md-# Show current feature configuration
examples/cli-usage.md:vexy_svgo features show
examples/cli-usage.md-```
examples/cli-usage.md-
examples/cli-usage.md-## Common Optimization Scenarios
--
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Aggressive optimization for web
examples/cli-usage.md:vexy_svgo input.svg -o output.svg \
examples/cli-usage.md-  --multipass \
examples/cli-usage.md-  --precision 2 \
examples/cli-usage.md-  --disable removeViewBox,removeTitle
--
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Optimize SVG icons
examples/cli-usage.md:vexy_svgo icon.svg -o icon-optimized.svg \
examples/cli-usage.md-  --enable removeComments,removeEmptyAttrs,convertColors,cleanupIds \
examples/cli-usage.md-  --config '{"plugins":[{"name":"cleanupIds","params":{"minify":true}}]}'
examples/cli-usage.md-```
--
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Keep SVG editable in vector editors
examples/cli-usage.md:vexy_svgo input.svg -o output.svg \
examples/cli-usage.md-  --pretty \
examples/cli-usage.md-  --disable convertPathData,mergePaths \
examples/cli-usage.md-  --config keep-editable.yml
--
examples/cli-usage.md-
examples/cli-usage.md-```bash
examples/cli-usage.md-# Verbose output for debugging
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --verbose
examples/cli-usage.md-
examples/cli-usage.md-# Quiet mode (suppress non-error output)
examples/cli-usage.md:vexy_svgo input.svg -o output.svg --quiet
examples/cli-usage.md-
examples/cli-usage.md-# Continue on errors when processing multiple files
examples/cli-usage.md:vexy_svgo *.svg --continue-on-error
examples/cli-usage.md-```
--
test/plugins/remove_elements_by_attr.rs-//! Tests for the removeElementsByAttr plugin
test/plugins/remove_elements_by_attr.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_elements_by_attr.rs-
test/plugins/remove_elements_by_attr.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_elements_by_attr.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_elements_by_attr.rs-use serde_json::json;
test/plugins/remove_elements_by_attr.rs-
test/plugins/remove_elements_by_attr.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
docs/architecture.md-
docs/architecture.md-# Vexy SVGO Architecture
docs/architecture.md-
docs/architecture.md:`vexy_svgo` is designed as a native Rust port of `svgo`, aiming to replicate its core architectural principles while leveraging Rust's strengths for performance and reliability. The architecture closely mirrors `svgo`'s modular design, consisting of a core engine, parser, stringifier, and a robust plugin system.
docs/architecture.md-
docs/architecture.md-## Core Components
docs/architecture.md-
docs/architecture.md:### 1. Core Engine (`vexy_svgo/src/optimizer.rs`)
docs/architecture.md-
docs/architecture.md:Similar to `svgo`'s `lib/svgo.js`, the `vexy_svgo` core engine orchestrates the SVG optimization process. It takes an SVG string and a configuration object, then applies a pipeline of plugins to the parsed SVG Abstract Syntax Tree (AST). The engine manages the order of plugin execution and handles multi-pass optimizations if configured.
docs/architecture.md-
docs/architecture.md:### 2. Parser (`vexy_svgo/src/parser.rs`)
docs/architecture.md-
docs/architecture.md:The parser component is responsible for transforming an SVG string into an Abstract Syntax Tree (AST). In `svgo`, this is handled by `lib/parser.js`, which uses a SAX-like approach. `vexy_svgo` implements its own efficient SVG parser in Rust, converting the raw SVG XML into a structured, traversable AST representation that plugins can operate on.
docs/architecture.md-
docs/architecture.md:### 3. Plugins (`vexy_svgo/src/plugins/`)
docs/architecture.md-
docs/architecture.md:Plugins are the heart of `vexy_svgo`'s optimization capabilities. Each plugin is a self-contained module that performs a specific optimization or transformation on the SVG AST. `vexy_svgo`'s plugin system is designed to be compatible with `svgo`'s plugin API concepts, allowing for a systematic porting of existing `svgo` plugins.
docs/architecture.md-
docs/architecture.md--   **Modularity**: Each optimization is encapsulated within its own plugin, promoting code organization and reusability.
docs/architecture.md--   **AST Transformation**: Plugins receive and modify the SVG AST, enabling complex manipulations of SVG elements, attributes, and styles.
docs/architecture.md--   **Configurability**: Plugins can be enabled, disabled, and configured with specific parameters via the `VexySvgoConfig` object.
docs/architecture.md-
docs/architecture.md:### 4. Stringifier (`vexy_svgo/src/stringifier.rs`)
docs/architecture.md-
docs/architecture.md-After all plugins have processed the AST, the stringifier component converts the optimized AST back into a minified SVG string. This component is analogous to `svgo`'s `lib/stringifier.js`. The stringifier handles proper XML serialization, including attribute ordering, whitespace management, and numeric precision, to ensure the smallest possible output size while maintaining valid SVG syntax.
docs/architecture.md-
docs/architecture.md:### 5. Command-Line Interface (CLI) (`vexy_svgo/src/bin/vexy_svgo.rs`)
docs/architecture.md-
docs/architecture.md:The `vexy_svgo` CLI provides a user-friendly interface for optimizing SVG files directly from the terminal. It parses command-line arguments, loads configuration, invokes the core optimization engine, and outputs the results. This component mirrors the functionality of `svgo`'s `bin/svgo` and `lib/svgo-node.js`.
docs/architecture.md-
docs/architecture.md-## Design Principles
docs/architecture.md-
docs/architecture.md:`vexy_svgo`'s architecture is guided by several key design principles:
docs/architecture.md-
docs/architecture.md--   **Performance**: Leveraging Rust's capabilities for zero-cost abstractions, memory safety, and concurrency to achieve superior optimization speeds.
docs/architecture.md:-   **Functional Parity**: Ensuring that `vexy_svgo` produces identical optimization results to `svgo` for the same inputs and configurations.
docs/architecture.md--   **Modularity**: Maintaining a clear separation of concerns between parsing, optimization, and stringification, and promoting a plugin-based approach for extensibility.
docs/architecture.md--   **API Compatibility**: Designing the Rust API to be conceptually similar to `svgo`'s JavaScript API where appropriate, to ease migration for developers.
docs/architecture.md--   **WASM Readiness**: Structuring the codebase to facilitate efficient compilation to WebAssembly, enabling broad deployment scenarios.
docs/architecture.md-
docs/architecture.md:By adhering to these principles, `vexy_svgo` aims to be a robust, high-performance, and functionally equivalent alternative to `svgo` in the Rust ecosystem.
--
issues/301.txt-Into @PLAN.md develop a very detailed and specific plan so that we can have one end-user-suitable page that allows the end-user to drop an SVG file or paste SVG code, and have it converted: 
issues/301.txt-
issues/301.txt-- One page should do it with `svgo`
issues/301.txt:- The other page should do it with `vexy_svgo` in WebAssembly
issues/301.txt-
issues/301.txt-The pages should have identical designs, and should use DaisyUI with design compatible to the rest of the website (which is Jekyll with `just-the-docs` theme )
issues/301.txt-
--
docs/package-lock.json-{
docs/package-lock.json:  "name": "vexy_svgo-docs",
docs/package-lock.json-  "version": "1.0.0",
docs/package-lock.json-  "lockfileVersion": 3,
docs/package-lock.json-  "requires": true,
docs/package-lock.json-  "packages": {
docs/package-lock.json-    "": {
docs/package-lock.json:      "name": "vexy_svgo-docs",
docs/package-lock.json-      "version": "1.0.0",
docs/package-lock.json-      "devDependencies": {
docs/package-lock.json-        "@tailwindcss/typography": "^0.5.15",
--
WORK.md-
WORK.md-### Completed Tasks ✅
WORK.md-
WORK.md:1. **Analyzed vexy_svgo Occurrences** ✅
WORK.md-   - Read and analyzed llms.txt code snapshot
WORK.md:   - Found ~3,950+ lowercase `vexy_svgo` occurrences
WORK.md-   - Found ~260+ uppercase `Vexy SVGO` occurrences
WORK.md-   - Documented all occurrences in vexify.txt
WORK.md-
WORK.md-2. **Created Vexify Tool** ✅
WORK.md-   - Implemented vexify.py as Fire CLI tool
WORK.md-   - Smart replacement logic:
WORK.md:     - Filenames: `vexy_svgo` → `vexy_svgo`
WORK.md:     - Code identifiers: `vexy_svgo` → `vexy_svgo`
WORK.md-     - Documentation/UI: `Vexy SVGO` → `Vexy SVGO`
WORK.md-   - Protects strings and comments from replacement
WORK.md-   - Supports dry-run mode and verbose output
--
WORK.md-
WORK.md-### Implementation Details
WORK.md-
WORK.md:- **vexify.txt**: Documents all vexy_svgo occurrences with statistics and context
WORK.md-- **vexify.py**: 371-line Python tool with comprehensive replacement logic
WORK.md-- Features:
WORK.md-  - Analyzes entire codebase recursively
--
WORK.md-
WORK.md-### Next Steps
WORK.md-
WORK.md:- Run vexify on the full vexy_svgo codebase (after backing up)
WORK.md-- Review and fix any edge cases found
WORK.md-- Update documentation to reflect new "Vexy SVGO" branding
WORK.md-
--
GEMINI.md-
GEMINI.md-After every iteration, /report and mark completed items as done in @PLAN.md and @TODO.md. Then run `./build.sh` and then check the `./build_logs`. If needed read the @llms.txt code snapshot. Then /work on items from @TODO.md consulting on @PLAN.md. Then review reflect refine revise, and then continue to /work on @PLAN.md and @TODO.md until every single item and issue has been fixed. Iterate iterate iterate! Do not stop, do not ask for confirmation. Work! When you're finishing one task or item, say "Wait, but..." and go on to the next task/item. It’s CRUCIAL that we get to a solution that BUILDS everything correctly!
GEMINI.md-
GEMINI.md:# Claude Development Guide for vexy_svgo
GEMINI.md-
GEMINI.md:This document provides the necessary context and guidelines for developing `vexy_svgo`, a high-performance SVG optimizer written in Rust. It is an API-compatible port of the popular Node.js-based tool, `svgo`.
GEMINI.md-
GEMINI.md-## 1. Project Overview
GEMINI.md-
GEMINI.md:`vexy_svgo` is an advanced, native Rust port of `svgo`. It is designed for speed, efficiency, and seamless integration into various workflows.
GEMINI.md-
GEMINI.md-**Key Features:**
GEMINI.md-*   **High Performance:** Significantly faster than the original `svgo`.
--
GEMINI.md-The repository is organized as a Cargo workspace with several crates:
GEMINI.md-
GEMINI.md-*   `crates/`: Home for all the Rust crates.
GEMINI.md:    *   `cli/`: The command-line interface for `vexy_svgo`. This crate handles argument parsing, configuration loading, and file I/O.
GEMINI.md:    *   `core/`: The heart of `vexy_svgo`. It contains the SVG parser, the optimizer, the plugin driver, and the stringifier. It does not know about specific plugins.
GEMINI.md:    *   `ffi/`: Provides Foreign Function Interface (FFI) bindings for `vexy_svgo`, allowing it to be called from other languages like C, Python, or Node.js.
GEMINI.md-    *   `plugin-sdk/`: Provides the traits and types for creating plugins. It also includes a registry for discovering and managing plugins.
GEMINI.md-    *   `test-utils/`: Contains helper functions and macros for testing plugins and the core engine.
GEMINI.md:    *   `wasm/`: The WebAssembly bindings for `vexy_svgo`, allowing it to run in the browser and Node.js.
GEMINI.md:*   `vexy_svgo/`: The main Rust crate that integrates all the other crates. Currently serves primarily as a re-export crate.
GEMINI.md:    *   `tests/`: Contains integration and compatibility tests, including those that compare `vexy_svgo`'s output with `svgo`'s.
GEMINI.md-*   `ref/svgo/`: A git submodule pointing to the original `svgo` repository. This is used for reference and for running compatibility tests.
GEMINI.md-*   `docs/`: The documentation website, built with Jekyll.
GEMINI.md-*   `scripts/`: A collection of shell scripts for building, testing, and benchmarking the project.
--
GEMINI.md-
GEMINI.md-## 4. Architecture
GEMINI.md-
GEMINI.md:`vexy_svgo`'s architecture is modular and inspired by `svgo` to ensure API and functional compatibility. The core logic is separated into several crates:
GEMINI.md-
GEMINI.md-1.  **`crates/core`:** This crate is the heart of the optimizer. It is responsible for:
GEMINI.md-    *   **Parsing (`parser.rs`):** An XML parser (`roxmltree`) reads the input SVG string into a custom Abstract Syntax Tree (AST) defined in `ast.rs`. It includes advanced features like XML entity expansion and selective whitespace preservation.
--
GEMINI.md-    *   A plugin registry for discovering and managing available plugins.
GEMINI.md-    *   The implementations of all the optimization plugins in `src/plugins/`. This includes advanced geometric features using the `lyon` crate for path data optimization.
GEMINI.md-
GEMINI.md:3.  **`vexy_svgo` crate:** This is the main crate that brings everything together. It primarily serves as a re-export crate that provides the public API.
GEMINI.md-
GEMINI.md:4.  **`crates/cli`:** This crate provides the command-line interface for `vexy_svgo`. It is responsible for parsing command-line arguments, loading configuration files, and running the optimizer on the specified files.
GEMINI.md-
GEMINI.md:5.  **`crates/wasm`:** This crate is a thin wrapper around the `vexy_svgo` crate that exposes a WebAssembly-compatible API.
GEMINI.md-
GEMINI.md:6.  **`crates/ffi`:** This crate provides Foreign Function Interface (FFI) bindings for `vexy_svgo`, allowing it to be called from other languages like C, Python, or Node.js.
GEMINI.md-
GEMINI.md-## 5. Testing Strategy
GEMINI.md-
GEMINI.md-The project relies on a robust testing strategy to ensure correctness and compatibility.
GEMINI.md-
GEMINI.md:*   **Unit & Integration Tests:** Located within the `vexy_svgo` crate in `vexy_svgo/tests`, these tests cover individual functions and modules. Run with `cargo test`.
GEMINI.md:*   **SVGO Compatibility Tests:** The `vexy_svgo/tests/svgo_compatibility_tests.rs` file runs a large suite of tests ported from `svgo`. The script `generate_compatibility_tests.py` helps automate the creation of these test cases from the `ref/svgo` submodule. This is critical for maintaining parity.
GEMINI.md-*   **Plugin Tests:** Each plugin has its own set of tests in `test/plugins/`. These tests are automatically generated from the `svgo` test fixtures. Additionally, property-based tests are used to ensure robustness and correctness across a wide range of inputs.
GEMINI.md-*   **CI Automation:** GitHub Actions automatically run all tests, lints, and format checks on every push and pull request across macOS, Windows, and Linux.
GEMINI.md-
GEMINI.md-## 6. Reference: SVGO Specification
GEMINI.md-
GEMINI.md:Since `vexy_svgo` is an API-compatible port, the `svgo` specification is the primary reference for functionality and the plugin system. The goal is to match the behavior of `svgo` as closely as possible.
GEMINI.md-
GEMINI.md-### 6.1. Core API: `optimize(input, config)`
GEMINI.md-The main function takes an SVG string and an optional configuration object. The configuration allows enabling/disabling plugins and setting their parameters.
GEMINI.md-
GEMINI.md-### 6.2. Plugins
GEMINI.md:Plugins are the core of the optimization process. `vexy_svgo` aims to implement all major `svgo` plugins. When working on a plugin, refer to its counterpart in `ref/svgo/plugins/` for the exact logic and behavior. The default plugin preset from `svgo` is the baseline for default optimizations.
GEMINI.md-
GEMINI.md:*(A full list of SVGO plugins can be found in the original `svgo` documentation or the `GEMINI.md` file for this project. This list serves as the implementation roadmap for `vexy_svgo`.)*
GEMINI.md-
GEMINI.md-## 7. AI Assistant Guidelines
GEMINI.md-
--
scripts/build-wasm-optimized.sh-    echo -e "${GREEN}[INFO]${NC} Running wasm-opt for additional size reduction..."
scripts/build-wasm-optimized.sh-    
scripts/build-wasm-optimized.sh-    # Get the original size
scripts/build-wasm-optimized.sh:    ORIGINAL_SIZE=$(stat -f%z pkg/vexy_svgo_wasm_bg.wasm 2>/dev/null || stat -c%s pkg/vexy_svgo_wasm_bg.wasm)
scripts/build-wasm-optimized.sh-    
scripts/build-wasm-optimized.sh-    # Run wasm-opt with aggressive optimizations
scripts/build-wasm-optimized.sh-    wasm-opt \
--
scripts/build-wasm-optimized.sh-        --vacuum \
scripts/build-wasm-optimized.sh-        --strip-debug \
scripts/build-wasm-optimized.sh-        --strip-producers \
scripts/build-wasm-optimized.sh:        pkg/vexy_svgo_wasm_bg.wasm \
scripts/build-wasm-optimized.sh:        -o pkg/vexy_svgo_wasm_bg_opt.wasm
scripts/build-wasm-optimized.sh-    
scripts/build-wasm-optimized.sh-    # Replace original with optimized version
scripts/build-wasm-optimized.sh:    mv pkg/vexy_svgo_wasm_bg_opt.wasm pkg/vexy_svgo_wasm_bg.wasm
scripts/build-wasm-optimized.sh-    
scripts/build-wasm-optimized.sh-    # Get the optimized size
scripts/build-wasm-optimized.sh:    OPTIMIZED_SIZE=$(stat -f%z pkg/vexy_svgo_wasm_bg.wasm 2>/dev/null || stat -c%s pkg/vexy_svgo_wasm_bg.wasm)
scripts/build-wasm-optimized.sh-    
scripts/build-wasm-optimized.sh-    # Calculate reduction
scripts/build-wasm-optimized.sh-    REDUCTION=$((ORIGINAL_SIZE - OPTIMIZED_SIZE))
--
scripts/build-wasm-optimized.sh-
scripts/build-wasm-optimized.sh-# Generate minimal glue code
scripts/build-wasm-optimized.sh-echo -e "${GREEN}[INFO]${NC} Generating minimal JavaScript glue code..."
scripts/build-wasm-optimized.sh:cat > pkg/vexy_svgo_wasm_minimal.js << 'EOF'
scripts/build-wasm-optimized.sh:// Minimal WASM loader for vexy_svgo
scripts/build-wasm-optimized.sh-export async function initVexySvgo(wasmPath) {
scripts/build-wasm-optimized.sh-    const response = await fetch(wasmPath);
scripts/build-wasm-optimized.sh-    const bytes = await response.arrayBuffer();
--
test/plugins/sort_attrs.rs-//! Tests for the sortAttrs plugin
test/plugins/sort_attrs.rs-//! Auto-generated from SVGO test fixtures
test/plugins/sort_attrs.rs-
test/plugins/sort_attrs.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/sort_attrs.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/sort_attrs.rs-use serde_json::json;
test/plugins/sort_attrs.rs-
test/plugins/sort_attrs.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
AGENTS.md-
AGENTS.md-After every iteration, /report and mark completed items as done in @PLAN.md and @TODO.md. Then run `./build.sh` and then check the `./build_logs`. If needed read the @llms.txt code snapshot. Then /work on items from @TODO.md consulting on @PLAN.md. Then review reflect refine revise, and then continue to /work on @PLAN.md and @TODO.md until every single item and issue has been fixed. Iterate iterate iterate! Do not stop, do not ask for confirmation. Work! When you're finishing one task or item, say "Wait, but..." and go on to the next task/item. It’s CRUCIAL that we get to a solution that BUILDS everything correctly!
AGENTS.md-
AGENTS.md:# Claude Development Guide for vexy_svgo
AGENTS.md-
AGENTS.md:This document provides the necessary context and guidelines for developing `vexy_svgo`, a high-performance SVG optimizer written in Rust. It is an API-compatible port of the popular Node.js-based tool, `svgo`.
AGENTS.md-
AGENTS.md-## 1. Project Overview
AGENTS.md-
AGENTS.md:`vexy_svgo` is an advanced, native Rust port of `svgo`. It is designed for speed, efficiency, and seamless integration into various workflows.
AGENTS.md-
AGENTS.md-**Key Features:**
AGENTS.md-*   **High Performance:** Significantly faster than the original `svgo`.
--
AGENTS.md-The repository is organized as a Cargo workspace with several crates:
AGENTS.md-
AGENTS.md-*   `crates/`: Home for all the Rust crates.
AGENTS.md:    *   `cli/`: The command-line interface for `vexy_svgo`. This crate handles argument parsing, configuration loading, and file I/O.
AGENTS.md:    *   `core/`: The heart of `vexy_svgo`. It contains the SVG parser, the optimizer, the plugin driver, and the stringifier. It does not know about specific plugins.
AGENTS.md:    *   `ffi/`: Provides Foreign Function Interface (FFI) bindings for `vexy_svgo`, allowing it to be called from other languages like C, Python, or Node.js.
AGENTS.md-    *   `plugin-sdk/`: Provides the traits and types for creating plugins. It also includes a registry for discovering and managing plugins.
AGENTS.md-    *   `test-utils/`: Contains helper functions and macros for testing plugins and the core engine.
AGENTS.md:    *   `wasm/`: The WebAssembly bindings for `vexy_svgo`, allowing it to run in the browser and Node.js.
AGENTS.md:*   `vexy_svgo/`: The main Rust crate that integrates all the other crates. Currently serves primarily as a re-export crate.
AGENTS.md:    *   `tests/`: Contains integration and compatibility tests, including those that compare `vexy_svgo`'s output with `svgo`'s.
AGENTS.md-*   `ref/svgo/`: A git submodule pointing to the original `svgo` repository. This is used for reference and for running compatibility tests.
AGENTS.md-*   `docs/`: The documentation website, built with Jekyll.
AGENTS.md-*   `scripts/`: A collection of shell scripts for building, testing, and benchmarking the project.
--
AGENTS.md-
AGENTS.md-## 4. Architecture
AGENTS.md-
AGENTS.md:`vexy_svgo`'s architecture is modular and inspired by `svgo` to ensure API and functional compatibility. The core logic is separated into several crates:
AGENTS.md-
AGENTS.md-1.  **`crates/core`:** This crate is the heart of the optimizer. It is responsible for:
AGENTS.md-    *   **Parsing (`parser.rs`):** An XML parser (`roxmltree`) reads the input SVG string into a custom Abstract Syntax Tree (AST) defined in `ast.rs`. It includes advanced features like XML entity expansion and selective whitespace preservation.
--
AGENTS.md-    *   A plugin registry for discovering and managing available plugins.
AGENTS.md-    *   The implementations of all the optimization plugins in `src/plugins/`. This includes advanced geometric features using the `lyon` crate for path data optimization.
AGENTS.md-
AGENTS.md:3.  **`vexy_svgo` crate:** This is the main crate that brings everything together. It primarily serves as a re-export crate that provides the public API.
AGENTS.md-
AGENTS.md:4.  **`crates/cli`:** This crate provides the command-line interface for `vexy_svgo`. It is responsible for parsing command-line arguments, loading configuration files, and running the optimizer on the specified files.
AGENTS.md-
AGENTS.md:5.  **`crates/wasm`:** This crate is a thin wrapper around the `vexy_svgo` crate that exposes a WebAssembly-compatible API.
AGENTS.md-
AGENTS.md:6.  **`crates/ffi`:** This crate provides Foreign Function Interface (FFI) bindings for `vexy_svgo`, allowing it to be called from other languages like C, Python, or Node.js.
AGENTS.md-
AGENTS.md-## 5. Testing Strategy
AGENTS.md-
AGENTS.md-The project relies on a robust testing strategy to ensure correctness and compatibility.
AGENTS.md-
AGENTS.md:*   **Unit & Integration Tests:** Located within the `vexy_svgo` crate in `vexy_svgo/tests`, these tests cover individual functions and modules. Run with `cargo test`.
AGENTS.md:*   **SVGO Compatibility Tests:** The `vexy_svgo/tests/svgo_compatibility_tests.rs` file runs a large suite of tests ported from `svgo`. The script `generate_compatibility_tests.py` helps automate the creation of these test cases from the `ref/svgo` submodule. This is critical for maintaining parity.
AGENTS.md-*   **Plugin Tests:** Each plugin has its own set of tests in `test/plugins/`. These tests are automatically generated from the `svgo` test fixtures. Additionally, property-based tests are used to ensure robustness and correctness across a wide range of inputs.
AGENTS.md-*   **CI Automation:** GitHub Actions automatically run all tests, lints, and format checks on every push and pull request across macOS, Windows, and Linux.
AGENTS.md-
AGENTS.md-## 6. Reference: SVGO Specification
AGENTS.md-
AGENTS.md:Since `vexy_svgo` is an API-compatible port, the `svgo` specification is the primary reference for functionality and the plugin system. The goal is to match the behavior of `svgo` as closely as possible.
AGENTS.md-
AGENTS.md-### 6.1. Core API: `optimize(input, config)`
AGENTS.md-The main function takes an SVG string and an optional configuration object. The configuration allows enabling/disabling plugins and setting their parameters.
AGENTS.md-
AGENTS.md-### 6.2. Plugins
AGENTS.md:Plugins are the core of the optimization process. `vexy_svgo` aims to implement all major `svgo` plugins. When working on a plugin, refer to its counterpart in `ref/svgo/plugins/` for the exact logic and behavior. The default plugin preset from `svgo` is the baseline for default optimizations.
AGENTS.md-
AGENTS.md:*(A full list of SVGO plugins can be found in the original `svgo` documentation or the `GEMINI.md` file for this project. This list serves as the implementation roadmap for `vexy_svgo`.)*
AGENTS.md-
AGENTS.md-## 7. AI Assistant Guidelines
AGENTS.md-
--
issues/303.txt-    |
issues/303.txt-    = help: the trait `std::convert::From<&&str>` is not implemented for `std::string::String`
issues/303.txt-    = note: required for `&&str` to implement `Into<std::string::String>`
issues/303.txt:note: required by a bound in `vexy_svgo_core::Element::<'a>::set_attr`
issues/303.txt:   --> /Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/core/src/ast.rs:141:43
issues/303.txt-    |
issues/303.txt-141 | ...self, name: impl Into<String>, value: impl Into<Strin...
issues/303.txt-    |                     ^^^^^^^^^^^^ required by this bound in `Element::<'a>::set_attr`
issues/303.txt:    = note: the full name for the type has been written to '/Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/target/release/deps/vexy_svgo_plugin_sdk-6b990db9d64b0eb3.long-type-645078880835283767.txt'
issues/303.txt-    = note: consider using `--verbose` to print the full type name to the console
issues/303.txt-help: consider dereferencing here
issues/303.txt-    |
--
issues/303.txt-    |
issues/303.txt-    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information
issues/303.txt-
issues/303.txt:error[E0599]: no method named `attrs` found for reference `&vexy_svgo_core::Element<'_>` in the current scope
issues/303.txt-   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:154:38
issues/303.txt-    |
issues/303.txt-154 |         for (attr, value) in element.attrs() {
issues/303.txt-    |                                      ^^^^^
issues/303.txt-    |
issues/303.txt-help: there is a method `attr` with a similar name, but with different arguments
issues/303.txt:   --> /Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/core/src/ast.rs:135:5
issues/303.txt-    |
issues/303.txt-135 |     pub fn attr(&self, name: &str) -> Option<&String> {
issues/303.txt-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
issues/303.txt-
issues/303.txt:error[E0599]: no method named `attrs` found for mutable reference `&mut vexy_svgo_core::Element<'_>` in the current scope
issues/303.txt-   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:202:22
issues/303.txt-    |
issues/303.txt-201 |                   let stroke_attrs: Vec<String> = element
--
issues/303.txt-    | |_____________________-^^^^^
issues/303.txt-    |
issues/303.txt-help: there is a method `attr` with a similar name, but with different arguments
issues/303.txt:   --> /Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/core/src/ast.rs:135:5
issues/303.txt-    |
issues/303.txt-135 |     pub fn attr(&self, name: &str) -> Option<&String> {
issues/303.txt-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
--
issues/303.txt-589 | pub enum Option<T> {
issues/303.txt-    |                 ^ required by the implicit `Sized` requirement on this type parameter in `Option`
issues/303.txt-
issues/303.txt:error[E0599]: no method named `attrs` found for mutable reference `&mut vexy_svgo_core::Element<'_>` in the current scope
issues/303.txt-   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:234:18
issues/303.txt-    |
issues/303.txt-233 |               let fill_attrs: Vec<String> = element
--
issues/303.txt-    | |_________________-^^^^^
issues/303.txt-    |
issues/303.txt-help: there is a method `attr` with a similar name, but with different arguments
issues/303.txt:   --> /Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/core/src/ast.rs:135:5
issues/303.txt-    |
issues/303.txt-135 |     pub fn attr(&self, name: &str) -> Option<&String> {
issues/303.txt-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
--
issues/303.txt-    |
issues/303.txt-    = help: the trait `std::convert::From<&&std::string::String>` is not implemented for `std::string::String`
issues/303.txt-    = note: required for `&&std::string::String` to implement `Into<std::string::String>`
issues/303.txt:note: required by a bound in `vexy_svgo_core::Element::<'a>::set_attr`
issues/303.txt:   --> /Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/core/src/ast.rs:141:69
issues/303.txt-    |
issues/303.txt-141 | ...ng>, value: impl Into<String>) {
issues/303.txt-    |                     ^^^^^^^^^^^^ required by this bound in `Element::<'a>::set_attr`
issues/303.txt:    = note: the full name for the type has been written to '/Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/target/release/deps/vexy_svgo_plugin_sdk-6b990db9d64b0eb3.long-type-8854570748098809002.txt'
issues/303.txt-    = note: consider using `--verbose` to print the full type name to the console
issues/303.txt-help: consider dereferencing here
issues/303.txt-    |
--
issues/303.txt-    |                 arguments to this enum variant are incorrect
issues/303.txt-    |
issues/303.txt-note: tuple variant defined here
issues/303.txt:   --> /Users/adam/Developer/vcs/github.twardoch/pub/vexy_svgo/crates/core/src/ast.rs:71:5
issues/303.txt-    |
issues/303.txt-71  |     Text(String),
issues/303.txt-    |     ^^^^
--
issues/303.txt-   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:140:13
issues/303.txt-    |
issues/303.txt-111 |         element: &mut Element,
issues/303.txt:    |         ------- has type `&mut vexy_svgo_core::Element<'1>`
issues/303.txt-112 |         parent_styles: &HashMap<String, String>,
issues/303.txt-113 |         nodes_to_remove: &mut Vec<*mut Element>,
issues/303.txt:    |         --------------- has type `&mut Vec<*mut vexy_svgo_core::Element<'2>>`
issues/303.txt-...
issues/303.txt-140 |             nodes_to_remove.push(element as *mut Element);
issues/303.txt-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`
issues/303.txt-    |
issues/303.txt:    = note: requirement occurs because of a mutable reference to `Vec<*mut vexy_svgo_core::Element<'_>>`
issues/303.txt-    = note: mutable references are invariant over their type parameter
issues/303.txt-    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
issues/303.txt-help: consider introducing a named lifetime parameter and update trait if needed
--
issues/303.txt-   --> crates/plugin-sdk/src/plugins/remove_useless_stroke_and_fill.rs:140:13
issues/303.txt-    |
issues/303.txt-111 |         element: &mut Element,
issues/303.txt:    |         ------- has type `&mut vexy_svgo_core::Element<'1>`
issues/303.txt-112 |         parent_styles: &HashMap<String, String>,
issues/303.txt-113 |         nodes_to_remove: &mut Vec<*mut Element>,
issues/303.txt:    |         --------------- has type `&mut Vec<*mut vexy_svgo_core::Element<'2>>`
issues/303.txt-...
issues/303.txt-140 |             nodes_to_remove.push(element as *mut Element);
issues/303.txt-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'2` must outlive `'1`
issues/303.txt-    |
issues/303.txt:    = note: requirement occurs because of a mutable pointer to `vexy_svgo_core::Element<'_>`
issues/303.txt-    = note: mutable pointers are invariant over their type parameter
issues/303.txt-    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
issues/303.txt-help: consider introducing a named lifetime parameter and update trait if needed
--
issues/303.txt-   --> crates/plugin-sdk/src/plugins/reuse_paths.rs:124:24
issues/303.txt-    |
issues/303.txt-109 | ...or_create_defs<'b>(&self, svg_element: &'b mut Elemen...
issues/303.txt:    |                       -      ----------- has type `&mut vexy_svgo_core::Element<'2>`
issues/303.txt-    |                       |
issues/303.txt-    |                       let's call the lifetime of this reference `'1`
issues/303.txt-...
issues/303.txt-124 | ...    return Ok(defs);
issues/303.txt-    |               ^^^^^^^^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`
issues/303.txt-    |
issues/303.txt:    = note: requirement occurs because of a mutable reference to `vexy_svgo_core::Element<'_>`
issues/303.txt-    = note: mutable references are invariant over their type parameter
issues/303.txt-    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
issues/303.txt-help: consider reusing a named lifetime parameter and update trait if needed
--
issues/303.txt-   --> crates/plugin-sdk/src/plugins/reuse_paths.rs:124:24
issues/303.txt-    |
issues/303.txt-109 | ...or_create_defs<'b>(&self, svg_element: &'b mut Elemen...
issues/303.txt:    |                       -      ----------- has type `&mut vexy_svgo_core::Element<'2>`
issues/303.txt-    |                       |
issues/303.txt-    |                       let's call the lifetime of this reference `'1`
issues/303.txt-...
issues/303.txt-124 | ...    return Ok(defs);
issues/303.txt-    |               ^^^^^^^^ method was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`
issues/303.txt-    |
issues/303.txt:    = note: requirement occurs because of a mutable reference to `vexy_svgo_core::Element<'_>`
issues/303.txt-    = note: mutable references are invariant over their type parameter
issues/303.txt-    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
issues/303.txt-help: consider reusing a named lifetime parameter and update trait if needed
--
issues/303.txt-
issues/303.txt-Some errors have detailed explanations: E0277, E0308, E0382, E0425, E0499, E0505, E0515, E0596, E0599...
issues/303.txt-For more information about an error, try `rustc --explain E0277`.
issues/303.txt:warning: `vexy_svgo-plugin-sdk` (lib) generated 33 warnings
issues/303.txt:error: could not compile `vexy_svgo-plugin-sdk` (lib) due to 60 previous errors; 33 warnings emitted
issues/303.txt-warning: build failed, waiting for other jobs to finish...
issues/303.txt:warning: `vexy_svgo-core` (lib) generated 2 warnings
issues/303.txt:warning: `vexy_svgo-core` (lib) generated 2 warnings (2 duplicates)
issues/303.txt-    Building [======================>  ] 425/445: boa_engine   
--
test/plugins/remove_xmlns.rs-//! Tests for the removeXMLNS plugin
test/plugins/remove_xmlns.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_xmlns.rs-
test/plugins/remove_xmlns.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_xmlns.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_xmlns.rs-use serde_json::json;
test/plugins/remove_xmlns.rs-
test/plugins/remove_xmlns.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
PLAN.md-## Current Status
PLAN.md-
PLAN.md-### Completed Tasks
PLAN.md:1. ✅ Fixed all import statements from `vexy_svgo_core` to `vexy_svgo_core`
PLAN.md-2. ✅ Updated all SVGN references in comments to Vexy SVGO
PLAN.md-3. ✅ Fixed corrupted files with PROTECTED_ placeholders
PLAN.md-4. ✅ Fixed missing struct fields (Element.attributes)
--
PLAN.md-
PLAN.md-This phase focuses on standardizing the naming conventions across the codebase, documentation, and CLI to ensure consistency and clarity.
PLAN.md-
PLAN.md:1.  **Standardize `vexy_svgo` (snake_case) usage:**
PLAN.md-    *   **Scope:** Rust crate names, module paths, internal code identifiers (variables, functions), WASM file names, JavaScript module imports, configuration file names, database names, storage keys.
PLAN.md:    *   **Action:** Verify all existing uses adhere to `vexy_svgo`. No changes are anticipated here as current usage seems consistent.
PLAN.md-
PLAN.md-2.  **Standardize `Vexy SVGO` (Title Case, space separated) usage:**
PLAN.md-    *   **Scope:** Human-readable project name in documentation titles, UI text, general prose, team names.
--
PLAN.md-        *   Change `Building VEXYSVGO...` to `Building Vexy SVGO...` in `test/comparative/test_plugins.sh`.
PLAN.md-        *   Change `VEXYSVGO` to `Vexy SVGO` in `crates/ffi/src/lib.rs` comment (related to FFI function descriptions).
PLAN.md-        *   Change `VEXYSVGO Team` to `Vexy SVGO Team` in `scripts/marketplace-setup.sh`.
PLAN.md:        *   Change `VEXYSVGO WebAssembly module` to `Vexy SVGO WebAssembly module` in `crates/wasm/vexy_svgo.d.ts`.
PLAN.md-
PLAN.md:3.  **Standardize `vexy-svgo` (kebab-case) usage for CLI and external references:**
PLAN.md-    *   **Scope:** CLI command name, package manager names (Homebrew, Chocolatey), repository names, URLs, binary names.
PLAN.md-    *   **Action:** This is the most significant change and requires careful execution.
PLAN.md:        *   **Rename CLI executable:** Change the `vexy_svgo` binary name to `vexy-svgo`. This will involve updating `Cargo.toml` for the `cli` crate and build scripts.
PLAN.md:        *   **Update CLI command examples:** Change all instances of `vexy_svgo` to `vexy-svgo` in `README.md`, `examples/cli-usage.md`, and `docs/plugin-marketplace.md` (CLI commands).
PLAN.md:        *   **Update binary names in build scripts:** Change `vexy_svgo-linux`, `vexy_svgo-macos-universal`, `vexy_svgo-windows` to `vexy-svgo-linux`, `vexy_svgo-macos-universal`, `vexy-svgo-windows` in `scripts/build.sh`.
PLAN.md:        *   **Update repository URLs:** Change `https://github.com/twardoch/vexy_svgo` to `https://github.com/twardoch/vexy-svgo` in `Cargo.toml`, `README.md`, `examples/wasm-enhanced-demo.html`, `docs/wasm-demo.html`, `docs/plugin-development.md`, `release.sh`, `issues/301.txt`. (Note: This might require an actual GitHub repository rename, which is outside the scope of direct file modification but should be noted).
PLAN.md:        *   **Update package manager instructions:** Ensure `brew install vexy-svgo` and `choco install vexy-svgo` are used in `README.md`. (Currently `vexy_svgo` is used, which is inconsistent with kebab-case for package managers).
PLAN.md:        *   **Update project root check in `release.sh`:** Change `vexy_svgo` to `vexy-svgo`.
PLAN.md:        *   **Update `docs/plugin-development.md`:** Change `vexy_svgo` in clone/build/mkdir commands to `vexy-svgo`.
PLAN.md-
PLAN.md-4.  **Remove `VEXYSVGO` (all caps) for general use:**
PLAN.md-    *   **Scope:** Any instance where it's not a specific FFI function prefix or a constant.
PLAN.md:    *   **Action:** All instances identified in step 2.2 will be changed to `Vexy SVGO` or `vexy_svgo` as appropriate.
PLAN.md-
PLAN.md-### Phase 1: Code Cleanup (Immediate)
PLAN.md-
--
test/plugins/remove_comments.rs-//! Tests for the removeComments plugin
test/plugins/remove_comments.rs-//! Ported from SVGO test fixtures
test/plugins/remove_comments.rs-
test/plugins/remove_comments.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_comments.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_comments.rs-use serde_json::json;
test/plugins/remove_comments.rs-
test/plugins/remove_comments.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
docs/benchmarks.md-./scripts/benchmark-comprehensive.sh testdata 3 10 json true true
docs/benchmarks.md-
docs/benchmarks.md-# Or run simple timing test
docs/benchmarks.md:time ./target/release/vexy_svgo your_file.svg
docs/benchmarks.md-time bunx --bun svgo your_file.svg
docs/benchmarks.md-```
docs/benchmarks.md-
--
docs/benchmarks.md-
docs/benchmarks.md----
docs/benchmarks.md-
docs/benchmarks.md:*Want to try Vexy SVGO? [Download the latest release](https://github.com/twardoch/vexy_svgo/releases) or build from source.*
--
examples/example-plugin/benches/plugin_bench.rs-use criterion::{criterion_group, criterion_main, Criterion};
examples/example-plugin/benches/plugin_bench.rs:use vexy_svgo_core::parser::parse_svg_string;
examples/example-plugin/benches/plugin_bench.rs:use vexy_svgo_plugin_example::AccessibilityPlugin;
examples/example-plugin/benches/plugin_bench.rs:use vexy_svgo_plugin_sdk::Plugin;
examples/example-plugin/benches/plugin_bench.rs-
examples/example-plugin/benches/plugin_bench.rs-fn generate_complex_svg(elements: usize) -> String {
examples/example-plugin/benches/plugin_bench.rs-    let mut svg = String::from(r#"<svg viewBox="0 0 1000 1000" xmlns="http://www.w3.org/2000/svg">"#);
--
examples/example-plugin/benches/plugin_bench.rs-}
examples/example-plugin/benches/plugin_bench.rs-
examples/example-plugin/benches/plugin_bench.rs-fn benchmark_with_custom_labels(c: &mut Criterion) {
examples/example-plugin/benches/plugin_bench.rs:    use vexy_svgo_plugin_example::AccessibilityConfig;
examples/example-plugin/benches/plugin_bench.rs-    use std::collections::HashMap;
examples/example-plugin/benches/plugin_bench.rs-    
examples/example-plugin/benches/plugin_bench.rs-    let svg = generate_complex_svg(100);
--
release.sh-
release.sh-# Check if we're in the right directory
release.sh-if [ ! -f "Cargo.toml" ] || [ ! -d "crates" ]; then
release.sh:    log_error "Must be run from the root of the vexy_svgo project"
release.sh-    exit 1
release.sh-fi
release.sh-
--
release.sh-log_info "  - Publish to package managers"
release.sh-
release.sh-echo
release.sh:log_info "Monitor the release at: https://github.com/twardoch/vexy_svgo/actions"
release.sh:log_info "Release will be available at: https://github.com/twardoch/vexy_svgo/releases/tag/$VERSION_TAG"
--
crates/ffi/src/lib.rs-use std::os::raw::{c_char, c_int};
crates/ffi/src/lib.rs-use std::ptr;
crates/ffi/src/lib.rs-
crates/ffi/src/lib.rs:use vexy_svgo_core::{optimize_with_config, Config};
crates/ffi/src/lib.rs-
crates/ffi/src/lib.rs-/// Error codes for FFI operations
crates/ffi/src/lib.rs-#[repr(C)]
--
crates/ffi/src/lib.rs-/// # Safety
crates/ffi/src/lib.rs-///
crates/ffi/src/lib.rs-/// The `svg_input` pointer must be valid and point to a null-terminated string.
crates/ffi/src/lib.rs:/// The caller is responsible for freeing the returned result using `vexy_svgo_free_result`.
crates/ffi/src/lib.rs-#[no_mangle]
crates/ffi/src/lib.rs:pub unsafe extern "C" fn vexy_svgo_optimize_default(svg_input: *const c_char) -> VexySvgoResult {
crates/ffi/src/lib.rs-    if svg_input.is_null() {
crates/ffi/src/lib.rs-        return create_error_result(VexySvgoErrorCode::InvalidInput, "Input SVG is null");
crates/ffi/src/lib.rs-    }
--
crates/ffi/src/lib.rs-/// # Safety
crates/ffi/src/lib.rs-///
crates/ffi/src/lib.rs-/// Both `svg_input` and `config_json` pointers must be valid and point to null-terminated strings.
crates/ffi/src/lib.rs:/// The caller is responsible for freeing the returned result using `vexy_svgo_free_result`.
crates/ffi/src/lib.rs-#[no_mangle]
crates/ffi/src/lib.rs:pub unsafe extern "C" fn vexy_svgo_optimize_with_config(
crates/ffi/src/lib.rs-    svg_input: *const c_char,
crates/ffi/src/lib.rs-    config_json: *const c_char,
crates/ffi/src/lib.rs-) -> VexySvgoResult {
--
crates/ffi/src/lib.rs-///
crates/ffi/src/lib.rs-/// # Safety
crates/ffi/src/lib.rs-///
crates/ffi/src/lib.rs:/// The caller is responsible for freeing the returned string using `vexy_svgo_free_string`.
crates/ffi/src/lib.rs-#[no_mangle]
crates/ffi/src/lib.rs:pub unsafe extern "C" fn vexy_svgo_get_version() -> *mut c_char {
crates/ffi/src/lib.rs-    let version = env!("CARGO_PKG_VERSION");
crates/ffi/src/lib.rs-    match CString::new(version) {
crates/ffi/src/lib.rs-        Ok(c_string) => c_string.into_raw(),
--
crates/ffi/src/lib.rs-///
crates/ffi/src/lib.rs-/// # Safety
crates/ffi/src/lib.rs-///
crates/ffi/src/lib.rs:/// The caller is responsible for freeing the returned string using `vexy_svgo_free_string`.
crates/ffi/src/lib.rs-#[no_mangle]
crates/ffi/src/lib.rs:pub unsafe extern "C" fn vexy_svgo_get_default_config() -> *mut c_char {
crates/ffi/src/lib.rs-    let config = Config::with_default_preset();
crates/ffi/src/lib.rs-    match serde_json::to_string_pretty(&config) {
crates/ffi/src/lib.rs-        Ok(json) => match CString::new(json) {
--
crates/ffi/src/lib.rs-/// This function must only be called with results returned from Vexy SVGO functions.
crates/ffi/src/lib.rs-/// The result should not be used after calling this function.
crates/ffi/src/lib.rs-#[no_mangle]
crates/ffi/src/lib.rs:pub unsafe extern "C" fn vexy_svgo_free_result(result: VexySvgoResult) {
crates/ffi/src/lib.rs-    if !result.data.is_null() {
crates/ffi/src/lib.rs-        let _ = CString::from_raw(result.data);
crates/ffi/src/lib.rs-    }
--
crates/ffi/src/lib.rs-/// This function must only be called with strings returned from Vexy SVGO functions.
crates/ffi/src/lib.rs-/// The string should not be used after calling this function.
crates/ffi/src/lib.rs-#[no_mangle]
crates/ffi/src/lib.rs:pub unsafe extern "C" fn vexy_svgo_free_string(s: *mut c_char) {
crates/ffi/src/lib.rs-    if !s.is_null() {
crates/ffi/src/lib.rs-        let _ = CString::from_raw(s);
crates/ffi/src/lib.rs-    }
--
crates/ffi/src/lib.rs-///
crates/ffi/src/lib.rs-/// The `s` pointer must be either null or a valid pointer to a null-terminated C string.
crates/ffi/src/lib.rs-#[no_mangle]
crates/ffi/src/lib.rs:pub unsafe extern "C" fn vexy_svgo_check_string(s: *const c_char) -> c_int {
crates/ffi/src/lib.rs-    if s.is_null() {
crates/ffi/src/lib.rs-        return 0;
crates/ffi/src/lib.rs-    }
--
crates/ffi/src/lib.rs-    #[test]
crates/ffi/src/lib.rs-    fn test_ffi_optimize_default() {
crates/ffi/src/lib.rs-        let svg = CString::new("<svg><circle r=\"10\"/></svg>").unwrap();
crates/ffi/src/lib.rs:        let result = unsafe { vexy_svgo_optimize_default(svg.as_ptr()) };
crates/ffi/src/lib.rs-
crates/ffi/src/lib.rs-        assert!(matches!(result.error_code, VexySvgoErrorCode::Success));
crates/ffi/src/lib.rs-        assert!(!result.data.is_null());
crates/ffi/src/lib.rs-        assert!(result.data_length > 0);
crates/ffi/src/lib.rs-
crates/ffi/src/lib.rs-        unsafe {
crates/ffi/src/lib.rs:            vexy_svgo_free_result(result);
crates/ffi/src/lib.rs-        }
crates/ffi/src/lib.rs-    }
crates/ffi/src/lib.rs-
crates/ffi/src/lib.rs-    #[test]
crates/ffi/src/lib.rs-    fn test_ffi_get_version() {
crates/ffi/src/lib.rs:        let version_ptr = unsafe { vexy_svgo_get_version() };
crates/ffi/src/lib.rs-        assert!(!version_ptr.is_null());
crates/ffi/src/lib.rs-
crates/ffi/src/lib.rs-        let version = unsafe { CStr::from_ptr(version_ptr) };
crates/ffi/src/lib.rs-        assert!(!version.to_string_lossy().is_empty());
crates/ffi/src/lib.rs-
crates/ffi/src/lib.rs-        unsafe {
crates/ffi/src/lib.rs:            vexy_svgo_free_string(version_ptr);
crates/ffi/src/lib.rs-        }
crates/ffi/src/lib.rs-    }
crates/ffi/src/lib.rs-
crates/ffi/src/lib.rs-    #[test]
crates/ffi/src/lib.rs-    fn test_ffi_invalid_input() {
crates/ffi/src/lib.rs:        let result = unsafe { vexy_svgo_optimize_default(ptr::null()) };
crates/ffi/src/lib.rs-        assert!(matches!(result.error_code, VexySvgoErrorCode::InvalidInput));
crates/ffi/src/lib.rs-        assert!(!result.error_message.is_null());
crates/ffi/src/lib.rs-
crates/ffi/src/lib.rs-        unsafe {
crates/ffi/src/lib.rs:            vexy_svgo_free_result(result);
crates/ffi/src/lib.rs-        }
crates/ffi/src/lib.rs-    }
crates/ffi/src/lib.rs-}
--
docs/_tools/index.md-
docs/_tools/index.md-All tools are open source and available on GitHub:
docs/_tools/index.md-
docs/_tools/index.md:- [Vexy SVGO Core](https://github.com/twardoch/vexy_svgo) - The Rust implementation
docs/_tools/index.md:- [Web Tools](https://github.com/twardoch/vexy_svgo/tree/main/docs) - Frontend code for these tools
docs/_tools/index.md-
docs/_tools/index.md-## Feedback
docs/_tools/index.md-
docs/_tools/index.md:Found a bug or have a feature request? Please [open an issue](https://github.com/twardoch/vexy_svgo/issues) on GitHub.
docs/_tools/index.md-
docs/_tools/index.md----
docs/_tools/index.md-
--
crates/wasm/src/minimal.rs-    /// Returns the optimized SVG or the original on error
crates/wasm/src/minimal.rs-    #[wasm_bindgen]
crates/wasm/src/minimal.rs-    pub fn optimize(&self, svg: &str) -> String {
crates/wasm/src/minimal.rs:        use vexy_svgo_core::{Config, optimize_with_config};
crates/wasm/src/minimal.rs-        
crates/wasm/src/minimal.rs-        let mut config = Config::default();
crates/wasm/src/minimal.rs-        config.multipass = self.multipass;
crates/wasm/src/minimal.rs-        
crates/wasm/src/minimal.rs-        // Use the most common plugins only
crates/wasm/src/minimal.rs-        config.plugins = vec![
crates/wasm/src/minimal.rs:            vexy_svgo_core::config::PluginConfig::Name("removeComments".to_string()),
crates/wasm/src/minimal.rs:            vexy_svgo_core::config::PluginConfig::Name("removeEmptyAttrs".to_string()),
crates/wasm/src/minimal.rs:            vexy_svgo_core::config::PluginConfig::Name("removeEmptyContainers".to_string()),
crates/wasm/src/minimal.rs:            vexy_svgo_core::config::PluginConfig::Name("collapseGroups".to_string()),
crates/wasm/src/minimal.rs:            vexy_svgo_core::config::PluginConfig::Name("convertColors".to_string()),
crates/wasm/src/minimal.rs:            vexy_svgo_core::config::PluginConfig::Name("removeUselessDefs".to_string()),
crates/wasm/src/minimal.rs-        ];
crates/wasm/src/minimal.rs-        
crates/wasm/src/minimal.rs-        match optimize_with_config(svg, config) {
--
crates/wasm/src/minimal.rs-#[cfg(feature = "size-optimization")]
crates/wasm/src/minimal.rs-#[wasm_bindgen]
crates/wasm/src/minimal.rs-pub fn optimize_minimal(svg: &str) -> String {
crates/wasm/src/minimal.rs:    use vexy_svgo_core::{Config, optimize_with_config};
crates/wasm/src/minimal.rs-    
crates/wasm/src/minimal.rs-    // Use only the most impactful plugins
crates/wasm/src/minimal.rs-    let mut config = Config::default();
crates/wasm/src/minimal.rs-    config.plugins = vec![
crates/wasm/src/minimal.rs:        vexy_svgo_core::config::PluginConfig::Name("removeComments".to_string()),
crates/wasm/src/minimal.rs:        vexy_svgo_core::config::PluginConfig::Name("collapseGroups".to_string()),
crates/wasm/src/minimal.rs-    ];
crates/wasm/src/minimal.rs-    
crates/wasm/src/minimal.rs-    match optimize_with_config(svg, config) {
--
test/plugins/remove_empty_containers.rs-//! Tests for the removeEmptyContainers plugin
test/plugins/remove_empty_containers.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_empty_containers.rs-
test/plugins/remove_empty_containers.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_empty_containers.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_empty_containers.rs-use serde_json::json;
test/plugins/remove_empty_containers.rs-
test/plugins/remove_empty_containers.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/ffi/Cargo.toml-[package]
crates/ffi/Cargo.toml:name = "vexy_svgo-ffi"
crates/ffi/Cargo.toml:description = "C-compatible FFI bindings for vexy_svgo SVG optimizer"
crates/ffi/Cargo.toml-
crates/ffi/Cargo.toml-
crates/ffi/Cargo.toml-[package.version]
--
crates/ffi/Cargo.toml-libc = "0.2"
crates/ffi/Cargo.toml-
crates/ffi/Cargo.toml-
crates/ffi/Cargo.toml:[dependencies.vexy_svgo-core]
crates/ffi/Cargo.toml-path = "../core"
crates/ffi/Cargo.toml-
crates/ffi/Cargo.toml-
--
examples/example-plugin/README.md-
examples/example-plugin/README.md-```toml
examples/example-plugin/README.md-[dependencies]
examples/example-plugin/README.md:vexy_svgo-plugin-example = "0.1"
examples/example-plugin/README.md-```
examples/example-plugin/README.md-
examples/example-plugin/README.md-## Usage
--
examples/example-plugin/README.md-### As a Library
examples/example-plugin/README.md-
examples/example-plugin/README.md-```rust
examples/example-plugin/README.md:use vexy_svgo_plugin_example::AccessibilityPlugin;
examples/example-plugin/README.md:use vexy_svgo_core::{optimize_with_config, Config, PluginConfig};
examples/example-plugin/README.md-
examples/example-plugin/README.md-let mut config = Config::default();
examples/example-plugin/README.md-config.plugins.push(PluginConfig::WithParams {
--
examples/example-plugin/README.md-### With CLI
examples/example-plugin/README.md-
examples/example-plugin/README.md-```bash
examples/example-plugin/README.md:vexy_svgo input.svg -o output.svg --enable addAccessibility --config '{"plugins":[{"name":"addAccessibility","params":{"addRoles":true}}]}'
examples/example-plugin/README.md-```
examples/example-plugin/README.md-
examples/example-plugin/README.md-## Configuration Options
--
crates/plugin-sdk/src/test_framework.rs-use serde_json::Value;
crates/plugin-sdk/src/test_framework.rs-
crates/plugin-sdk/src/test_framework.rs-use crate::Plugin;
crates/plugin-sdk/src/test_framework.rs:use vexy_svgo_core::{
crates/plugin-sdk/src/test_framework.rs-    ast::Document,
crates/plugin-sdk/src/test_framework.rs-    parse_svg,
crates/plugin-sdk/src/test_framework.rs-    stringify,
--
docs/_config.yml----
docs/_config.yml-# Site settings
docs/_config.yml:title: vexy_svgo
docs/_config.yml-description: SVG optimizer, API-compatible Rust port of svgo
docs/_config.yml-url: https://twardoch.github.io
docs/_config.yml:baseurl: /vexy_svgo
docs/_config.yml-
docs/_config.yml-# Theme configuration
docs/_config.yml-remote_theme: just-the-docs/just-the-docs
--
docs/_config.yml-nav_sort: case_insensitive
docs/_config.yml-nav_external_links:
docs/_config.yml-  - title: GitHub Repository
docs/_config.yml:    url: https://github.com/twardoch/vexy_svgo
docs/_config.yml-  - title: SVGO Reference
docs/_config.yml-    url: https://github.com/svg/svgo
docs/_config.yml-
docs/_config.yml-# Aux links
docs/_config.yml-aux_links:
docs/_config.yml-  View on GitHub:
docs/_config.yml:    - https://github.com/twardoch/vexy_svgo
docs/_config.yml-
docs/_config.yml-# Footer
docs/_config.yml-footer_content: Copyright &copy; 2024 Adam Twardoch. Distributed under the MIT License.
--
crates/plugin-sdk/src/test_utils.rs-use serde_json::Value;
crates/plugin-sdk/src/test_utils.rs-use std::fs;
crates/plugin-sdk/src/test_utils.rs-use std::path::{Path, PathBuf};
crates/plugin-sdk/src/test_utils.rs:use vexy_svgo_core::ast::Document;
crates/plugin-sdk/src/test_utils.rs:use vexy_svgo_core::parse_svg;
crates/plugin-sdk/src/test_utils.rs:use vexy_svgo_core::stringify;
crates/plugin-sdk/src/test_utils.rs-
crates/plugin-sdk/src/test_utils.rs-/// Test fixture data parsed from SVGO format
crates/plugin-sdk/src/test_utils.rs-#[derive(Debug, Clone)]
--
docs/_data/benchmarks.json-      "version": "4.0.0",
docs/_data/benchmarks.json-      "status": "available"
docs/_data/benchmarks.json-    },
docs/_data/benchmarks.json:    "vexy_svgo": {
docs/_data/benchmarks.json-      "version": "1.5.8",
docs/_data/benchmarks.json-      "status": "available"
docs/_data/benchmarks.json-    }
--
docs/_data/benchmarks.json-        "total_optimized_size": 435000,
docs/_data/benchmarks.json-        "compression_ratio": 42.0
docs/_data/benchmarks.json-      },
docs/_data/benchmarks.json:      "vexy_svgo": {
docs/_data/benchmarks.json-        "avg_time": 0.067,
docs/_data/benchmarks.json-        "avg_per_file": 0.0067,
docs/_data/benchmarks.json-        "success_rate": 1.0,
--
docs/_data/benchmarks.json-          "peak_memory": 45000
docs/_data/benchmarks.json-        }
docs/_data/benchmarks.json-      ],
docs/_data/benchmarks.json:      "vexy_svgo": [
docs/_data/benchmarks.json-        {
docs/_data/benchmarks.json-          "file": "simple.svg",
docs/_data/benchmarks.json-          "iteration": 1,
--
crates/plugin-sdk/src/lib.rs-use serde_json::Value;
crates/plugin-sdk/src/lib.rs-use std::error::Error;
crates/plugin-sdk/src/lib.rs-use std::fmt;
crates/plugin-sdk/src/lib.rs:use vexy_svgo_core::ast::Document;
crates/plugin-sdk/src/lib.rs-// Visitor is no longer needed with the simplified core Plugin trait
crates/plugin-sdk/src/lib.rs-
crates/plugin-sdk/src/lib.rs-pub mod plugins;
--
crates/plugin-sdk/src/lib.rs-// PluginInfo is no longer needed with the simplified core Plugin trait
crates/plugin-sdk/src/lib.rs-
crates/plugin-sdk/src/lib.rs-// Re-export the core Plugin trait
crates/plugin-sdk/src/lib.rs:pub use vexy_svgo_core::Plugin;
crates/plugin-sdk/src/lib.rs-
crates/plugin-sdk/src/lib.rs-/// Trait for plugins that can be created with parameters
crates/plugin-sdk/src/lib.rs-pub trait PluginWithParams: Plugin + Sized {
--
crates/plugin-sdk/src/lib.rs-/// Create the default plugin registry with all built-in plugins
crates/plugin-sdk/src/lib.rs-pub fn create_default_registry() -> PluginRegistry {
crates/plugin-sdk/src/lib.rs-    // TODO: Register built-in plugins using their factories
crates/plugin-sdk/src/lib.rs:    // This will require a dependency on the vexy_svgo crate, which contains the plugin implementations.
crates/plugin-sdk/src/lib.rs-    // For now, this function will return an empty registry.
crates/plugin-sdk/src/lib.rs-    PluginRegistry::new()
crates/plugin-sdk/src/lib.rs-}
--
crates/plugin-sdk/src/lib.rs-            "Test plugin"
crates/plugin-sdk/src/lib.rs-        }
crates/plugin-sdk/src/lib.rs-
crates/plugin-sdk/src/lib.rs:        fn apply(&self, _document: &mut vexy_svgo_core::ast::Document) -> anyhow::Result<()> {
crates/plugin-sdk/src/lib.rs-            Ok(())
crates/plugin-sdk/src/lib.rs-        }
crates/plugin-sdk/src/lib.rs-    }
--
crates/plugin-sdk/src/lib.rs-        let mut registry = PluginRegistry::new();
crates/plugin-sdk/src/lib.rs-        registry.register("test", || Box::new(TestPlugin { name: "test" }));
crates/plugin-sdk/src/lib.rs-
crates/plugin-sdk/src/lib.rs:        let mut document = vexy_svgo_core::ast::Document::new();
crates/plugin-sdk/src/lib.rs-        let configs = vec![PluginDescriptor::new("test".to_string())];
crates/plugin-sdk/src/lib.rs-
crates/plugin-sdk/src/lib.rs-        // PluginInfo is no longer needed
--
crates/plugin-sdk/src/lib.rs-    #[test]
crates/plugin-sdk/src/lib.rs-    fn test_apply_unknown_plugin() {
crates/plugin-sdk/src/lib.rs-        let mut registry = PluginRegistry::new();
crates/plugin-sdk/src/lib.rs:        let mut document = vexy_svgo_core::ast::Document::new();
crates/plugin-sdk/src/lib.rs-        let configs = vec![PluginDescriptor::new("unknown".to_string())];
crates/plugin-sdk/src/lib.rs-
crates/plugin-sdk/src/lib.rs-        // PluginInfo is no longer needed
--
crates/wasm/src/enhanced.rs-use wasm_bindgen::prelude::*;
crates/wasm/src/enhanced.rs-use std::collections::HashMap;
crates/wasm/src/enhanced.rs-
crates/wasm/src/enhanced.rs:use vexy_svgo_core::{
crates/wasm/src/enhanced.rs-    Config, OptimizationResult, PluginConfig,
crates/wasm/src/enhanced.rs-    optimize_with_config, parse_svg_string, stringify,
crates/wasm/src/enhanced.rs-    ast::Document,
--
examples/example-plugin/Cargo.toml-[package]
examples/example-plugin/Cargo.toml:name = "vexy_svgo-plugin-example"
examples/example-plugin/Cargo.toml-version = "0.1.0"
examples/example-plugin/Cargo.toml-edition = "2021"
examples/example-plugin/Cargo.toml-authors = [ "Your Name <you@example.com>" ]
examples/example-plugin/Cargo.toml-description = "Example VEXYSVGO plugin demonstrating best practices"
examples/example-plugin/Cargo.toml-license = "MIT"
examples/example-plugin/Cargo.toml:repository = "https://github.com/yourusername/vexy_svgo-plugin-example"
examples/example-plugin/Cargo.toml:keywords = [ "svg", "optimization", "vexy_svgo", "plugin" ]
examples/example-plugin/Cargo.toml-categories = [ "multimedia::images", "web-programming" ]
examples/example-plugin/Cargo.toml-
examples/example-plugin/Cargo.toml-
--
examples/example-plugin/Cargo.toml-regex = "1.10"
examples/example-plugin/Cargo.toml-
examples/example-plugin/Cargo.toml-
examples/example-plugin/Cargo.toml:[dependencies.vexy_svgo-plugin-sdk]
examples/example-plugin/Cargo.toml-path = "../../crates/plugin-sdk"
examples/example-plugin/Cargo.toml-
examples/example-plugin/Cargo.toml-
examples/example-plugin/Cargo.toml:[dependencies.vexy_svgo-core]
examples/example-plugin/Cargo.toml-path = "../../crates/core"
examples/example-plugin/Cargo.toml-
examples/example-plugin/Cargo.toml-
--
examples/example-plugin/Cargo.toml-pretty_assertions = "1.4"
examples/example-plugin/Cargo.toml-
examples/example-plugin/Cargo.toml-
examples/example-plugin/Cargo.toml:[dev-dependencies.vexy_svgo-test-utils]
examples/example-plugin/Cargo.toml-path = "../../crates/test-utils"
examples/example-plugin/Cargo.toml-
examples/example-plugin/Cargo.toml-
--
test/plugins/remove_xmlproc_inst.rs-//! Tests for the removeXMLProcInst plugin
test/plugins/remove_xmlproc_inst.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_xmlproc_inst.rs-
test/plugins/remove_xmlproc_inst.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_xmlproc_inst.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_xmlproc_inst.rs-use serde_json::json;
test/plugins/remove_xmlproc_inst.rs-
test/plugins/remove_xmlproc_inst.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/remove_attributes_by_selector.rs-
test/plugins/remove_attributes_by_selector.rs-//! Integration tests for the removeAttributesBySelector plugin
test/plugins/remove_attributes_by_selector.rs-
test/plugins/remove_attributes_by_selector.rs:use vexy_svgo::ast::Document;
test/plugins/remove_attributes_by_selector.rs:use vexy_svgo::parser::Parser;
test/plugins/remove_attributes_by_selector.rs:use vexy_svgo_plugin_sdk::plugins::RemoveAttributesBySelectorPlugin;
test/plugins/remove_attributes_by_selector.rs:use vexy_svgo::plugin::{Plugin, PluginInfo};
test/plugins/remove_attributes_by_selector.rs:use vexy_svgo::stringifier::stringify;
test/plugins/remove_attributes_by_selector.rs-use serde_json::json;
test/plugins/remove_attributes_by_selector.rs-
test/plugins/remove_attributes_by_selector.rs-fn test_plugin(input: &str, params: serde_json::Value, expected: &str) {
--
crates/wasm/src/lib.rs-    use serde::{Deserialize, Serialize};
crates/wasm/src/lib.rs-    use wasm_bindgen::prelude::*;
crates/wasm/src/lib.rs-
crates/wasm/src/lib.rs:    use vexy_svgo_core::{optimize_with_config, Config, OptimizationResult};
crates/wasm/src/lib.rs-
crates/wasm/src/lib.rs-    // When the `wasm` feature is enabled, use wee_alloc as the global allocator
crates/wasm/src/lib.rs-    // to reduce WASM bundle size
--
test/plugins/convert_path_data_advanced.rs-// this_file: test/plugins/convert_path_data_advanced.rs
test/plugins/convert_path_data_advanced.rs:use vexy_svgo::optimize;
test/plugins/convert_path_data_advanced.rs-
test/plugins/convert_path_data_advanced.rs-#[test]
test/plugins/convert_path_data_advanced.rs-fn test_convert_path_data_basic() {
--
crates/wasm/vexy_svgo.d.ts-// TypeScript definitions for Vexy SVGO WebAssembly module
crates/wasm/vexy_svgo.d.ts:// this_file: crates/wasm/vexy_svgo.d.ts
crates/wasm/vexy_svgo.d.ts-
crates/wasm/vexy_svgo.d.ts-/**
crates/wasm/vexy_svgo.d.ts- * Basic configuration for SVG optimization
--
test/plugins/remove_title.rs-//! Tests for the removeTitle plugin
test/plugins/remove_title.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_title.rs-
test/plugins/remove_title.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_title.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_title.rs-use serde_json::json;
test/plugins/remove_title.rs-
test/plugins/remove_title.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/cli/src/commands/plugin/info.rs-            rating, plugin.review_count
crates/cli/src/commands/plugin/info.rs-        );
crates/cli/src/commands/plugin/info.rs-    }
crates/cli/src/commands/plugin/info.rs:    println!("🔧 Vexy SVGO Version: {}", plugin.vexy_svgo_version);
crates/cli/src/commands/plugin/info.rs-
crates/cli/src/commands/plugin/info.rs-    if !plugin.keywords.is_empty() {
crates/cli/src/commands/plugin/info.rs-        println!("🏷️  Keywords: {}", plugin.keywords.join(", "));
--
crates/wasm/package.json.template-{
crates/wasm/package.json.template:  "name": "@vexy_svgo/wasm-minimal",
crates/wasm/package.json.template-  "version": "%%VERSION%%",
crates/wasm/package.json.template-  "description": "Minimal WebAssembly SVG optimizer",
crates/wasm/package.json.template:  "main": "vexy_svgo_wasm.js",
crates/wasm/package.json.template:  "module": "vexy_svgo_wasm.js",
crates/wasm/package.json.template:  "types": "vexy_svgo_wasm.d.ts",
crates/wasm/package.json.template-  "sideEffects": false,
crates/wasm/package.json.template-  "files": [
crates/wasm/package.json.template:    "vexy_svgo_wasm_bg.wasm",
crates/wasm/package.json.template:    "vexy_svgo_wasm.js",
crates/wasm/package.json.template:    "vexy_svgo_wasm_minimal.js",
crates/wasm/package.json.template-    "package.json",
crates/wasm/package.json.template-    "README.md"
crates/wasm/package.json.template-  ],
crates/wasm/package.json.template-  "exports": {
crates/wasm/package.json.template-    ".": {
crates/wasm/package.json.template:      "import": "./vexy_svgo_wasm.js",
crates/wasm/package.json.template:      "require": "./vexy_svgo_wasm.js",
crates/wasm/package.json.template:      "types": "./vexy_svgo_wasm.d.ts"
crates/wasm/package.json.template-    },
crates/wasm/package.json.template-    "./minimal": {
crates/wasm/package.json.template:      "import": "./vexy_svgo_wasm_minimal.js"
crates/wasm/package.json.template-    },
crates/wasm/package.json.template:    "./wasm": "./vexy_svgo_wasm_bg.wasm"
crates/wasm/package.json.template-  },
crates/wasm/package.json.template-  "keywords": [
crates/wasm/package.json.template-    "svg",
--
crates/wasm/package.json.template-    "wasm",
crates/wasm/package.json.template-    "webassembly"
crates/wasm/package.json.template-  ],
crates/wasm/package.json.template:  "author": "vexy_svgo contributors",
crates/wasm/package.json.template-  "license": "MIT",
crates/wasm/package.json.template-  "repository": {
crates/wasm/package.json.template-    "type": "git",
crates/wasm/package.json.template:    "url": "https://github.com/twardoch/vexy_svgo.git",
crates/wasm/package.json.template-    "directory": "crates/wasm"
crates/wasm/package.json.template-  },
crates/wasm/package.json.template-  "engines": {
--
test/plugins/move_elems_attrs_to_group.rs-//! Tests for the moveElemsAttrsToGroup plugin
test/plugins/move_elems_attrs_to_group.rs-//! Auto-generated from SVGO test fixtures
test/plugins/move_elems_attrs_to_group.rs-
test/plugins/move_elems_attrs_to_group.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/move_elems_attrs_to_group.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/move_elems_attrs_to_group.rs-use serde_json::json;
test/plugins/move_elems_attrs_to_group.rs-
test/plugins/move_elems_attrs_to_group.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs-use std::collections::HashMap;
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs:use vexy_svgo_core::ast::{Document, Element};
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs:use vexy_svgo_core::PluginAPI;
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs-
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs-#[derive(Debug, Clone, Serialize, Deserialize)]
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs-#[serde(untagged)]
--
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs-    use super::*;
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs:    use vexy_svgo_core::ast::{Document, Element};
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs-
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/add_attributes_to_svg_element.rs-        let mut element = Element::new(name);
--
crates/wasm/Cargo.toml-
crates/wasm/Cargo.toml-
crates/wasm/Cargo.toml-[package]
crates/wasm/Cargo.toml:name = "vexy_svgo-wasm"
crates/wasm/Cargo.toml:description = "WebAssembly bindings for vexy_svgo SVG optimizer"
crates/wasm/Cargo.toml-
crates/wasm/Cargo.toml-
crates/wasm/Cargo.toml-[package.version]
--
crates/wasm/Cargo.toml-crate-type = [ "cdylib" ]
crates/wasm/Cargo.toml-
crates/wasm/Cargo.toml-
crates/wasm/Cargo.toml:[dependencies.vexy_svgo-core]
crates/wasm/Cargo.toml-path = "../core"
crates/wasm/Cargo.toml-
crates/wasm/Cargo.toml-
--
test/plugins/inline_styles.rs-// this_file: test/plugins/inline_styles.rs
test/plugins/inline_styles.rs-//! Minimal test for inlineStyles plugin (class selector matches)
test/plugins/inline_styles.rs-
test/plugins/inline_styles.rs:use vexy_svgo::{optimize_with_config, Config, PluginConfig};
test/plugins/inline_styles.rs-
test/plugins/inline_styles.rs-fn run_inline_styles_test(input: &str, expected: &str) {
test/plugins/inline_styles.rs-    let mut config = Config::new();
--
test/plugins/remove_scripts.rs-//! Tests for the removeScripts plugin
test/plugins/remove_scripts.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_scripts.rs-
test/plugins/remove_scripts.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_scripts.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_scripts.rs-use serde_json::json;
test/plugins/remove_scripts.rs-
test/plugins/remove_scripts.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/plugin-sdk/src/plugins/remove_elements_by_attr.rs-    use indexmap::IndexMap;
crates/plugin-sdk/src/plugins/remove_elements_by_attr.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_elements_by_attr.rs-    use std::collections::HashMap;
crates/plugin-sdk/src/plugins/remove_elements_by_attr.rs:    use vexy_svgo_core::ast::{Document, DocumentMetadata, Element, Node};
crates/plugin-sdk/src/plugins/remove_elements_by_attr.rs-
crates/plugin-sdk/src/plugins/remove_elements_by_attr.rs-    fn create_test_document() -> Document<'static> {
crates/plugin-sdk/src/plugins/remove_elements_by_attr.rs-        Document {
--
test/plugins/move_group_attrs_to_elems.rs-//! Tests for the moveGroupAttrsToElems plugin
test/plugins/move_group_attrs_to_elems.rs-//! Auto-generated from SVGO test fixtures
test/plugins/move_group_attrs_to_elems.rs-
test/plugins/move_group_attrs_to_elems.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/move_group_attrs_to_elems.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/move_group_attrs_to_elems.rs-use serde_json::json;
test/plugins/move_group_attrs_to_elems.rs-
test/plugins/move_group_attrs_to_elems.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/cli/src/features_cmd.rs-//! Feature management commands for the CLI
crates/cli/src/features_cmd.rs-
crates/cli/src/features_cmd.rs-use clap::{Args, Subcommand};
crates/cli/src/features_cmd.rs:use vexy_svgo_core::features::{Feature, enable_feature, disable_feature, enabled_features};
crates/cli/src/features_cmd.rs:use vexy_svgo_core::error::VexySvgoError;
crates/cli/src/features_cmd.rs-
crates/cli/src/features_cmd.rs-#[derive(Debug, Args)]
crates/cli/src/features_cmd.rs-pub struct FeaturesCommand {
--
crates/cli/src/features_cmd.rs-        "debug" => Ok(Feature::DebugMode),
crates/cli/src/features_cmd.rs-        "wasm" => Ok(Feature::WasmOptimizations),
crates/cli/src/features_cmd.rs-        "memory-profiling" => Ok(Feature::MemoryProfiling),
crates/cli/src/features_cmd.rs:        _ => Err(vexy_svgo_core::error::CliError::UnknownFeature(name.to_string()).into()),
crates/cli/src/features_cmd.rs-    }
crates/cli/src/features_cmd.rs-}
--
crates/plugin-sdk/src/plugins/sort_attrs.rs-    use super::*;
crates/plugin-sdk/src/plugins/sort_attrs.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/sort_attrs.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/sort_attrs.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/sort_attrs.rs-
crates/plugin-sdk/src/plugins/sort_attrs.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/sort_attrs.rs-        let mut element = Element::new(name);
--
test/plugins/remove_dimensions.rs-//! Tests for the removeDimensions plugin
test/plugins/remove_dimensions.rs-//! Ported from SVGO test fixtures
test/plugins/remove_dimensions.rs-
test/plugins/remove_dimensions.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_dimensions.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_dimensions.rs-
test/plugins/remove_dimensions.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
test/plugins/remove_dimensions.rs-    let mut config = Config {
--
test/plugins/remove_metadata.rs-//! Tests for the removeMetadata plugin
test/plugins/remove_metadata.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_metadata.rs-
test/plugins/remove_metadata.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_metadata.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_metadata.rs-use serde_json::json;
test/plugins/remove_metadata.rs-
test/plugins/remove_metadata.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/plugin-sdk/src/plugins/remove_xmlns.rs-#[cfg(test)]
crates/plugin-sdk/src/plugins/remove_xmlns.rs-mod tests {
crates/plugin-sdk/src/plugins/remove_xmlns.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_xmlns.rs:    use vexy_svgo_core::ast::Element;
crates/plugin-sdk/src/plugins/remove_xmlns.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_xmlns.rs-
crates/plugin-sdk/src/plugins/remove_xmlns.rs-    #[test]
--
test/plugins/convert_shape_to_path.rs-//! Tests for the convertShapeToPath plugin
test/plugins/convert_shape_to_path.rs-//! Auto-generated from SVGO test fixtures
test/plugins/convert_shape_to_path.rs-
test/plugins/convert_shape_to_path.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/convert_shape_to_path.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/convert_shape_to_path.rs-use serde_json::json;
test/plugins/convert_shape_to_path.rs-
test/plugins/convert_shape_to_path.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/remove_editors_nsdata.rs-//! Tests for the removeEditorsNSData plugin
test/plugins/remove_editors_nsdata.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_editors_nsdata.rs-
test/plugins/remove_editors_nsdata.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_editors_nsdata.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_editors_nsdata.rs-use serde_json::json;
test/plugins/remove_editors_nsdata.rs-
test/plugins/remove_editors_nsdata.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/remove_desc.rs-//! Tests for the removeDesc plugin
test/plugins/remove_desc.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_desc.rs-
test/plugins/remove_desc.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_desc.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_desc.rs-use serde_json::json;
test/plugins/remove_desc.rs-
test/plugins/remove_desc.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/plugin-sdk/src/plugins/remove_comments.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_comments.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_comments.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_comments.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_comments.rs-
crates/plugin-sdk/src/plugins/remove_comments.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_comments.rs-        let mut element = Element::new(name);
--
crates/cli/src/main.rs-use std::fs;
crates/cli/src/main.rs-use std::io::{self, Read, Write};
crates/cli/src/main.rs-use std::path::{Path, PathBuf};
crates/cli/src/main.rs:use vexy_svgo_core::{optimize_with_config, Config, VERSION, error::VexySvgoError};
crates/cli/src/main.rs-
crates/cli/src/main.rs-#[derive(Debug)]
crates/cli/src/main.rs-enum InputMode {
--
crates/cli/src/main.rs-}
crates/cli/src/main.rs-
crates/cli/src/main.rs-fn main() {
crates/cli/src/main.rs:    let matches = Command::new("vexy_svgo")
crates/cli/src/main.rs-        .version(VERSION)
crates/cli/src/main.rs-        .about("A high-performance Rust port of SVGO (SVG Optimizer)")
crates/cli/src/main.rs-        // Allow positional arguments for input files
--
crates/cli/src/main.rs-            println!("{} Attempting to load configuration from current directory", "📋".bright_cyan());
crates/cli/src/main.rs-        }
crates/cli/src/main.rs-        // Try to load from current directory
crates/cli/src/main.rs:        vexy_svgo_core::load_config_from_directory(".")
crates/cli/src/main.rs-            .unwrap_or_else(|e| {
crates/cli/src/main.rs-                if verbose {
crates/cli/src/main.rs-                    println!("{} No configuration found, using defaults: {}", "ℹ".bright_yellow(), e.to_string().yellow());
--
crates/cli/src/main.rs-    }
crates/cli/src/main.rs-
crates/cli/src/main.rs-    if let Some(eol) = matches.get_one::<String>("eol") {
crates/cli/src/main.rs:        use vexy_svgo_core::LineEnding;
crates/cli/src/main.rs-        config.js2svg.eol = match eol.as_str() {
crates/cli/src/main.rs-            "lf" => LineEnding::Lf,
crates/cli/src/main.rs-            "crlf" => LineEnding::Crlf,
--
crates/cli/src/main.rs-    }
crates/cli/src/main.rs-
crates/cli/src/main.rs-    if let Some(datauri_format) = matches.get_one::<String>("datauri") {
crates/cli/src/main.rs:        use vexy_svgo_core::DataUriFormat;
crates/cli/src/main.rs-        config.datauri = Some(match datauri_format.as_str() {
crates/cli/src/main.rs-            "base64" => DataUriFormat::Base64,
crates/cli/src/main.rs-            "enc" => DataUriFormat::Enc,
--
crates/cli/src/main.rs-    
crates/cli/src/main.rs-    let folder_path = Path::new(folder);
crates/cli/src/main.rs-    if !folder_path.is_dir() {
crates/cli/src/main.rs:        return Err(vexy_svgo_core::error::CliError::InvalidDirectory { 
crates/cli/src/main.rs-            path: folder.to_string() 
crates/cli/src/main.rs-        }.into());
crates/cli/src/main.rs-    }
--
crates/cli/src/main.rs-}
crates/cli/src/main.rs-
crates/cli/src/main.rs-fn apply_precision_override(config: &mut Config, precision: u8) {
crates/cli/src/main.rs:    use vexy_svgo_core::PluginConfig;
crates/cli/src/main.rs-    
crates/cli/src/main.rs-    for plugin in &mut config.plugins {
crates/cli/src/main.rs-        let plugin_name = plugin.name();
--
crates/cli/src/main.rs-}
crates/cli/src/main.rs-
crates/cli/src/main.rs-fn show_plugins() {
crates/cli/src/main.rs:    use vexy_svgo_core::PluginConfig;
crates/cli/src/main.rs-    
crates/cli/src/main.rs-    let config = Config::default();
crates/cli/src/main.rs-    println!("Available plugins:");
--
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-use std::collections::HashSet;
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-use std::sync::LazyLock;
crates/plugin-sdk/src/plugins/remove_empty_containers.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_empty_containers.rs:use vexy_svgo_core::visitor::Visitor;
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-/// Set of SVG container elements that can be removed when empty
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-/// Based on https://www.w3.org/TR/SVG11/intro.html#TermContainerElement
--
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-    fn apply(&self, document: &mut Document) -> Result<()> {
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-        // Use a post-order visitor to process children before parents
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-        let mut visitor = EmptyContainerRemovalVisitor::new();
crates/plugin-sdk/src/plugins/remove_empty_containers.rs:        vexy_svgo_core::visitor::walk_document(&mut visitor, document)?;
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-        Ok(())
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-    }
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-}
--
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_empty_containers.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_empty_containers.rs-        let mut element = Element::new(name);
--
test/plugins/minify_styles.rs-//! Tests for the minifyStyles plugin
test/plugins/minify_styles.rs-//! Auto-generated from SVGO test fixtures
test/plugins/minify_styles.rs-
test/plugins/minify_styles.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/minify_styles.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/minify_styles.rs-use serde_json::json;
test/plugins/minify_styles.rs-
test/plugins/minify_styles.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/remove_doctype.rs-//! Tests for the removeDoctype plugin
test/plugins/remove_doctype.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_doctype.rs-
test/plugins/remove_doctype.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_doctype.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_doctype.rs-use serde_json::json;
test/plugins/remove_doctype.rs-
test/plugins/remove_doctype.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/plugin-sdk/src/plugins/remove_attributes_by_selector.rs-mod tests {
crates/plugin-sdk/src/plugins/remove_attributes_by_selector.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_attributes_by_selector.rs-    use indexmap::IndexMap;
crates/plugin-sdk/src/plugins/remove_attributes_by_selector.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_attributes_by_selector.rs-
crates/plugin-sdk/src/plugins/remove_attributes_by_selector.rs-    fn create_test_document() -> Document<'static> {
crates/plugin-sdk/src/plugins/remove_attributes_by_selector.rs-        let mut doc = Document::default();
--
test/plugins/prefix_ids.rs-//! Tests for the prefixIds plugin
test/plugins/prefix_ids.rs-//! Auto-generated from SVGO test fixtures
test/plugins/prefix_ids.rs-
test/plugins/prefix_ids.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/prefix_ids.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/prefix_ids.rs-use serde_json::json;
test/plugins/prefix_ids.rs-
test/plugins/prefix_ids.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/cli/tests/integration_test.rs-
crates/cli/tests/integration_test.rs-#[test]
crates/cli/tests/integration_test.rs-fn test_version() {
crates/cli/tests/integration_test.rs:    let mut cmd = Command::cargo_bin("vexy_svgo").unwrap();
crates/cli/tests/integration_test.rs-    cmd.arg("--version").assert().success();
crates/cli/tests/integration_test.rs-}
--
test/plugins/convert_transform.rs-//! Tests for the convertTransform plugin
test/plugins/convert_transform.rs-//! Auto-generated from SVGO test fixtures
test/plugins/convert_transform.rs-
test/plugins/convert_transform.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/convert_transform.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/convert_transform.rs-use serde_json::json;
test/plugins/convert_transform.rs-
test/plugins/convert_transform.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/plugin-sdk/src/plugins/remove_title.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_title.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_title.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_title.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_title.rs-
crates/plugin-sdk/src/plugins/remove_title.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_title.rs-        let mut element = Element::new(name);
--
crates/cli/Cargo.toml-[package]
crates/cli/Cargo.toml:name = "vexy_svgo-cli"
crates/cli/Cargo.toml:description = "Command-line interface for vexy_svgo SVG optimizer"
crates/cli/Cargo.toml-
crates/cli/Cargo.toml-
crates/cli/Cargo.toml-[package.version]
--
crates/cli/Cargo.toml-
crates/cli/Cargo.toml-
crates/cli/Cargo.toml-[[bin]]
crates/cli/Cargo.toml:name = "vexy_svgo"
crates/cli/Cargo.toml-path = "src/main.rs"
crates/cli/Cargo.toml-
crates/cli/Cargo.toml-
crates/cli/Cargo.toml:[dependencies.vexy_svgo-core]
crates/cli/Cargo.toml-path = "../core"
crates/cli/Cargo.toml-
crates/cli/Cargo.toml-
--
test/plugins/remove_attrs.rs-//! Tests for the removeAttrs plugin
test/plugins/remove_attrs.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_attrs.rs-
test/plugins/remove_attrs.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_attrs.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_attrs.rs-use serde_json::json;
test/plugins/remove_attrs.rs-
test/plugins/remove_attrs.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/remove_deprecated_attrs.rs-
test/plugins/remove_deprecated_attrs.rs-//! Integration tests for the removeDeprecatedAttrs plugin
test/plugins/remove_deprecated_attrs.rs-
test/plugins/remove_deprecated_attrs.rs:use vexy_svgo::ast::Document;
test/plugins/remove_deprecated_attrs.rs:use vexy_svgo::parser::Parser;
test/plugins/remove_deprecated_attrs.rs:use vexy_svgo_plugin_sdk::plugins::RemoveDeprecatedAttrsPlugin;
test/plugins/remove_deprecated_attrs.rs:use vexy_svgo::plugin::{Plugin, PluginInfo};
test/plugins/remove_deprecated_attrs.rs:use vexy_svgo::stringifier::stringify;
test/plugins/remove_deprecated_attrs.rs-use serde_json::json;
test/plugins/remove_deprecated_attrs.rs-
test/plugins/remove_deprecated_attrs.rs-fn test_plugin(input: &str, params: Option<serde_json::Value>, expected: &str) {
--
crates/plugin-sdk/src/plugins/move_elems_attrs_to_group.rs-#[cfg(test)]
crates/plugin-sdk/src/plugins/move_elems_attrs_to_group.rs-mod tests {
crates/plugin-sdk/src/plugins/move_elems_attrs_to_group.rs-    use super::*;
crates/plugin-sdk/src/plugins/move_elems_attrs_to_group.rs:    use vexy_svgo_core::ast::*;
crates/plugin-sdk/src/plugins/move_elems_attrs_to_group.rs-
crates/plugin-sdk/src/plugins/move_elems_attrs_to_group.rs-    fn create_test_element(tag: &str, attrs: Vec<(&str, &str)>) -> Element<'static> {
crates/plugin-sdk/src/plugins/move_elems_attrs_to_group.rs-        let mut element = Element::new(tag.to_string());
--
crates/core/src/parser/config.rs-    }
crates/core/src/parser/config.rs-}
crates/core/src/parser/config.rs-
crates/core/src/parser/config.rs:/// Load configuration from a directory (looks for .vexy_svgorc, vexy_svgo.config.json, etc.)
crates/core/src/parser/config.rs-pub fn load_config_from_directory<P: AsRef<std::path::Path>>(
crates/core/src/parser/config.rs-    dir: P,
crates/core/src/parser/config.rs-) -> Result<Config, std::io::Error> {
--
crates/core/src/parser/config.rs-
crates/core/src/parser/config.rs-    // Try various config file names
crates/core/src/parser/config.rs-    let config_files = [
crates/core/src/parser/config.rs:        ".vexy_svgorc",
crates/core/src/parser/config.rs:        ".vexy_svgorc.json",
crates/core/src/parser/config.rs:        "vexy_svgo.config.json",
crates/core/src/parser/config.rs-        ".svgorc",
crates/core/src/parser/config.rs-        ".svgorc.json",
crates/core/src/parser/config.rs-        "svgo.config.json",
--
test/plugins/remove_unused_ns.rs-//! Tests for the removeUnusedNS plugin
test/plugins/remove_unused_ns.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_unused_ns.rs-
test/plugins/remove_unused_ns.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_unused_ns.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_unused_ns.rs-use serde_json::json;
test/plugins/remove_unused_ns.rs-
test/plugins/remove_unused_ns.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/add_classes_to_svg_element.rs-//! Tests for the addClassesToSVGElement plugin
test/plugins/add_classes_to_svg_element.rs-//! Auto-generated from SVGO test fixtures
test/plugins/add_classes_to_svg_element.rs-
test/plugins/add_classes_to_svg_element.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/add_classes_to_svg_element.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/add_classes_to_svg_element.rs-use serde_json::json;
test/plugins/add_classes_to_svg_element.rs-
test/plugins/add_classes_to_svg_element.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/plugin-sdk/src/plugins/inline_styles.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/inline_styles.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/inline_styles.rs-use std::collections::{HashMap, HashSet};
crates/plugin-sdk/src/plugins/inline_styles.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/inline_styles.rs:use vexy_svgo_core::visitor::Visitor;
crates/plugin-sdk/src/plugins/inline_styles.rs-
crates/plugin-sdk/src/plugins/inline_styles.rs-/// Configuration parameters for inline styles plugin
crates/plugin-sdk/src/plugins/inline_styles.rs-#[derive(Debug, Clone, Serialize, Deserialize)]
--
crates/plugin-sdk/src/plugins/inline_styles.rs-    fn apply(&self, document: &mut Document) -> Result<()> {
crates/plugin-sdk/src/plugins/inline_styles.rs-        // First pass: collect all style elements and parse CSS
crates/plugin-sdk/src/plugins/inline_styles.rs-        let mut collector = InlineStylesVisitor::new(self.config.clone());
crates/plugin-sdk/src/plugins/inline_styles.rs:        vexy_svgo_core::visitor::walk_document(&mut collector, document)?;
crates/plugin-sdk/src/plugins/inline_styles.rs-        
crates/plugin-sdk/src/plugins/inline_styles.rs-        // Sort rules by specificity (cascade order)
crates/plugin-sdk/src/plugins/inline_styles.rs-        collector.css_rules.sort_by_key(|rule| rule.specificity);
--
crates/plugin-sdk/src/plugins/inline_styles.rs-    use super::*;
crates/plugin-sdk/src/plugins/inline_styles.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/inline_styles.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/inline_styles.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/inline_styles.rs-
crates/plugin-sdk/src/plugins/inline_styles.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/inline_styles.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/inline_styles.rs-    use super::*;
crates/plugin-sdk/src/plugins/inline_styles.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/inline_styles.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/inline_styles.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/inline_styles.rs-
crates/plugin-sdk/src/plugins/inline_styles.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/inline_styles.rs-        let mut element = Element::new(name);
--
test/plugins/remove_off_canvas_paths.rs-//! Tests for the removeOffCanvasPaths plugin
test/plugins/remove_off_canvas_paths.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_off_canvas_paths.rs-
test/plugins/remove_off_canvas_paths.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_off_canvas_paths.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_off_canvas_paths.rs-use serde_json::json;
test/plugins/remove_off_canvas_paths.rs-
test/plugins/remove_off_canvas_paths.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/remove_style_element.rs-//! Tests for the removeStyleElement plugin
test/plugins/remove_style_element.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_style_element.rs-
test/plugins/remove_style_element.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_style_element.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_style_element.rs-use serde_json::json;
test/plugins/remove_style_element.rs-
test/plugins/remove_style_element.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/remove_empty_attrs.rs-//! Tests for the removeEmptyAttrs plugin
test/plugins/remove_empty_attrs.rs-//! Ported from SVGO test fixtures
test/plugins/remove_empty_attrs.rs-
test/plugins/remove_empty_attrs.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_empty_attrs.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_empty_attrs.rs-
test/plugins/remove_empty_attrs.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
test/plugins/remove_empty_attrs.rs-    let mut config = Config {
--
crates/plugin-sdk/src/plugins/remove_dimensions.rs-use anyhow::Result;
crates/plugin-sdk/src/plugins/remove_dimensions.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/remove_dimensions.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/remove_dimensions.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_dimensions.rs-
crates/plugin-sdk/src/plugins/remove_dimensions.rs-/// Configuration for the removeDimensions plugin
crates/plugin-sdk/src/plugins/remove_dimensions.rs-#[derive(Debug, Clone, Serialize, Deserialize)]
--
crates/plugin-sdk/src/plugins/remove_dimensions.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_dimensions.rs-    use indexmap::IndexMap;
crates/plugin-sdk/src/plugins/remove_dimensions.rs-    use std::collections::HashMap;
crates/plugin-sdk/src/plugins/remove_dimensions.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_dimensions.rs-
crates/plugin-sdk/src/plugins/remove_dimensions.rs-    fn create_test_document() -> Document<'static> {
crates/plugin-sdk/src/plugins/remove_dimensions.rs-        Document {
--
crates/plugin-sdk/src/plugins/remove_dimensions.rs-            },
crates/plugin-sdk/src/plugins/remove_dimensions.rs-            prologue: vec![],
crates/plugin-sdk/src/plugins/remove_dimensions.rs-            epilogue: vec![],
crates/plugin-sdk/src/plugins/remove_dimensions.rs:            metadata: vexy_svgo_core::ast::DocumentMetadata {
crates/plugin-sdk/src/plugins/remove_dimensions.rs-                path: None,
crates/plugin-sdk/src/plugins/remove_dimensions.rs-                encoding: None,
crates/plugin-sdk/src/plugins/remove_dimensions.rs-                version: None,
--
test/plugins/remove_xlink.rs-//! Tests for the removeXlink plugin
test/plugins/remove_xlink.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_xlink.rs-
test/plugins/remove_xlink.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_xlink.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_xlink.rs-use serde_json::json;
test/plugins/remove_xlink.rs-
test/plugins/remove_xlink.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/plugin-sdk/src/plugins/merge_paths.rs-use crate::Plugin;
crates/plugin-sdk/src/plugins/merge_paths.rs-use anyhow::Result;
crates/plugin-sdk/src/plugins/merge_paths.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/merge_paths.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/merge_paths.rs:use vexy_svgo_core::visitor::Visitor;
crates/plugin-sdk/src/plugins/merge_paths.rs-
crates/plugin-sdk/src/plugins/merge_paths.rs-/// Plugin configuration for merge paths
crates/plugin-sdk/src/plugins/merge_paths.rs-#[derive(Debug, Clone)]
--
crates/plugin-sdk/src/plugins/merge_paths.rs-
crates/plugin-sdk/src/plugins/merge_paths.rs-    fn apply(&self, document: &mut Document) -> anyhow::Result<()> {
crates/plugin-sdk/src/plugins/merge_paths.rs-        let mut visitor = PathMergeVisitor::new(self.config.clone());
crates/plugin-sdk/src/plugins/merge_paths.rs:        vexy_svgo_core::visitor::walk_document(&mut visitor, document)?;
crates/plugin-sdk/src/plugins/merge_paths.rs-        Ok(())
crates/plugin-sdk/src/plugins/merge_paths.rs-    }
crates/plugin-sdk/src/plugins/merge_paths.rs-}
--
crates/plugin-sdk/src/plugins/merge_paths.rs-    use super::*;
crates/plugin-sdk/src/plugins/merge_paths.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/merge_paths.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/merge_paths.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/merge_paths.rs-
crates/plugin-sdk/src/plugins/merge_paths.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/merge_paths.rs-        let mut element = Element::new(name);
--
test/plugins/apply_transforms.rs-// this_file: test/plugins/apply_transforms.rs
test/plugins/apply_transforms.rs:use vexy_svgo::optimize;
test/plugins/apply_transforms.rs-
test/plugins/apply_transforms.rs-#[test]
test/plugins/apply_transforms.rs-fn test_apply_transforms_translate() {
--
test/plugins/remove_empty_text.rs-//! Tests for the removeEmptyText plugin
test/plugins/remove_empty_text.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_empty_text.rs-
test/plugins/remove_empty_text.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_empty_text.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_empty_text.rs-use serde_json::json;
test/plugins/remove_empty_text.rs-
test/plugins/remove_empty_text.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/convert_ellipse_to_circle.rs-
test/plugins/convert_ellipse_to_circle.rs-//! Integration tests for the convertEllipseToCircle plugin
test/plugins/convert_ellipse_to_circle.rs-
test/plugins/convert_ellipse_to_circle.rs:use vexy_svgo::ast::Document;
test/plugins/convert_ellipse_to_circle.rs:use vexy_svgo::parser::Parser;
test/plugins/convert_ellipse_to_circle.rs:use vexy_svgo_plugin_sdk::plugins::ConvertEllipseToCirclePlugin;
test/plugins/convert_ellipse_to_circle.rs:use vexy_svgo::plugin::{Plugin, PluginInfo};
test/plugins/convert_ellipse_to_circle.rs:use vexy_svgo::stringifier::stringify;
test/plugins/convert_ellipse_to_circle.rs-
test/plugins/convert_ellipse_to_circle.rs-fn test_plugin(input: &str, expected: &str) {
test/plugins/convert_ellipse_to_circle.rs-    let parser = Parser::new();
--
crates/plugin-sdk/src/plugins/convert_shape_to_path.rs-#[cfg(test)]
crates/plugin-sdk/src/plugins/convert_shape_to_path.rs-mod tests {
crates/plugin-sdk/src/plugins/convert_shape_to_path.rs-    use super::*;
crates/plugin-sdk/src/plugins/convert_shape_to_path.rs:    use vexy_svgo_core::ast::Element;
crates/plugin-sdk/src/plugins/convert_shape_to_path.rs-
crates/plugin-sdk/src/plugins/convert_shape_to_path.rs-    fn create_element(name: &str, attrs: Vec<(&str, &str)>) -> Element<'static> {
crates/plugin-sdk/src/plugins/convert_shape_to_path.rs-        let mut element = Element::new(name.to_string());
--
test/plugins/sort_defs_children.rs-//! Tests for the sortDefsChildren plugin
test/plugins/sort_defs_children.rs-//! Auto-generated from SVGO test fixtures
test/plugins/sort_defs_children.rs-
test/plugins/sort_defs_children.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/sort_defs_children.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/sort_defs_children.rs-use serde_json::json;
test/plugins/sort_defs_children.rs-
test/plugins/sort_defs_children.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/remove_non_inheritable_group_attrs.rs-//! Tests for the removeNonInheritableGroupAttrs plugin
test/plugins/remove_non_inheritable_group_attrs.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_non_inheritable_group_attrs.rs-
test/plugins/remove_non_inheritable_group_attrs.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_non_inheritable_group_attrs.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_non_inheritable_group_attrs.rs-use serde_json::json;
test/plugins/remove_non_inheritable_group_attrs.rs-
test/plugins/remove_non_inheritable_group_attrs.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/convert_path_data.rs-// this_file: test/plugins/convert_path_data.rs
test/plugins/convert_path_data.rs:use vexy_svgo::optimize;
test/plugins/convert_path_data.rs-
test/plugins/convert_path_data.rs-#[test]
test/plugins/convert_path_data.rs-fn test_convert_path_data_basic() {
--
crates/plugin-sdk/src/plugins/remove_desc.rs-#[cfg(test)]
crates/plugin-sdk/src/plugins/remove_desc.rs-mod tests {
crates/plugin-sdk/src/plugins/remove_desc.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_desc.rs:    use vexy_svgo_core::parser::Parser;
crates/plugin-sdk/src/plugins/remove_desc.rs-
crates/plugin-sdk/src/plugins/remove_desc.rs-    #[test]
crates/plugin-sdk/src/plugins/remove_desc.rs-    fn test_plugin_info() {
--
test/plugins/convert_style_to_attrs.rs-//! Tests for the convertStyleToAttrs plugin
test/plugins/convert_style_to_attrs.rs-//! Auto-generated from SVGO test fixtures
test/plugins/convert_style_to_attrs.rs-
test/plugins/convert_style_to_attrs.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/convert_style_to_attrs.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/convert_style_to_attrs.rs-use serde_json::json;
test/plugins/convert_style_to_attrs.rs-
test/plugins/convert_style_to_attrs.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/remove_raster_images.rs-//! Tests for the removeRasterImages plugin
test/plugins/remove_raster_images.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_raster_images.rs-
test/plugins/remove_raster_images.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_raster_images.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_raster_images.rs-use serde_json::json;
test/plugins/remove_raster_images.rs-
test/plugins/remove_raster_images.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/convert_one_stop_gradients.rs-// this_file: test/plugins/convert_one_stop_gradients.rs
test/plugins/convert_one_stop_gradients.rs-
test/plugins/convert_one_stop_gradients.rs:use vexy_svgo::optimize;
test/plugins/convert_one_stop_gradients.rs-use serde_json::json;
test/plugins/convert_one_stop_gradients.rs-
test/plugins/convert_one_stop_gradients.rs-#[test]
--
crates/plugin-sdk/src/plugins/minify_styles.rs-    use super::*;
crates/plugin-sdk/src/plugins/minify_styles.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/minify_styles.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/minify_styles.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/minify_styles.rs-
crates/plugin-sdk/src/plugins/minify_styles.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/minify_styles.rs-        let mut element = Element::new(name);
--
test/plugins/remove_view_box.rs-//! Tests for the removeViewBox plugin
test/plugins/remove_view_box.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_view_box.rs-
test/plugins/remove_view_box.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_view_box.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_view_box.rs-use serde_json::json;
test/plugins/remove_view_box.rs-
test/plugins/remove_view_box.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
test/plugins/remove_useless_stroke_and_fill.rs-//! Tests for the removeUselessStrokeAndFill plugin
test/plugins/remove_useless_stroke_and_fill.rs-//! Auto-generated from SVGO test fixtures
test/plugins/remove_useless_stroke_and_fill.rs-
test/plugins/remove_useless_stroke_and_fill.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/remove_useless_stroke_and_fill.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/remove_useless_stroke_and_fill.rs-use serde_json::json;
test/plugins/remove_useless_stroke_and_fill.rs-
test/plugins/remove_useless_stroke_and_fill.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/core/src/lib.rs-// this_file: crates/core/src/lib.rs
crates/core/src/lib.rs-
crates/core/src/lib.rs://! # vexy_svgo-core
crates/core/src/lib.rs-//!
crates/core/src/lib.rs://! Core SVG processing engine for vexy_svgo, providing parsing, AST manipulation,
crates/core/src/lib.rs-//! optimization, and stringification capabilities.
crates/core/src/lib.rs-
crates/core/src/lib.rs-pub mod ast;
--
crates/core/src/lib.rs-pub mod utils;
crates/core/src/lib.rs-pub mod visitor;
crates/core/src/lib.rs-
crates/core/src/lib.rs:/// Version string for vexy_svgo
crates/core/src/lib.rs-pub const VERSION: &str = env!("CARGO_PKG_VERSION");
crates/core/src/lib.rs-
crates/core/src/lib.rs-// Re-export main types
--
crates/plugin-sdk/src/plugins/remove_useless_transforms.rs-#[cfg(test)]
crates/plugin-sdk/src/plugins/remove_useless_transforms.rs-mod tests {
crates/plugin-sdk/src/plugins/remove_useless_transforms.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_useless_transforms.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_useless_transforms.rs-
crates/plugin-sdk/src/plugins/remove_useless_transforms.rs-    #[test]
crates/plugin-sdk/src/plugins/remove_useless_transforms.rs-    fn test_plugin_info() {
--
test/plugins/merge_styles.rs-//! Tests for the mergeStyles plugin
test/plugins/merge_styles.rs-//! Auto-generated from SVGO test fixtures
test/plugins/merge_styles.rs-
test/plugins/merge_styles.rs:use vexy_svgo::{optimize, OptimizeOptions, Config, PluginConfig};
test/plugins/merge_styles.rs:use vexy_svgo::config::Js2SvgOptions;
test/plugins/merge_styles.rs-use serde_json::json;
test/plugins/merge_styles.rs-
test/plugins/merge_styles.rs-fn test_plugin(input: &str, expected: &str, params: Option<serde_json::Value>) {
--
crates/plugin-sdk/src/plugins/prefix_ids.rs-mod tests {
crates/plugin-sdk/src/plugins/prefix_ids.rs-    use super::*;
crates/plugin-sdk/src/plugins/prefix_ids.rs-    use indexmap::IndexMap;
crates/plugin-sdk/src/plugins/prefix_ids.rs:    use vexy_svgo_core::ast::{Document, DocumentMetadata, Element};
crates/plugin-sdk/src/plugins/prefix_ids.rs-
crates/plugin-sdk/src/plugins/prefix_ids.rs-    fn create_test_document() -> Document<'static> {
crates/plugin-sdk/src/plugins/prefix_ids.rs-        Document {
--
crates/plugin-sdk/src/plugins/prefix_ids.rs-mod tests {
crates/plugin-sdk/src/plugins/prefix_ids.rs-    use super::*;
crates/plugin-sdk/src/plugins/prefix_ids.rs-    use indexmap::IndexMap;
crates/plugin-sdk/src/plugins/prefix_ids.rs:    use vexy_svgo_core::ast::{Document, DocumentMetadata, Element};
crates/plugin-sdk/src/plugins/prefix_ids.rs-
crates/plugin-sdk/src/plugins/prefix_ids.rs-    fn create_test_document() -> Document<'static> {
crates/plugin-sdk/src/plugins/prefix_ids.rs-        Document {
--
crates/core/tests/parallel_test.rs-// this_file: crates/core/tests/parallel_test.rs
crates/core/tests/parallel_test.rs-
crates/core/tests/parallel_test.rs:use vexy_svgo_core::{
crates/core/tests/parallel_test.rs-    ast::{Document, Element, Node},
crates/core/tests/parallel_test.rs-    parallel::{ParallelConfig, process_independent_groups, should_parallelize},
crates/core/tests/parallel_test.rs-    OptimizeOptions,
--
crates/core/tests/parallel_test.rs-
crates/core/tests/parallel_test.rs-#[test]
crates/core/tests/parallel_test.rs-fn test_parallel_config_in_options() {
crates/core/tests/parallel_test.rs:    let config = vexy_svgo_core::Config::default();
crates/core/tests/parallel_test.rs-    let parallel_config = ParallelConfig {
crates/core/tests/parallel_test.rs-        size_threshold: 512 * 1024, // 512KB
crates/core/tests/parallel_test.rs-        element_threshold: 500,
--
crates/plugin-sdk/src/plugins/remove_doctype.rs-use anyhow::Result;
crates/plugin-sdk/src/plugins/remove_doctype.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/remove_doctype.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/remove_doctype.rs:use vexy_svgo_core::ast::{Document, Node};
crates/plugin-sdk/src/plugins/remove_doctype.rs-
crates/plugin-sdk/src/plugins/remove_doctype.rs-/// Configuration parameters for remove doctype plugin (currently empty)
crates/plugin-sdk/src/plugins/remove_doctype.rs-#[derive(Debug, Clone, Serialize, Deserialize)]
--
crates/plugin-sdk/src/plugins/remove_doctype.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_doctype.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_doctype.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_doctype.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_doctype.rs-
crates/plugin-sdk/src/plugins/remove_doctype.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_doctype.rs-        let mut element = Element::new(name);
--
crates/core/Cargo.toml-[package]
crates/core/Cargo.toml:name = "vexy_svgo-core"
crates/core/Cargo.toml:description = "Core SVG processing engine for vexy_svgo"
crates/core/Cargo.toml-
crates/core/Cargo.toml-
crates/core/Cargo.toml-[package.version]
--
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs-
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs-    fn apply(&self, document: &mut Document) -> anyhow::Result<()> {
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs-        let mut visitor = EmptyAttrRemovalVisitor::new(self.preserve_class, self.preserve_id);
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs:        vexy_svgo_core::visitor::walk_document(&mut visitor, document)?;
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs-        Ok(())
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs-    }
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs-}
--
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs-    use std::collections::HashMap;
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs:    use vexy_svgo_core::ast::{Document, Element};
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs-
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs-    #[test]
crates/plugin-sdk/src/plugins/remove_empty_attrs.rs-    fn test_plugin_creation() {
--
crates/plugin-sdk/src/plugins/remove_unused_ns.rs-mod tests {
crates/plugin-sdk/src/plugins/remove_unused_ns.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_unused_ns.rs-    use indexmap::IndexMap;
crates/plugin-sdk/src/plugins/remove_unused_ns.rs:    use vexy_svgo_core::ast::{Document, DocumentMetadata, Element, Node};
crates/plugin-sdk/src/plugins/remove_unused_ns.rs-
crates/plugin-sdk/src/plugins/remove_unused_ns.rs-    fn create_test_document() -> Document<'static> {
crates/plugin-sdk/src/plugins/remove_unused_ns.rs-        Document {
--
crates/test-utils/src/lib.rs-// this_file: crates/test-utils/src/lib.rs
crates/test-utils/src/lib.rs-
crates/test-utils/src/lib.rs://! # vexy_svgo-test-utils
crates/test-utils/src/lib.rs-//!
crates/test-utils/src/lib.rs://! Shared testing utilities for vexy_svgo.
crates/test-utils/src/lib.rs-
crates/test-utils/src/lib.rs-use std::fs;
crates/test-utils/src/lib.rs-use std::path::Path;
--
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-use anyhow::{anyhow, Result};
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs:use vexy_svgo_core::visitor::Visitor;
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-/// Configuration parameters for remove hidden elems plugin
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-#[derive(Debug, Clone, Serialize, Deserialize)]
--
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-    fn apply(&self, document: &mut Document) -> Result<()> {
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-        let mut visitor = HiddenElemsRemovalVisitor::new(self.config.clone());
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs:        vexy_svgo_core::visitor::walk_document(&mut visitor, document)?;
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-        Ok(())
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-    }
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-}
--
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_hidden_elems.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/convert_colors.rs-
crates/plugin-sdk/src/plugins/convert_colors.rs-    fn apply(&self, document: &mut Document) -> anyhow::Result<()> {
crates/plugin-sdk/src/plugins/convert_colors.rs-        let mut visitor = ColorConversionVisitor::new(self.config.clone());
crates/plugin-sdk/src/plugins/convert_colors.rs:        vexy_svgo_core::visitor::walk_document(&mut visitor, document)?;
crates/plugin-sdk/src/plugins/convert_colors.rs-        Ok(())
crates/plugin-sdk/src/plugins/convert_colors.rs-    }
crates/plugin-sdk/src/plugins/convert_colors.rs-}
--
crates/plugin-sdk/src/plugins/convert_colors.rs-
crates/plugin-sdk/src/plugins/convert_colors.rs-    fn apply(&self, document: &mut Document) -> anyhow::Result<()> {
crates/plugin-sdk/src/plugins/convert_colors.rs-        let mut visitor = ColorConversionVisitor::new(self.config.clone());
crates/plugin-sdk/src/plugins/convert_colors.rs:        vexy_svgo_core::visitor::walk_document(&mut visitor, document)?;
crates/plugin-sdk/src/plugins/convert_colors.rs-        Ok(())
crates/plugin-sdk/src/plugins/convert_colors.rs-    }
crates/plugin-sdk/src/plugins/convert_colors.rs-}
--
crates/plugin-sdk/src/plugins/convert_colors.rs-    use super::*;
crates/plugin-sdk/src/plugins/convert_colors.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/convert_colors.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/convert_colors.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/convert_colors.rs-
crates/plugin-sdk/src/plugins/convert_colors.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/convert_colors.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/convert_path_data/mod.rs-};
crates/plugin-sdk/src/plugins/convert_path_data/mod.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/convert_path_data/mod.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/convert_path_data/mod.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/convert_path_data/mod.rs-
crates/plugin-sdk/src/plugins/convert_path_data/mod.rs-/// Default decimal precision for path coordinates
crates/plugin-sdk/src/plugins/convert_path_data/mod.rs-const DEFAULT_FLOAT_PRECISION: u8 = 3;
--
crates/test-utils/tests/compat.rs-//! These tests verify that Vexy SVGO is feature-compatible with SVGO
crates/test-utils/tests/compat.rs-
crates/test-utils/tests/compat.rs-use serde_json::json;
crates/test-utils/tests/compat.rs:use vexy_svgo_core::config::{Js2SvgOptions, LineEnding};
crates/test-utils/tests/compat.rs:use vexy_svgo_core::{optimize, Config, OptimizeOptions, PluginConfig};
crates/test-utils/tests/compat.rs:use vexy_svgo_plugin_sdk::registry::create_migrated_plugin_registry;
crates/test-utils/tests/compat.rs-
crates/test-utils/tests/compat.rs-/// Test helper function to run optimization with specific plugins
crates/test-utils/tests/compat.rs-fn test_optimization(
--
crates/plugin-sdk/src/plugins/remove_empty_text.rs-use anyhow::Result;
crates/plugin-sdk/src/plugins/remove_empty_text.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/remove_empty_text.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/remove_empty_text.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_empty_text.rs-
crates/plugin-sdk/src/plugins/remove_empty_text.rs-/// Configuration parameters for remove empty text plugin
crates/plugin-sdk/src/plugins/remove_empty_text.rs-#[derive(Debug, Clone, Serialize, Deserialize)]
--
crates/plugin-sdk/src/plugins/remove_empty_text.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_empty_text.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_empty_text.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_empty_text.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_empty_text.rs-
crates/plugin-sdk/src/plugins/remove_empty_text.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_empty_text.rs-        let mut element = Element::new(name);
--
crates/test-utils/Cargo.toml-
crates/test-utils/Cargo.toml-
crates/test-utils/Cargo.toml-[package]
crates/test-utils/Cargo.toml:name = "vexy_svgo-test-utils"
crates/test-utils/Cargo.toml:description = "Shared testing utilities for vexy_svgo"
crates/test-utils/Cargo.toml-
crates/test-utils/Cargo.toml-
crates/test-utils/Cargo.toml-[package.version]
--
crates/test-utils/Cargo.toml-workspace = true
crates/test-utils/Cargo.toml-
crates/test-utils/Cargo.toml-
crates/test-utils/Cargo.toml:[dependencies.vexy_svgo-core]
crates/test-utils/Cargo.toml-path = "../core"
crates/test-utils/Cargo.toml-
crates/test-utils/Cargo.toml-
crates/test-utils/Cargo.toml:[dependencies.vexy_svgo-plugin-sdk]
crates/test-utils/Cargo.toml-path = "../plugin-sdk"
crates/test-utils/Cargo.toml-
crates/test-utils/Cargo.toml-
--
crates/plugin-sdk/src/plugins/add_classes_to_svg_element.rs-    use super::*;
crates/plugin-sdk/src/plugins/add_classes_to_svg_element.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/add_classes_to_svg_element.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/add_classes_to_svg_element.rs:    use vexy_svgo_core::ast::{Document, Element};
crates/plugin-sdk/src/plugins/add_classes_to_svg_element.rs-
crates/plugin-sdk/src/plugins/add_classes_to_svg_element.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/add_classes_to_svg_element.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/remove_style_element.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_style_element.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_style_element.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_style_element.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_style_element.rs-
crates/plugin-sdk/src/plugins/remove_style_element.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_style_element.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/property_tests.rs-use anyhow::Result;
crates/plugin-sdk/src/property_tests.rs-use proptest::prelude::*;
crates/plugin-sdk/src/property_tests.rs-use proptest::strategy::ValueTree;
crates/plugin-sdk/src/property_tests.rs:use vexy_svgo_core::{parse_svg, stringify};
crates/plugin-sdk/src/property_tests.rs-
crates/plugin-sdk/src/property_tests.rs-/// Strategy for generating valid SVG tag names
crates/plugin-sdk/src/property_tests.rs-fn svg_tag_names() -> impl Strategy<Value = &'static str> {
--
crates/plugin-sdk/src/plugins/sort_defs_children.rs-    use super::*;
crates/plugin-sdk/src/plugins/sort_defs_children.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/sort_defs_children.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/sort_defs_children.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/sort_defs_children.rs-
crates/plugin-sdk/src/plugins/sort_defs_children.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/sort_defs_children.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/remove_xlink.rs-mod tests {
crates/plugin-sdk/src/plugins/remove_xlink.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_xlink.rs-    use indexmap::IndexMap;
crates/plugin-sdk/src/plugins/remove_xlink.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_xlink.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_xlink.rs-
crates/plugin-sdk/src/plugins/remove_xlink.rs-    fn create_test_document() -> Document<'static> {
--
crates/plugin-sdk/src/plugins/reuse_paths.rs-#[cfg(test)]
crates/plugin-sdk/src/plugins/reuse_paths.rs-mod tests {
crates/plugin-sdk/src/plugins/reuse_paths.rs-    use super::*;
crates/plugin-sdk/src/plugins/reuse_paths.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/reuse_paths.rs-
crates/plugin-sdk/src/plugins/reuse_paths.rs-    #[test]
crates/plugin-sdk/src/plugins/reuse_paths.rs-    fn test_plugin_info() {
--
crates/plugin-sdk/src/plugins/reuse_paths.rs-            <path d="M10,10 L20,20" fill="red" stroke="blue"/>
crates/plugin-sdk/src/plugins/reuse_paths.rs-        </svg>"#;
crates/plugin-sdk/src/plugins/reuse_paths.rs-
crates/plugin-sdk/src/plugins/reuse_paths.rs:        let mut document = vexy_svgo_core::parse_svg(svg).unwrap();
crates/plugin-sdk/src/plugins/reuse_paths.rs-        let plugin = ReusePathsPlugin::new();
crates/plugin-sdk/src/plugins/reuse_paths.rs-
crates/plugin-sdk/src/plugins/reuse_paths.rs-        let result = plugin.apply(&mut document);
--
crates/plugin-sdk/src/plugins/reuse_paths.rs-            <path d="M30,30 L40,40" fill="red" stroke="blue"/>
crates/plugin-sdk/src/plugins/reuse_paths.rs-        </svg>"#;
crates/plugin-sdk/src/plugins/reuse_paths.rs-
crates/plugin-sdk/src/plugins/reuse_paths.rs:        let mut document = vexy_svgo_core::parse_svg(svg).unwrap();
crates/plugin-sdk/src/plugins/reuse_paths.rs-        let plugin = ReusePathsPlugin::new();
crates/plugin-sdk/src/plugins/reuse_paths.rs-
crates/plugin-sdk/src/plugins/reuse_paths.rs-        let result = plugin.apply(&mut document);
--
crates/plugin-sdk/src/plugins/reuse_paths.rs-            <path d="M10,10 L20,20" fill="red"/>
crates/plugin-sdk/src/plugins/reuse_paths.rs-        </svg>"#;
crates/plugin-sdk/src/plugins/reuse_paths.rs-
crates/plugin-sdk/src/plugins/reuse_paths.rs:        let mut document = vexy_svgo_core::parse_svg(svg).unwrap();
crates/plugin-sdk/src/plugins/reuse_paths.rs-        let plugin = ReusePathsPlugin::new();
crates/plugin-sdk/src/plugins/reuse_paths.rs-
crates/plugin-sdk/src/plugins/reuse_paths.rs-        let result = plugin.apply(&mut document);
--
crates/plugin-sdk/src/plugins/reuse_paths.rs-            <path d="M10,10 L20,20" fill="red"/>
crates/plugin-sdk/src/plugins/reuse_paths.rs-        </svg>"#;
crates/plugin-sdk/src/plugins/reuse_paths.rs-
crates/plugin-sdk/src/plugins/reuse_paths.rs:        let mut document = vexy_svgo_core::parse_svg(svg).unwrap();
crates/plugin-sdk/src/plugins/reuse_paths.rs-        let plugin = ReusePathsPlugin::new();
crates/plugin-sdk/src/plugins/reuse_paths.rs-
crates/plugin-sdk/src/plugins/reuse_paths.rs-        let result = plugin.apply(&mut document);
--
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs-use anyhow::Result;
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs-
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs-/// Configuration parameters for convert ellipse to circle plugin (currently empty)
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs-#[derive(Debug, Clone, Serialize, Deserialize)]
--
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs-    use super::*;
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs-
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/convert_ellipse_to_circle.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-use std::sync::LazyLock;
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs:use vexy_svgo_core::ast::{Document, Element};
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs:use vexy_svgo_core::visitor::Visitor;
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-/// Configuration parameters for convert style to attrs plugin
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-#[derive(Debug, Clone, Serialize, Deserialize)]
--
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-    fn apply(&self, document: &mut Document) -> Result<()> {
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-        let mut visitor = ConvertStyleToAttrsVisitor::new(self.config.clone());
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs:        vexy_svgo_core::visitor::walk_document(&mut visitor, document)?;
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-        Ok(())
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-    }
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-}
--
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-    use super::*;
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/convert_style_to_attrs.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/tests/registry_test.rs-
crates/plugin-sdk/tests/registry_test.rs-use serde_json::json;
crates/plugin-sdk/tests/registry_test.rs-use std::borrow::Cow;
crates/plugin-sdk/tests/registry_test.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/tests/registry_test.rs:use vexy_svgo_core::plugin_registry::{PluginConfig, PluginRegistry};
crates/plugin-sdk/tests/registry_test.rs:use vexy_svgo_plugin_sdk::{Plugin, plugins::{CollapseGroupsPlugin, RemoveCommentsPlugin, RemoveEmptyAttrsPlugin}};
crates/plugin-sdk/tests/registry_test.rs-
crates/plugin-sdk/tests/registry_test.rs-#[test]
crates/plugin-sdk/tests/registry_test.rs-fn test_registry_with_multiple_plugins() {
--
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-mod tests {
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-    use super::*;
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-    use indexmap::IndexMap;
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-    fn create_test_document() -> Document<'static> {
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-        use std::collections::HashMap;
--
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-            },
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-            prologue: vec![],
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-            epilogue: vec![],
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs:            metadata: vexy_svgo_core::ast::DocumentMetadata {
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-                path: None,
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-                encoding: None,
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-                version: None,
--
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-mod tests {
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-    use super::*;
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-    use indexmap::IndexMap;
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-    fn create_test_document() -> Document<'static> {
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-        use std::collections::HashMap;
--
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-            },
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-            prologue: vec![],
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-            epilogue: vec![],
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs:            metadata: vexy_svgo_core::ast::DocumentMetadata {
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-                path: None,
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-                encoding: None,
crates/plugin-sdk/src/plugins/convert_one_stop_gradients.rs-                version: None,
--
crates/plugin-sdk/PLUGIN_MIGRATION.md-# Plugin Migration Guide
crates/plugin-sdk/PLUGIN_MIGRATION.md-
crates/plugin-sdk/PLUGIN_MIGRATION.md:This guide explains how to migrate existing SVGO plugins to the new vexy_svgo plugin architecture.
crates/plugin-sdk/PLUGIN_MIGRATION.md-
crates/plugin-sdk/PLUGIN_MIGRATION.md-## Overview
crates/plugin-sdk/PLUGIN_MIGRATION.md-
--
crates/plugin-sdk/PLUGIN_MIGRATION.md-**New Vexy SVGO Plugin (Rust):**
crates/plugin-sdk/PLUGIN_MIGRATION.md-```rust
crates/plugin-sdk/PLUGIN_MIGRATION.md-use crate::Plugin;
crates/plugin-sdk/PLUGIN_MIGRATION.md:use vexy_svgo_core::ast::{Document, Element};
crates/plugin-sdk/PLUGIN_MIGRATION.md:use vexy_svgo_core::visitor::Visitor;
crates/plugin-sdk/PLUGIN_MIGRATION.md-use anyhow::Result;
crates/plugin-sdk/PLUGIN_MIGRATION.md-
crates/plugin-sdk/PLUGIN_MIGRATION.md-pub struct RemoveCommentsPlugin {
--
crates/plugin-sdk/PLUGIN_MIGRATION.md-
crates/plugin-sdk/PLUGIN_MIGRATION.md-    fn apply(&self, document: &mut Document) -> Result<()> {
crates/plugin-sdk/PLUGIN_MIGRATION.md-        let mut visitor = CommentRemovalVisitor::new(self.preserve_patterns);
crates/plugin-sdk/PLUGIN_MIGRATION.md:        vexy_svgo_core::visitor::walk_document(&mut visitor, document)?;
crates/plugin-sdk/PLUGIN_MIGRATION.md-        Ok(())
crates/plugin-sdk/PLUGIN_MIGRATION.md-    }
crates/plugin-sdk/PLUGIN_MIGRATION.md-}
--
crates/plugin-sdk/PLUGIN_MIGRATION.md-#[cfg(test)]
crates/plugin-sdk/PLUGIN_MIGRATION.md-mod tests {
crates/plugin-sdk/PLUGIN_MIGRATION.md-    use super::*;
crates/plugin-sdk/PLUGIN_MIGRATION.md:    use vexy_svgo_core::ast::Document;
crates/plugin-sdk/PLUGIN_MIGRATION.md-    use serde_json::json;
crates/plugin-sdk/PLUGIN_MIGRATION.md-
crates/plugin-sdk/PLUGIN_MIGRATION.md-    #[test]
--
crates/plugin-sdk/Cargo.toml-[package]
crates/plugin-sdk/Cargo.toml:name = "vexy_svgo-plugin-sdk"
crates/plugin-sdk/Cargo.toml:description = "Plugin development SDK for vexy_svgo SVG optimizer"
crates/plugin-sdk/Cargo.toml-
crates/plugin-sdk/Cargo.toml-
crates/plugin-sdk/Cargo.toml-[package.version]
--
crates/plugin-sdk/Cargo.toml-workspace = true
crates/plugin-sdk/Cargo.toml-
crates/plugin-sdk/Cargo.toml-
crates/plugin-sdk/Cargo.toml:[dependencies.vexy_svgo-core]
crates/plugin-sdk/Cargo.toml-path = "../core"
crates/plugin-sdk/Cargo.toml-
crates/plugin-sdk/Cargo.toml-
--
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs-use anyhow::Result;
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs:use vexy_svgo_core::ast::{Document, Node};
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs-
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs-/// Configuration parameters for remove XML processing instruction plugin (currently empty)
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs-#[derive(Debug, Clone, Serialize, Deserialize)]
--
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs-
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_xml_proc_inst.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/selector.rs-
crates/plugin-sdk/src/selector.rs-//! SVG element selector matching for plugins.
crates/plugin-sdk/src/selector.rs-//!
crates/plugin-sdk/src/selector.rs://! This module enables CSS selector matching on the vexy_svgo AST for SVG elements.
crates/plugin-sdk/src/selector.rs-//! It provides wrapper types and trait implementations required by the `selectors` crate,
crates/plugin-sdk/src/selector.rs://! allowing selectors to operate on the vexy_svgo DOM.
crates/plugin-sdk/src/selector.rs-//!
crates/plugin-sdk/src/selector.rs-//! # Features
crates/plugin-sdk/src/selector.rs-//! - Implements all required traits for selector matching on SVG elements.
--
crates/plugin-sdk/src/selector.rs-use selectors::{Element as SelectorElement, OpaqueElement};
crates/plugin-sdk/src/selector.rs-use std::borrow::Borrow;
crates/plugin-sdk/src/selector.rs-use std::fmt;
crates/plugin-sdk/src/selector.rs:use vexy_svgo_core::ast::{Element, Node};
crates/plugin-sdk/src/selector.rs-
crates/plugin-sdk/src/selector.rs-// Import PrecomputedHash trait - required for SelectorImpl associated types
crates/plugin-sdk/src/selector.rs-use precomputed_hash::PrecomputedHash;
--
crates/plugin-sdk/tests/integration_test.rs-
crates/plugin-sdk/tests/integration_test.rs-//! Integration tests for the new plugin architecture
crates/plugin-sdk/tests/integration_test.rs-
crates/plugin-sdk/tests/integration_test.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/tests/integration_test.rs:use vexy_svgo_plugin_sdk::{Plugin, plugins::RemoveCommentsPlugin};
crates/plugin-sdk/tests/integration_test.rs-
crates/plugin-sdk/tests/integration_test.rs-#[test]
crates/plugin-sdk/tests/integration_test.rs-fn test_remove_comments_plugin_integration() {
--
crates/plugin-sdk/examples/plugin_composition.rs-
crates/plugin-sdk/examples/plugin_composition.rs-use serde_json::json;
crates/plugin-sdk/examples/plugin_composition.rs-use std::borrow::Cow;
crates/plugin-sdk/examples/plugin_composition.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/examples/plugin_composition.rs:use vexy_svgo_core::plugin_registry::{PluginConfig, PluginRegistry};
crates/plugin-sdk/examples/plugin_composition.rs:use vexy_svgo_plugin_sdk::{Plugin, plugins::{RemoveCommentsPlugin, RemoveEmptyAttrsPlugin}};
crates/plugin-sdk/examples/plugin_composition.rs-
crates/plugin-sdk/examples/plugin_composition.rs-fn main() -> anyhow::Result<()> {
crates/plugin-sdk/examples/plugin_composition.rs-    println!("Plugin Composition Example");
--
crates/plugin-sdk/src/registry.rs-//! using the new visitor-based architecture.
crates/plugin-sdk/src/registry.rs-
crates/plugin-sdk/src/registry.rs-use crate::plugins::*;
crates/plugin-sdk/src/registry.rs:use vexy_svgo_core::plugin_registry::PluginRegistry;
crates/plugin-sdk/src/registry.rs-
crates/plugin-sdk/src/registry.rs-/// Create a plugin registry with all migrated plugins
crates/plugin-sdk/src/registry.rs-pub fn create_migrated_plugin_registry() -> PluginRegistry {
--
crates/plugin-sdk/src/registry.rs-}
crates/plugin-sdk/src/registry.rs-
crates/plugin-sdk/src/registry.rs-/// Get the default plugin configuration for migrated plugins
crates/plugin-sdk/src/registry.rs:pub fn get_default_plugin_configs() -> Vec<vexy_svgo_core::plugin_registry::PluginConfig> {
crates/plugin-sdk/src/registry.rs-    use serde_json::json;
crates/plugin-sdk/src/registry.rs:    use vexy_svgo_core::plugin_registry::PluginConfig;
crates/plugin-sdk/src/registry.rs-
crates/plugin-sdk/src/registry.rs-    vec![
crates/plugin-sdk/src/registry.rs-        PluginConfig {
--
crates/plugin-sdk/src/registry.rs-        let configs = get_default_plugin_configs();
crates/plugin-sdk/src/registry.rs-
crates/plugin-sdk/src/registry.rs-        // Create a test document
crates/plugin-sdk/src/registry.rs:        let mut doc = vexy_svgo_core::ast::Document::new();
crates/plugin-sdk/src/registry.rs-
crates/plugin-sdk/src/registry.rs-        // Apply all plugins - should not error
crates/plugin-sdk/src/registry.rs-        let result = registry.apply_plugins(&mut doc, &configs);
--
crates/plugin-sdk/src/registry.rs-        let registry = create_migrated_plugin_registry();
crates/plugin-sdk/src/registry.rs-
crates/plugin-sdk/src/registry.rs-        // Test valid parameters
crates/plugin-sdk/src/registry.rs:        let valid_config = vexy_svgo_core::plugin_registry::PluginConfig {
crates/plugin-sdk/src/registry.rs-            name: "removeComments".to_string(),
crates/plugin-sdk/src/registry.rs-            params: json!({"preservePatterns": false}),
crates/plugin-sdk/src/registry.rs-            enabled: true,
crates/plugin-sdk/src/registry.rs-        };
crates/plugin-sdk/src/registry.rs-
crates/plugin-sdk/src/registry.rs:        let mut doc = vexy_svgo_core::ast::Document::new();
crates/plugin-sdk/src/registry.rs-        let result = registry.apply_plugin(&mut doc, &valid_config);
crates/plugin-sdk/src/registry.rs-        assert!(result.is_ok(), "Valid parameters should be accepted");
crates/plugin-sdk/src/registry.rs-
crates/plugin-sdk/src/registry.rs-        // Test invalid parameters
crates/plugin-sdk/src/registry.rs:        let invalid_config = vexy_svgo_core::plugin_registry::PluginConfig {
crates/plugin-sdk/src/registry.rs-            name: "removeComments".to_string(),
crates/plugin-sdk/src/registry.rs-            params: json!({"preservePatterns": "invalid"}),
crates/plugin-sdk/src/registry.rs-            enabled: true,
crates/plugin-sdk/src/registry.rs-        };
crates/plugin-sdk/src/registry.rs-
crates/plugin-sdk/src/registry.rs:        let mut doc2 = vexy_svgo_core::ast::Document::new();
crates/plugin-sdk/src/registry.rs-        let result = registry.apply_plugin(&mut doc2, &invalid_config);
crates/plugin-sdk/src/registry.rs-        assert!(result.is_err(), "Invalid parameters should be rejected");
crates/plugin-sdk/src/registry.rs-    }
--
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```toml
crates/plugin-sdk/README.md-[dependencies]
crates/plugin-sdk/README.md:vexy_svgo-plugin-sdk = "2.0"
crates/plugin-sdk/README.md:vexy_svgo-core = "2.0"
crates/plugin-sdk/README.md-anyhow = "1.0"
crates/plugin-sdk/README.md-serde = { version = "1.0", features = ["derive"] }
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-[dev-dependencies]
crates/plugin-sdk/README.md:vexy_svgo-test-utils = "2.0"
crates/plugin-sdk/README.md-```
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-Create a basic plugin:
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```rust
crates/plugin-sdk/README.md:use vexy_svgo_plugin_sdk::{Plugin, PluginMetadata};
crates/plugin-sdk/README.md:use vexy_svgo_core::{ast::Document, visitor::Visitor};
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-#[derive(Default)]
crates/plugin-sdk/README.md-pub struct MyPlugin;
--
crates/plugin-sdk/README.md-### Step 1: Implement the Plugin Trait
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```rust
crates/plugin-sdk/README.md:use vexy_svgo_plugin_sdk::{Plugin, PluginMetadata, PluginResult};
crates/plugin-sdk/README.md:use vexy_svgo_core::{ast::Document, visitor::{Visitor, VisitorContext}};
crates/plugin-sdk/README.md-use anyhow::Result;
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-pub struct RemoveEmptyElementsPlugin {
--
crates/plugin-sdk/README.md-#[cfg(test)]
crates/plugin-sdk/README.md-mod tests {
crates/plugin-sdk/README.md-    use super::*;
crates/plugin-sdk/README.md:    use vexy_svgo_test_utils::{test_plugin, assert_svg_eq};
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-    #[test]
crates/plugin-sdk/README.md-    fn removes_empty_elements() {
--
crates/plugin-sdk/README.md-### Basic Testing
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```rust
crates/plugin-sdk/README.md:use vexy_svgo_test_utils::*;
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-#[test]
crates/plugin-sdk/README.md-fn test_basic_optimization() {
--
crates/plugin-sdk/README.md-### Advanced Testing
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```rust
crates/plugin-sdk/README.md:use vexy_svgo_test_utils::*;
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-#[test]
crates/plugin-sdk/README.md-fn test_with_config() {
--
crates/plugin-sdk/README.md-### Performance Testing
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```rust
crates/plugin-sdk/README.md:use vexy_svgo_test_utils::*;
crates/plugin-sdk/README.md-use criterion::{black_box, Criterion};
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-#[bench]
--
crates/plugin-sdk/README.md-### Context-Aware Plugins
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```rust
crates/plugin-sdk/README.md:use vexy_svgo_core::visitor::VisitorContext;
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-impl<'a> Visitor<'a> for MyVisitor<'a> {
crates/plugin-sdk/README.md-    fn visit_element_enter(
--
crates/plugin-sdk/README.md-### Package Structure
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```
crates/plugin-sdk/README.md:my-vexy_svgo-plugin/
crates/plugin-sdk/README.md-├── Cargo.toml
crates/plugin-sdk/README.md-├── README.md
crates/plugin-sdk/README.md-├── LICENSE
--
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```toml
crates/plugin-sdk/README.md-[package]
crates/plugin-sdk/README.md:name = "vexy_svgo-plugin-my-plugin"
crates/plugin-sdk/README.md-version = "0.1.0"
crates/plugin-sdk/README.md-edition = "2021"
crates/plugin-sdk/README.md-authors = ["Your Name <you@example.com>"]
crates/plugin-sdk/README.md-description = "Vexy SVGO plugin for custom optimization"
crates/plugin-sdk/README.md-license = "MIT OR Apache-2.0"
crates/plugin-sdk/README.md:repository = "https://github.com/yourusername/vexy_svgo-plugin-my-plugin"
crates/plugin-sdk/README.md:keywords = ["svg", "optimization", "vexy_svgo", "plugin"]
crates/plugin-sdk/README.md-categories = ["multimedia::images", "web-programming"]
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-[dependencies]
crates/plugin-sdk/README.md:vexy_svgo-plugin-sdk = "2.0"
crates/plugin-sdk/README.md:vexy_svgo-core = "2.0"
crates/plugin-sdk/README.md-anyhow = "1.0"
crates/plugin-sdk/README.md-serde = { version = "1.0", features = ["derive"] }
crates/plugin-sdk/README.md-serde_json = "1.0"
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-[dev-dependencies]
crates/plugin-sdk/README.md:vexy_svgo-test-utils = "2.0"
crates/plugin-sdk/README.md-criterion = { version = "0.5", features = ["html_reports"] }
crates/plugin-sdk/README.md-tokio = { version = "1.0", features = ["macros"] }
crates/plugin-sdk/README.md-
--
crates/plugin-sdk/README.md-### Color Optimization Plugin
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```rust
crates/plugin-sdk/README.md:use vexy_svgo_plugin_sdk::{Plugin, PluginMetadata};
crates/plugin-sdk/README.md-use regex::Regex;
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-pub struct OptimizeColorsPlugin {
--
crates/plugin-sdk/README.md-### Path Simplification Plugin
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```rust
crates/plugin-sdk/README.md:use vexy_svgo_plugin_sdk::{Plugin, PluginMetadata};
crates/plugin-sdk/README.md:use vexy_svgo_core::path::{PathParser, PathOptimizer};
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-pub struct SimplifyPathsPlugin {
crates/plugin-sdk/README.md-    precision: u8,
--
crates/plugin-sdk/README.md-### Plugin Registry
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```rust
crates/plugin-sdk/README.md:use vexy_svgo_plugin_sdk::registry::PluginRegistry;
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-let mut registry = PluginRegistry::new();
crates/plugin-sdk/README.md-registry.register(Box::new(MyPlugin::default()));
--
crates/plugin-sdk/README.md-### Configuration Helpers
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```rust
crates/plugin-sdk/README.md:use vexy_svgo_plugin_sdk::config::{ConfigBuilder, ValidationRule};
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-let config = ConfigBuilder::new()
crates/plugin-sdk/README.md-    .add_field("threshold", ValidationRule::Float { min: 0.0, max: 1.0 })
--
crates/plugin-sdk/README.md-### Error Handling
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-```rust
crates/plugin-sdk/README.md:use vexy_svgo_plugin_sdk::error::{PluginError, PluginErrorKind};
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-fn process_element(element: &Element) -> Result<(), PluginError> {
crates/plugin-sdk/README.md-    if element.name.is_empty() {
--
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-## Support
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md:- [Plugin Development Guide](https://docs.vexy_svgo.org/plugins)
crates/plugin-sdk/README.md:- [API Reference](https://docs.rs/vexy_svgo-plugin-sdk)
crates/plugin-sdk/README.md:- [Examples Repository](https://github.com/twardoch/vexy_svgo/tree/main/examples)
crates/plugin-sdk/README.md:- [Community Discord](https://discord.gg/vexy_svgo)
crates/plugin-sdk/README.md-
crates/plugin-sdk/README.md-## License
crates/plugin-sdk/README.md-
--
crates/plugin-sdk/src/plugins/remove_raster_images.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_raster_images.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_raster_images.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_raster_images.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_raster_images.rs-
crates/plugin-sdk/src/plugins/remove_raster_images.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_raster_images.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/move_group_attrs_to_elems.rs-#[cfg(test)]
crates/plugin-sdk/src/plugins/move_group_attrs_to_elems.rs-mod tests {
crates/plugin-sdk/src/plugins/move_group_attrs_to_elems.rs-    use super::*;
crates/plugin-sdk/src/plugins/move_group_attrs_to_elems.rs:    use vexy_svgo_core::ast::{Element, Node};
crates/plugin-sdk/src/plugins/move_group_attrs_to_elems.rs-
crates/plugin-sdk/src/plugins/move_group_attrs_to_elems.rs-    #[test]
crates/plugin-sdk/src/plugins/move_group_attrs_to_elems.rs-    fn test_plugin_info() {
--
crates/plugin-sdk/src/plugins/remove_metadata.rs-use anyhow::Result;
crates/plugin-sdk/src/plugins/remove_metadata.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/remove_metadata.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/remove_metadata.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_metadata.rs-
crates/plugin-sdk/src/plugins/remove_metadata.rs-/// Configuration parameters for remove metadata plugin (currently empty)
crates/plugin-sdk/src/plugins/remove_metadata.rs-#[derive(Debug, Clone, Serialize, Deserialize)]
--
crates/plugin-sdk/src/plugins/remove_metadata.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_metadata.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_metadata.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_metadata.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_metadata.rs-
crates/plugin-sdk/src/plugins/remove_metadata.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_metadata.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/tests.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/tests.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/tests.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/tests.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/tests.rs-
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/tests.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/tests.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/remove_scripts.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_scripts.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_scripts.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_scripts.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_scripts.rs-
crates/plugin-sdk/src/plugins/remove_scripts.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_scripts.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/unknown_elements.rs-// this_file: crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/unknown_elements.rs
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/unknown_elements.rs-
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/unknown_elements.rs-use std::collections::HashSet;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/unknown_elements.rs:use vexy_svgo_core::ast::Element;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/unknown_elements.rs-
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/unknown_elements.rs-/// Known SVG elements (simplified list)
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/unknown_elements.rs-pub(crate) fn known_elements() -> &'static HashSet<&'static str> {
--
crates/plugin-sdk/src/plugins/merge_styles.rs-use anyhow::Result;
crates/plugin-sdk/src/plugins/merge_styles.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/merge_styles.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/merge_styles.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/merge_styles.rs-
crates/plugin-sdk/src/plugins/merge_styles.rs-/// Configuration parameters for merge styles plugin (currently empty)
crates/plugin-sdk/src/plugins/merge_styles.rs-#[derive(Debug, Clone, Serialize, Deserialize)]
--
crates/plugin-sdk/src/plugins/merge_styles.rs-    use super::*;
crates/plugin-sdk/src/plugins/merge_styles.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/merge_styles.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/merge_styles.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/merge_styles.rs-
crates/plugin-sdk/src/plugins/merge_styles.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/merge_styles.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/remove_useless_defs.rs-
crates/plugin-sdk/src/plugins/remove_useless_defs.rs-use crate::Plugin;
crates/plugin-sdk/src/plugins/remove_useless_defs.rs-use anyhow::Result;
crates/plugin-sdk/src/plugins/remove_useless_defs.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_useless_defs.rs:use vexy_svgo_core::visitor::Visitor;
crates/plugin-sdk/src/plugins/remove_useless_defs.rs-
crates/plugin-sdk/src/plugins/remove_useless_defs.rs-/// Plugin that removes useless definitions from SVG documents
crates/plugin-sdk/src/plugins/remove_useless_defs.rs-#[derive(Default)]
--
crates/plugin-sdk/src/plugins/remove_useless_defs.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_useless_defs.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_useless_defs.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_useless_defs.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_useless_defs.rs-
crates/plugin-sdk/src/plugins/remove_useless_defs.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_useless_defs.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/default_attrs.rs-
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/default_attrs.rs-use std::collections::HashMap;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/default_attrs.rs-use std::collections::HashSet;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/default_attrs.rs:use vexy_svgo_core::ast::Element;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/default_attrs.rs-use crate::plugins::remove_unknowns_and_defaults::RemoveUnknownsAndDefaultsConfig;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/default_attrs.rs-
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/default_attrs.rs-/// Known SVG attributes (simplified list)
--
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-use std::collections::HashSet;
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-use std::sync::LazyLock;
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs:use vexy_svgo_core::visitor::Visitor;
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-/// Default editor namespaces to remove
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-static EDITOR_NAMESPACES: LazyLock<HashSet<&'static str>> = LazyLock::new(|| {
--
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-    fn apply(&self, document: &mut Document) -> Result<()> {
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-        let mut visitor = EditorsNSDataRemovalVisitor::new(self.config.clone());
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs:        vexy_svgo_core::visitor::walk_document(&mut visitor, document)?;
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-        Ok(())
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-    }
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-}
--
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_editors_ns_data.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/remove_view_box.rs-
crates/plugin-sdk/src/plugins/remove_view_box.rs-    fn apply(&self, document: &mut Document) -> anyhow::Result<()> {
crates/plugin-sdk/src/plugins/remove_view_box.rs-        let mut visitor = ViewBoxRemovalVisitor::new();
crates/plugin-sdk/src/plugins/remove_view_box.rs:        vexy_svgo_core::visitor::walk_document(&mut visitor, document)?;
crates/plugin-sdk/src/plugins/remove_view_box.rs-        Ok(())
crates/plugin-sdk/src/plugins/remove_view_box.rs-    }
crates/plugin-sdk/src/plugins/remove_view_box.rs-}
--
crates/plugin-sdk/src/plugins/remove_view_box.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_view_box.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_view_box.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_view_box.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_view_box.rs-
crates/plugin-sdk/src/plugins/remove_view_box.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_view_box.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-    fn apply(&self, document: &mut Document) -> Result<()> {
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-        // First pass: collect all IDs and references
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-        let mut collector = CleanupIdsVisitor::new(self.config.clone());
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs:        vexy_svgo_core::visitor::walk_document(&mut collector, document)?;
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-        
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-        // Check if we should skip processing
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-        if !collector.config.force && (collector.has_scripts || collector.has_styles) {
--
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-            id_mappings: &id_mappings,
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-            current_path: Vec::new(),
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-        };
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs:        vexy_svgo_core::visitor::walk_document(&mut applier, document)?;
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-        Ok(())
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-    }
--
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-    use super::*;
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/cleanup_ids/mod.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-use crate::Plugin;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-use anyhow::Result;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs:use vexy_svgo_core::visitor::Visitor;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-use self::default_attrs::should_remove_attribute;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-use self::unknown_elements::should_remove_unknown_element;
--
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-    fn apply(&self, document: &mut Document) -> anyhow::Result<()> {
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-        let mut visitor = UnknownsAndDefaultsRemovalVisitor::new(self.config.clone());
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs:        vexy_svgo_core::visitor::walk_document(&mut visitor, document)?;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-        Ok(())
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-    }
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-}
--
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_unknowns_and_defaults/mod.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs-use serde::{Deserialize, Serialize};
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs-use serde_json::Value;
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs-use std::collections::HashSet;
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs-
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs-/// Configuration parameters for remove non-inheritable group attributes plugin (currently empty)
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs-#[derive(Debug, Clone, Serialize, Deserialize)]
--
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs-    use super::*;
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs-
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/remove_non_inheritable_group_attrs.rs-        let mut element = Element::new(name);
--
crates/plugin-sdk/src/plugins/collapse_groups.rs-use crate::Plugin;
crates/plugin-sdk/src/plugins/collapse_groups.rs-use anyhow::Result;
crates/plugin-sdk/src/plugins/collapse_groups.rs-use std::collections::HashSet;
crates/plugin-sdk/src/plugins/collapse_groups.rs:use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/collapse_groups.rs:use vexy_svgo_core::visitor::Visitor;
crates/plugin-sdk/src/plugins/collapse_groups.rs-
crates/plugin-sdk/src/plugins/collapse_groups.rs-/// Plugin that collapses unnecessary group elements
crates/plugin-sdk/src/plugins/collapse_groups.rs-#[derive(Default)]
--
crates/plugin-sdk/src/plugins/collapse_groups.rs-
crates/plugin-sdk/src/plugins/collapse_groups.rs-    fn apply(&self, document: &mut Document) -> anyhow::Result<()> {
crates/plugin-sdk/src/plugins/collapse_groups.rs-        let mut visitor = GroupCollapseVisitor::new();
crates/plugin-sdk/src/plugins/collapse_groups.rs:        vexy_svgo_core::visitor::walk_document(&mut visitor, document)?;
crates/plugin-sdk/src/plugins/collapse_groups.rs-        Ok(())
crates/plugin-sdk/src/plugins/collapse_groups.rs-    }
crates/plugin-sdk/src/plugins/collapse_groups.rs-}
--
crates/plugin-sdk/src/plugins/collapse_groups.rs-    use super::*;
crates/plugin-sdk/src/plugins/collapse_groups.rs-    use serde_json::json;
crates/plugin-sdk/src/plugins/collapse_groups.rs-    use std::borrow::Cow;
crates/plugin-sdk/src/plugins/collapse_groups.rs:    use vexy_svgo_core::ast::{Document, Element, Node};
crates/plugin-sdk/src/plugins/collapse_groups.rs-
crates/plugin-sdk/src/plugins/collapse_groups.rs-    fn create_element(name: &'static str) -> Element<'static> {
crates/plugin-sdk/src/plugins/collapse_groups.rs-        let mut element = Element::new(name);
--
docs/usage.md-
docs/usage.md-# Vexy SVGO Usage
docs/usage.md-
docs/usage.md:`vexy_svgo` provides a powerful and efficient way to optimize SVG files, leveraging the performance benefits of Rust. It aims for API compatibility with `svgo` where applicable, making the transition for users familiar with the JavaScript version as smooth as possible.
docs/usage.md-
docs/usage.md-## Command-Line Interface (CLI)
docs/usage.md-
docs/usage.md:`vexy_svgo` offers a command-line interface with full SVGO compatibility and additional enhancements.
docs/usage.md-
docs/usage.md-### Basic Usage
docs/usage.md-
docs/usage.md-To optimize a single SVG file:
docs/usage.md-
docs/usage.md-```bash
docs/usage.md:vexy_svgo input.svg -o output.svg
docs/usage.md-```
docs/usage.md-
docs/usage.md-To use STDIN/STDOUT (default behavior when no arguments provided):
docs/usage.md-
docs/usage.md-```bash
docs/usage.md:cat input.svg | vexy_svgo > output.svg
docs/usage.md-# or explicitly
docs/usage.md:vexy_svgo -i - -o -
docs/usage.md-```
docs/usage.md-
docs/usage.md-To optimize a string directly:
docs/usage.md-
docs/usage.md-```bash
docs/usage.md:vexy_svgo -s '<svg>...</svg>'
docs/usage.md-```
docs/usage.md-
docs/usage.md-To optimize all SVG files in a folder:
docs/usage.md-
docs/usage.md-```bash
docs/usage.md:vexy_svgo -f input_folder
docs/usage.md-# With recursive processing
docs/usage.md:vexy_svgo -f input_folder -r
docs/usage.md-# With exclusion patterns
docs/usage.md:vexy_svgo -f input_folder -r --exclude "node_modules|build"
docs/usage.md-```
docs/usage.md-
docs/usage.md-### Options
docs/usage.md-
docs/usage.md:`vexy_svgo` CLI options provide full `svgo` compatibility with additional features:
docs/usage.md-
docs/usage.md-#### Input/Output Options
docs/usage.md--   `-i, --input <FILE|DIR|->`: Input file, directory, or STDIN (`-`). Default: STDIN if no args
--
docs/usage.md-
docs/usage.md-```bash
docs/usage.md-# Process multiple files
docs/usage.md:vexy_svgo icon1.svg icon2.svg icon3.svg
docs/usage.md-
docs/usage.md-# Use default STDIN/STDOUT behavior
docs/usage.md:vexy_svgo < input.svg > output.svg
docs/usage.md-
docs/usage.md-# Optimize with specific precision
docs/usage.md:vexy_svgo input.svg -o output.svg -p 3
docs/usage.md-
docs/usage.md-# Pretty print with 4-space indentation
docs/usage.md:vexy_svgo input.svg -o output.svg --pretty --indent 4
docs/usage.md-
docs/usage.md-# Process folder with exclusions
docs/usage.md:vexy_svgo -f ./assets -r --exclude "temp|backup" --exclude ".*\.min\.svg"
docs/usage.md-
docs/usage.md-# Show optimization statistics
docs/usage.md:vexy_svgo large-file.svg -o optimized.svg
docs/usage.md-# Output: Optimized: 10.5 KB → 7.2 KB (31.4% reduction)
docs/usage.md-```
docs/usage.md-
docs/usage.md-## As a Rust Library
docs/usage.md-
docs/usage.md:`vexy_svgo` can be integrated directly into your Rust projects for programmatic SVG optimization. The core optimization function is designed to be intuitive and efficient.
docs/usage.md-
docs/usage.md-### Basic Example
docs/usage.md-
docs/usage.md:To use `vexy_svgo` in your Rust code, first ensure you've added it to your `Cargo.toml` (as described in the [Installation](/#installation) section). Then, you can use the `optimize` function:
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_svgo::optimize;
docs/usage.md:use vexy_svgo::config::VexySvgoConfig;
docs/usage.md-
docs/usage.md-fn main() {
docs/usage.md-    let svg_string = r#"
--
docs/usage.md-
docs/usage.md-### Configuration
docs/usage.md-
docs/usage.md:The `optimize` function in `vexy_svgo` takes an SVG string and a configuration object, similar to `svgo`'s `optimize(input, config)`.
docs/usage.md-
docs/usage.md-```rust
docs/usage.md-pub struct VexySvgoConfig {
--
docs/usage.md-
docs/usage.md-**Comparison with `svgo`'s Configuration:**
docs/usage.md-
docs/usage.md:`vexy_svgo`'s `VexySvgoConfig` directly maps to `svgo`'s configuration object. The `plugins` array in `svgo` can contain either plugin names (strings) or objects with `name` and `params`. In `vexy_svgo`, this is represented by the `PluginConfig` enum, allowing for both simple enablement and parameter customization.
docs/usage.md-
docs/usage.md-### Example with Custom Plugins
docs/usage.md-
docs/usage.md-```rust
docs/usage.md:use vexy_svgo::optimize;
docs/usage.md:use vexy_svgo::config::{VexySvgoConfig, PluginConfig};
docs/usage.md-use serde_json::json;
docs/usage.md-
docs/usage.md-fn main() {
--
docs/usage.md-
docs/usage.md-## WebAssembly (WASM)
docs/usage.md-
docs/usage.md:`vexy_svgo` is designed to be compiled to WebAssembly, allowing you to run SVG optimization directly in the browser or other WASM environments. This provides a significant performance boost compared to JavaScript-based optimizers in the browser.
docs/usage.md-
docs/usage.md-Further details on WASM usage will be added as the compilation target matures.
