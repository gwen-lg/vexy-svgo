# this_file: .github/workflows/ci-parallel.yml

name: Parallel CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-C link-arg=-s"

jobs:
  # Matrix job that runs different checks in parallel
  parallel-checks:
    name: ${{ matrix.task.name }}
    runs-on: ${{ matrix.task.os }}
    strategy:
      fail-fast: false
      matrix:
        task:
          - name: "Format"
            os: ubuntu-latest
            cmd: "cargo fmt --all -- --check"
            cache: false
          
          - name: "Clippy"
            os: ubuntu-latest
            cmd: "cargo clippy --workspace --lib --bins -- -D warnings"
            cache: true
          
          - name: "Test Linux"
            os: ubuntu-latest
            cmd: "cargo test --workspace --release"
            cache: true
          
          - name: "Test macOS"
            os: macos-latest
            cmd: "cargo test --workspace --release"
            cache: true
          
          - name: "Test Windows"
            os: windows-latest
            cmd: "cargo test --workspace --release"
            cache: true
          
          - name: "Doc Check"
            os: ubuntu-latest
            cmd: "cargo doc --no-deps --workspace"
            cache: true
          
          - name: "WASM Check"
            os: ubuntu-latest
            cmd: "cd crates/wasm && cargo check --target wasm32-unknown-unknown"
            cache: true
            target: wasm32-unknown-unknown

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: ${{ contains(matrix.task.name, 'Format') && 'rustfmt' || contains(matrix.task.name, 'Clippy') && 'clippy' || '' }}
          targets: ${{ matrix.task.target || '' }}
      
      - name: Configure cargo cache
        if: matrix.task.cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.task.name }}-${{ matrix.task.os }}
          workspaces: ". -> target"
      
      - name: Run ${{ matrix.task.name }}
        run: ${{ matrix.task.cmd }}

  # Single success gate
  ci-complete:
    name: CI Complete
    if: always()
    needs: [parallel-checks]
    runs-on: ubuntu-latest
    steps:
      - name: Verify all checks passed
        if: needs.parallel-checks.result != 'success'
        run: exit 1
      
      - name: Success
        run: echo "All parallel checks completed successfully!"