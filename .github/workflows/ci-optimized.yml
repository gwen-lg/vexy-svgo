# this_file: .github/workflows/ci-optimized.yml

name: CI Optimized

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  # Quick format and lint check (runs in parallel)
  quick-checks:
    name: Format & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-quick-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-quick-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-build-quick-
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy (workspace only, no tests)
        run: cargo clippy --workspace --lib --bins -- -D warnings

  # Main test job with optimizations
  test:
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: quick-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          # Use workspace target directory
          workspaces: ". -> target"
          # Cache on target and Cargo.lock
          key: ${{ matrix.os }}-test
      
      - name: Build workspace (release mode for speed)
        run: cargo build --release --workspace
      
      - name: Run tests (release mode)
        run: cargo test --release --workspace
      
      - name: Check benchmarks compile
        run: cargo check --benches --workspace

  # Minimal WASM check (build only essential parts)
  wasm-check:
    name: WASM Check
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust with WASM target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Cache WASM dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ". -> target"
          key: wasm
      
      - name: Check WASM compilation
        run: |
          cd crates/wasm
          cargo check --target wasm32-unknown-unknown

  # Documentation check (build only, no Jekyll)
  docs-check:
    name: Docs Check
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache for docs
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ". -> target"
          key: docs
      
      - name: Check documentation builds
        env:
          RUSTDOCFLAGS: "-D warnings --cfg docsrs"
        run: cargo doc --no-deps --workspace

  # Combined coverage job (only on Linux, after tests pass)
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache for coverage
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ". -> target"
          key: coverage
      
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      
      - name: Generate coverage report
        run: cargo llvm-cov --workspace --lcov --output-path lcov.info
      
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false

  # Summary job to ensure all checks pass
  ci-success:
    name: CI Success
    if: ${{ success() }}
    needs: [quick-checks, test, wasm-check, docs-check]
    runs-on: ubuntu-latest
    steps:
      - name: CI Success
        run: echo "All CI checks passed!"