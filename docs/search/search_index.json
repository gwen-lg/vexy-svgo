{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vexy SVGO","text":"<p>{: .fs-9 }</p> <p>High-performance SVG optimizer - Native Rust port of SVGO</p> <p>Get Started Now Try Demo View on GitHub</p>"},{"location":"#12x-faster-than-svgo","title":"\u26a1 12x Faster than SVGO","text":"<p>{: .text-center }</p> <p>Native Rust performance with full SVGO API compatibility</p> \ud83d\ude80 Native Performance Rust-powered optimization \ud83d\udd04 Drop-in Replacement Full SVGO compatibility \ud83c\udf10 WebAssembly Ready Runs in browsers"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#try-online-demo","title":"Try Online Demo","text":"<p>Experience Vexy SVGO's power directly in your browser with our interactive WebAssembly demo.</p> <p>\ud83c\udfae Launch Interactive Demo \u2192</p>"},{"location":"#install-locally","title":"Install Locally","text":"<pre><code># Download pre-built binary\ncurl -sSL https://github.com/vexyart/vexy-svgo/releases/latest/download/vexy-svgo-macos.tar.gz | tar -xz\n\n# Or build from source\ngit clone https://github.com/vexyart/vexy-svgo\ncd vexy-svgo\ncargo build --release\n</code></pre>"},{"location":"#use-as-library","title":"Use as Library","text":"<pre><code>use vexy_svgo::{optimize, Config};\n\nlet svg = \"&lt;svg&gt;...&lt;/svg&gt;\";\nlet config = Config::default();\nlet result = optimize(svg, &amp;config)?;\nprintln!(\"Optimized: {}\", result.data);\n</code></pre>"},{"location":"#documentation-paths","title":"Documentation Paths","text":"\ud83d\udc64 End Users <p>Getting started with Vexy SVGO CLI and basic usage.</p> \ud83d\udcd6 User Guide \ud83d\udce6 Installation \ud83d\udcbb CLI Usage \u2699\ufe0f Configuration \ud83c\udfae Interactive Demo \ud83d\udc68\u200d\ud83d\udcbb Developers <p>APIs, architecture, and contributing to Vexy SVGO.</p> \ud83d\udd27 Developer Guide \ud83d\udcda API Reference \ud83c\udfd7\ufe0f Architecture \ud83e\udde9 Plugin Development \ud83e\udd1d Contributing"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83c\udfc6 Superior Performance: 12x faster than SVGO on npx, 7x faster on bunx</li> <li>\ud83d\udd17 API Compatible: Drop-in replacement for existing SVGO workflows  </li> <li>\ud83e\udde9 50+ Plugins: Full port of SVGO's optimization plugins</li> <li>\ud83c\udf10 WebAssembly: Runs in browsers with native performance</li> <li>\u26a1 Multi-platform: Native binaries for macOS, Windows, and Linux</li> <li>\ud83d\udce6 Multiple Interfaces: CLI, Rust library, and WASM module</li> <li>\ud83d\udee1\ufe0f Production Ready: 353/353 tests passing, battle-tested</li> </ul>"},{"location":"#performance-comparison","title":"Performance Comparison","text":"Tool NPX Time Bunx Time Native Time SVGO 847ms 112ms - Vexy SVGO 71ms 16ms 8ms Speedup 12x 7x 105x <p>Benchmark: 100 complex SVG files, average optimization time</p>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>\ud83d\udc1b Bug Reports: GitHub Issues</li> <li>\ud83d\udcac Discussions: GitHub Discussions </li> <li>\ud83d\udce7 Contact: Project Maintainers</li> <li>\ud83d\udcd6 Documentation: You're reading it!</li> </ul> <p>Vexy SVGO is open source software released under the MIT License.</p>"},{"location":"developer/","title":"Developer Guide","text":"<p>{: .no_toc }</p> <p>APIs, architecture, and contributing to Vexy SVGO</p>"},{"location":"developer/#table-of-contents","title":"Table of contents","text":"<p>{: .no_toc .text-delta }</p> <ol> <li>TOC</li> </ol>"},{"location":"developer/#overview","title":"Overview","text":"<p>Vexy SVGO is designed for both end-users and developers. This section covers the technical aspects of the project, including APIs, architecture, and how to contribute.</p>"},{"location":"developer/#for-developers","title":"For Developers","text":"<ul> <li>\ud83d\udd27 Rust API: Use Vexy SVGO as a library in Rust projects</li> <li>\ud83c\udf10 WebAssembly: Integrate into web applications and Node.js</li> <li>\ud83e\udde9 Plugin Development: Create custom optimization plugins</li> <li>\ud83e\udd1d Contributing: Help improve the project</li> </ul>"},{"location":"developer/#architecture-overview","title":"Architecture Overview","text":"<p>Vexy SVGO follows a modular architecture inspired by SVGO but optimized for Rust:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502   Input SVG     \u2502\u2500\u2500\u2500\u25b6\u2502   Parser        \u2502\u2500\u2500\u2500\u25b6\u2502   AST           \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                       \u2502\n                                                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502  Optimized SVG  \u2502\u25c0\u2500\u2500\u2500\u2502  Stringifier    \u2502\u25c0\u2500\u2500\u2500\u2502  Plugin Engine  \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"developer/#core-components","title":"Core Components","text":"<ol> <li>Parser: Converts SVG strings to Abstract Syntax Tree (AST)</li> <li>Plugin Engine: Applies optimization plugins to the AST</li> <li>Stringifier: Converts optimized AST back to SVG string</li> <li>CLI: Command-line interface for end users</li> </ol>"},{"location":"developer/#quick-start-for-developers","title":"Quick Start for Developers","text":""},{"location":"developer/#1-use-as-rust-library","title":"1. Use as Rust Library","text":"<p>Add to your <code>Cargo.toml</code>:</p> <pre><code>[dependencies]\nvexy-svgo = { git = \"https://github.com/vexyart/vexy-svgo\" }\n</code></pre> <p>Basic usage:</p> <pre><code>use vexy_svgo::{optimize, Config};\n\nfn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let svg = r#\"&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"&gt;\n        &lt;circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"red\"/&gt;\n    &lt;/svg&gt;\"#;\n\n    let config = Config::default();\n    let result = optimize(svg, &amp;config)?;\n\n    println!(\"Original: {} bytes\", svg.len());\n    println!(\"Optimized: {} bytes\", result.data.len());\n    println!(\"Reduction: {:.1}%\", result.size_reduction);\n\n    Ok(())\n}\n</code></pre>"},{"location":"developer/#2-webassembly-integration","title":"2. WebAssembly Integration","text":"<pre><code>// Load the WASM module\nimport init, { optimize } from './pkg/vexy_svgo_wasm.js';\n\nasync function optimizeSvg() {\n    await init();\n\n    const svg = '&lt;svg&gt;...&lt;/svg&gt;';\n    const config = {\n        multipass: true,\n        plugins: {\n            removeComments: true,\n            removeEmptyAttrs: true\n        }\n    };\n\n    const result = optimize(svg, config);\n    console.log('Optimized:', result.data);\n}\n</code></pre>"},{"location":"developer/#3-create-custom-plugin","title":"3. Create Custom Plugin","text":"<pre><code>use vexy_svgo_plugin_sdk::{Plugin, PluginMetadata};\nuse vexy_svgo_core::{ast::Document, visitor::Visitor};\n\npub struct MyCustomPlugin;\n\nimpl Plugin for MyCustomPlugin {\n    fn metadata(&amp;self) -&gt; PluginMetadata {\n        PluginMetadata {\n            name: \"myCustomPlugin\".to_string(),\n            description: \"My custom optimization\".to_string(),\n            version: \"1.0.0\".to_string(),\n            author: Some(\"Your Name\".to_string()),\n            tags: vec![\"custom\"],\n            experimental: false,\n        }\n    }\n\n    fn optimize(&amp;mut self, document: &amp;mut Document) -&gt; anyhow::Result&lt;()&gt; {\n        // Your optimization logic here\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"developer/#developer-documentation-sections","title":"Developer Documentation Sections","text":"\ud83d\udcda API Reference <p>Complete Rust API documentation</p> Read docs \u2192 \ud83c\udfd7\ufe0f Architecture <p>Deep dive into system design</p> Read more \u2192 \ud83e\udde9 Plugin Development <p>Create custom optimization plugins</p> Learn how \u2192 \ud83e\udd1d Contributing <p>Help improve Vexy SVGO</p> Get started \u2192"},{"location":"developer/#development-setup","title":"Development Setup","text":""},{"location":"developer/#prerequisites","title":"Prerequisites","text":"<pre><code># Install Rust\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Install additional tools\ncargo install wasm-pack  # For WebAssembly builds\n</code></pre>"},{"location":"developer/#build-from-source","title":"Build from Source","text":"<pre><code># Clone repository\ngit clone https://github.com/vexyart/vexy-svgo\ncd vexy-svgo\n\n# Build all components\n./build.sh all\n\n# Or build specific components\n./build.sh native     # CLI and library\n./build.sh wasm       # WebAssembly\n./build.sh docs       # Documentation\n</code></pre>"},{"location":"developer/#run-tests","title":"Run Tests","text":"<pre><code># Run all tests\ncargo test\n\n# Run specific test suites\ncargo test --package vexy-svgo-core\ncargo test --package vexy-svgo-cli\n\n# Run benchmarks\ncargo bench\n</code></pre>"},{"location":"developer/#api-examples","title":"API Examples","text":""},{"location":"developer/#basic-optimization","title":"Basic Optimization","text":"<pre><code>use vexy_svgo::{optimize, Config};\n\nlet svg = \"&lt;svg&gt;...&lt;/svg&gt;\";\nlet result = optimize(svg, &amp;Config::default())?;\nprintln!(\"Optimized: {}\", result.data);\n</code></pre>"},{"location":"developer/#custom-configuration","title":"Custom Configuration","text":"<pre><code>use vexy_svgo::{optimize, Config, PluginConfig};\n\nlet config = Config {\n    multipass: true,\n    plugins: vec![\n        PluginConfig::Enabled(\"removeComments\".to_string()),\n        PluginConfig::WithParams {\n            name: \"convertColors\".to_string(),\n            params: serde_json::json!({\n                \"currentColor\": true\n            })\n        }\n    ],\n    js2svg: Js2SvgConfig {\n        pretty: true,\n        indent: 2,\n        ..Default::default()\n    },\n    ..Default::default()\n};\n\nlet result = optimize(svg, &amp;config)?;\n</code></pre>"},{"location":"developer/#streaming-interface","title":"Streaming Interface","text":"<pre><code>use vexy_svgo::stream::{SvgOptimizer, StreamConfig};\n\nlet mut optimizer = SvgOptimizer::new(StreamConfig::default());\n\n// Process large files in chunks\noptimizer.write_chunk(svg_chunk_1)?;\noptimizer.write_chunk(svg_chunk_2)?;\nlet result = optimizer.finalize()?;\n</code></pre>"},{"location":"developer/#webassembly-development","title":"WebAssembly Development","text":""},{"location":"developer/#building-wasm-module","title":"Building WASM Module","text":"<pre><code># Build for web\nwasm-pack build crates/wasm --target web --out-dir pkg-web\n\n# Build for Node.js\nwasm-pack build crates/wasm --target nodejs --out-dir pkg-node\n\n# Build for bundlers\nwasm-pack build crates/wasm --target bundler --out-dir pkg-bundler\n</code></pre>"},{"location":"developer/#integration-examples","title":"Integration Examples","text":""},{"location":"developer/#react-component","title":"React Component","text":"<pre><code>import { useEffect, useState } from 'react';\nimport init, { optimize } from 'vexy-svgo-wasm';\n\nfunction SvgOptimizer() {\n    const [wasmReady, setWasmReady] = useState(false);\n\n    useEffect(() =&gt; {\n        init().then(() =&gt; setWasmReady(true));\n    }, []);\n\n    const optimizeSvg = (svg) =&gt; {\n        if (!wasmReady) return;\n        return optimize(svg, { multipass: true });\n    };\n\n    // Component implementation...\n}\n</code></pre>"},{"location":"developer/#nodejs-script","title":"Node.js Script","text":"<pre><code>const { optimize } = require('vexy-svgo-wasm');\n\nasync function optimizeFiles() {\n    const fs = require('fs').promises;\n\n    const svg = await fs.readFile('input.svg', 'utf8');\n    const result = optimize(svg, {\n        plugins: {\n            removeComments: true,\n            removeEmptyAttrs: true\n        }\n    });\n\n    await fs.writeFile('output.svg', result.data);\n    console.log(`Reduced size by ${result.sizeReduction}%`);\n}\n</code></pre>"},{"location":"developer/#performance-considerations","title":"Performance Considerations","text":""},{"location":"developer/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Batch Processing: Process multiple files together</li> <li>Plugin Selection: Only enable needed plugins</li> <li>Memory Management: Use streaming for large files</li> <li>Caching: Cache parsed ASTs when processing similar files</li> </ol>"},{"location":"developer/#benchmarking","title":"Benchmarking","text":"<pre><code>use criterion::{black_box, criterion_group, criterion_main, Criterion};\nuse vexy_svgo::{optimize, Config};\n\nfn benchmark_optimize(c: &amp;mut Criterion) {\n    let svg = include_str!(\"../testdata/large.svg\");\n    let config = Config::default();\n\n    c.bench_function(\"optimize large svg\", |b| {\n        b.iter(|| optimize(black_box(svg), black_box(&amp;config)))\n    });\n}\n\ncriterion_group!(benches, benchmark_optimize);\ncriterion_main!(benches);\n</code></pre>"},{"location":"developer/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Documentation: Continue reading the developer guides</li> <li>\ud83d\udc1b Issues: Report bugs on GitHub Issues</li> <li>\ud83d\udcac Discussions: Ask questions in GitHub Discussions</li> <li>\ud83d\udce7 Contact: Email the maintainers</li> </ul> <p>Ready to dive deeper? Continue to API Reference \u2192</p>"},{"location":"developer/architecture/","title":"Vexy SVGO Architecture","text":"<p><code>vexy_svgo</code> is designed as a native Rust port of <code>svgo</code>, aiming to replicate its core architectural principles while leveraging Rust's strengths for performance and reliability. The architecture closely mirrors <code>svgo</code>'s modular design, consisting of a core engine, parser, stringifier, and a robust plugin system.</p>"},{"location":"developer/architecture/#core-components","title":"Core Components","text":""},{"location":"developer/architecture/#1-core-engine-vexy_svgosrcoptimizerrs","title":"1. Core Engine (<code>vexy_svgo/src/optimizer.rs</code>)","text":"<p>Similar to <code>svgo</code>'s <code>lib/svgo.js</code>, the <code>vexy_svgo</code> core engine orchestrates the SVG optimization process. It takes an SVG string and a configuration object, then applies a pipeline of plugins to the parsed SVG Abstract Syntax Tree (AST). The engine manages the order of plugin execution and handles multi-pass optimizations if configured.</p>"},{"location":"developer/architecture/#2-parser-vexy_svgosrcparserrs","title":"2. Parser (<code>vexy_svgo/src/parser.rs</code>)","text":"<p>The parser component is responsible for transforming an SVG string into an Abstract Syntax Tree (AST). In <code>svgo</code>, this is handled by <code>lib/parser.js</code>, which uses a SAX-like approach. <code>vexy_svgo</code> implements its own efficient SVG parser in Rust, converting the raw SVG XML into a structured, traversable AST representation that plugins can operate on.</p>"},{"location":"developer/architecture/#3-plugins-vexy_svgosrcplugins","title":"3. Plugins (<code>vexy_svgo/src/plugins/</code>)","text":"<p>Plugins are the heart of <code>vexy_svgo</code>'s optimization capabilities. Each plugin is a self-contained module that performs a specific optimization or transformation on the SVG AST. <code>vexy_svgo</code>'s plugin system is designed to be compatible with <code>svgo</code>'s plugin API concepts, allowing for a systematic porting of existing <code>svgo</code> plugins.</p> <ul> <li>Modularity: Each optimization is encapsulated within its own plugin, promoting code organization and reusability.</li> <li>AST Transformation: Plugins receive and modify the SVG AST, enabling complex manipulations of SVG elements, attributes, and styles.</li> <li>Configurability: Plugins can be enabled, disabled, and configured with specific parameters via the <code>VexySvgoConfig</code> object.</li> </ul>"},{"location":"developer/architecture/#4-stringifier-vexy_svgosrcstringifierrs","title":"4. Stringifier (<code>vexy_svgo/src/stringifier.rs</code>)","text":"<p>After all plugins have processed the AST, the stringifier component converts the optimized AST back into a minified SVG string. This component is analogous to <code>svgo</code>'s <code>lib/stringifier.js</code>. The stringifier handles proper XML serialization, including attribute ordering, whitespace management, and numeric precision, to ensure the smallest possible output size while maintaining valid SVG syntax.</p>"},{"location":"developer/architecture/#5-command-line-interface-cli-vexy_svgosrcbinvexy_svgors","title":"5. Command-Line Interface (CLI) (<code>vexy_svgo/src/bin/vexy_svgo.rs</code>)","text":"<p>The <code>vexy_svgo</code> CLI provides a user-friendly interface for optimizing SVG files directly from the terminal. It parses command-line arguments, loads configuration, invokes the core optimization engine, and outputs the results. This component mirrors the functionality of <code>svgo</code>'s <code>bin/svgo</code> and <code>lib/svgo-node.js</code>.</p>"},{"location":"developer/architecture/#design-principles","title":"Design Principles","text":"<p><code>vexy_svgo</code>'s architecture is guided by several key design principles:</p> <ul> <li>Performance: Leveraging Rust's capabilities for zero-cost abstractions, memory safety, and concurrency to achieve superior optimization speeds.</li> <li>Functional Parity: Ensuring that <code>vexy_svgo</code> produces identical optimization results to <code>svgo</code> for the same inputs and configurations.</li> <li>Modularity: Maintaining a clear separation of concerns between parsing, optimization, and stringification, and promoting a plugin-based approach for extensibility.</li> <li>API Compatibility: Designing the Rust API to be conceptually similar to <code>svgo</code>'s JavaScript API where appropriate, to ease migration for developers.</li> <li>WASM Readiness: Structuring the codebase to facilitate efficient compilation to WebAssembly, enabling broad deployment scenarios.</li> </ul> <p>By adhering to these principles, <code>vexy_svgo</code> aims to be a robust, high-performance, and functionally equivalent alternative to <code>svgo</code> in the Rust ecosystem.</p>"},{"location":"developer/benchmarks/","title":"Performance Benchmarks","text":"<p>This page shows performance benchmarks comparing Vexy SVGO (our Rust implementation) against SVGO.</p> <p>Last Updated: 2025-07-06 02:20 UTC</p>"},{"location":"developer/benchmarks/#test-configuration","title":"Test Configuration","text":"Parameter Value Test Files 2 SVG files (simple.svg, complex.svg) Test Method Wall-clock timing Test Directory <code>testdata</code>"},{"location":"developer/benchmarks/#results-summary","title":"Results Summary","text":"Tool Version Total Time (s) Per File (ms) Success Rate Speedup Vexy SVGO 1.5.8 0.141 70.5 100% 22.8x faster SVGO (Bun) 4.0.0 3.210 1605 100% baseline"},{"location":"developer/benchmarks/#key-findings","title":"Key Findings","text":"<p>\ud83d\ude80 Vexy SVGO is 22.8x faster than SVGO when using Bun runtime</p> <p>\u26a1 Per-file processing: Vexy SVGO averages 70.5ms vs SVGO's 1605ms per file</p> <p>\u2705 Reliability: Both tools achieved 100% success rate</p> <p>\ud83c\udfc1 Startup time: SVGO has significant startup overhead (~3s) vs Vexy SVGO's instant startup</p>"},{"location":"developer/benchmarks/#performance-comparison-chart","title":"Performance Comparison Chart","text":"<pre><code>Vexy SVGO     \u2588\u2588\u2588\u2588 0.141s (70.5ms per file)\nSVGO     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 3.210s (1605ms per file)\n</code></pre>"},{"location":"developer/benchmarks/#detailed-results","title":"Detailed Results","text":""},{"location":"developer/benchmarks/#processing-times","title":"Processing Times","text":"<p>Vexy SVGO: 0.141s total time - simple.svg: instant - complex.svg: instant - Total files: 2 - Average per file: 70.5ms</p> <p>SVGO: 3.210s total time - simple.svg: 4ms processing + startup overhead - complex.svg: 106ms processing + startup overhead - Total files: 2 - Average per file: 1605ms (including 3s startup time)</p>"},{"location":"developer/benchmarks/#performance-analysis","title":"Performance Analysis","text":"<ul> <li>Pure processing time: SVGO is competitive (4-106ms per file)</li> <li>Startup overhead: SVGO has ~3s startup time, Vexy SVGO starts instantly</li> <li>Overall performance: Vexy SVGO wins due to zero startup time</li> </ul>"},{"location":"developer/benchmarks/#test-methodology","title":"Test Methodology","text":"<ul> <li>Test Files: 2 representative SVG files (simple.svg, complex.svg)</li> <li>Measurement: Wall-clock time using <code>time</code> command</li> <li>Environment: macOS 14.5, Apple M2, 16GB RAM</li> <li>Vexy SVGO: Native Rust binary (release build)</li> <li>SVGO: JavaScript via Bun runtime (<code>bunx --bun svgo</code>)</li> <li>Testing approach: Real-world usage simulation</li> </ul>"},{"location":"developer/benchmarks/#file-size-analysis","title":"File Size Analysis","text":"<p>Both tools achieved similar optimization results:</p> <ul> <li>simple.svg: Vexy SVGO 0.0% reduction, SVGO 0.9% reduction</li> <li>complex.svg: Vexy SVGO 0.0% reduction, SVGO 0.2% reduction</li> </ul> <p>Note: These test files were already well-optimized, so minimal size reduction was expected.</p>"},{"location":"developer/benchmarks/#running-your-own-benchmarks","title":"Running Your Own Benchmarks","text":"<p>To generate fresh benchmark results:</p> <pre><code># Build Vexy SVGO\ncargo build --release\n\n# Run comprehensive benchmarks\n./scripts/benchmark-comprehensive.sh testdata 3 10 json true true\n\n# Or run simple timing test\ntime ./target/release/vexy_svgo your_file.svg\ntime bunx --bun svgo your_file.svg\n</code></pre>"},{"location":"developer/benchmarks/#compatibility","title":"Compatibility","text":"<p>Vexy SVGO maintains full compatibility with SVGO:</p> <ul> <li>Same optimization algorithms</li> <li>Same configuration options  </li> <li>Same output quality</li> <li>51/53 plugins implemented (96.2% complete)</li> </ul> <p>Want to try Vexy SVGO? Download the latest release or build from source.</p>"},{"location":"developer/plugin-development/","title":"Plugin Development Tutorial","text":"<p>This comprehensive guide will walk you through creating custom plugins for Vexy SVGO, from basic concepts to advanced techniques.</p>"},{"location":"developer/plugin-development/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Plugin Architecture</li> <li>Setting Up Your Development Environment</li> <li>Creating Your First Plugin</li> <li>Advanced Plugin Development</li> <li>Testing Your Plugin</li> <li>Publishing and Distribution</li> <li>Best Practices</li> </ol>"},{"location":"developer/plugin-development/#introduction","title":"Introduction","text":"<p>Vexy SVGO plugins are Rust modules that implement the <code>Plugin</code> trait from the <code>vexy-svgo-plugin-sdk</code>. They can traverse and modify the SVG AST (Abstract Syntax Tree) to perform optimizations.</p>"},{"location":"developer/plugin-development/#why-create-plugins","title":"Why Create Plugins?","text":"<ul> <li>Custom Optimizations: Implement domain-specific optimizations</li> <li>Extended Functionality: Add features beyond standard SVGO compatibility</li> <li>Performance: Native Rust performance for complex transformations</li> <li>Integration: Seamlessly integrate with existing Vexy SVGO workflows</li> </ul>"},{"location":"developer/plugin-development/#plugin-architecture","title":"Plugin Architecture","text":""},{"location":"developer/plugin-development/#core-concepts","title":"Core Concepts","text":"<ol> <li>AST (Abstract Syntax Tree): The parsed representation of an SVG document</li> <li>Visitor Pattern: Plugins traverse the AST using the visitor pattern</li> <li>Plugin Trait: The interface all plugins must implement</li> <li>Configuration: Plugins can accept parameters for customization</li> </ol>"},{"location":"developer/plugin-development/#plugin-lifecycle","title":"Plugin Lifecycle","text":"<pre><code>SVG Input \u2192 Parser \u2192 AST \u2192 Plugin Pipeline \u2192 Modified AST \u2192 Stringifier \u2192 Optimized SVG\n</code></pre>"},{"location":"developer/plugin-development/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":""},{"location":"developer/plugin-development/#prerequisites","title":"Prerequisites","text":"<pre><code># Install Rust\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Clone the Vexy SVGO repository\ngit clone https://github.com/vexyart/vexy-svgo\ncd vexy-svgo\n\n# Build the project\n./build.sh\n</code></pre>"},{"location":"developer/plugin-development/#project-structure","title":"Project Structure","text":"<p>Create a new directory for your plugin:</p> <pre><code>mkdir -p crates/plugin-sdk/src/plugins/my_custom_plugin\ncd crates/plugin-sdk/src/plugins/my_custom_plugin\n</code></pre>"},{"location":"developer/plugin-development/#creating-your-first-plugin","title":"Creating Your First Plugin","text":"<p>Let's create a simple plugin that adds a custom attribute to all <code>&lt;rect&gt;</code> elements.</p>"},{"location":"developer/plugin-development/#step-1-create-the-plugin-module","title":"Step 1: Create the Plugin Module","text":"<p>Create <code>crates/plugin-sdk/src/plugins/my_custom_plugin/mod.rs</code>:</p> <pre><code>// this_file: crates/plugin-sdk/src/plugins/my_custom_plugin/mod.rs\n\nuse vexy-svgo-plugin-sdk::{Plugin, PluginMetadata};\nuse vexy-svgo-core::visitor::{Visitor, VisitorContext};\nuse vexy-svgo-core::ast::{Document, Element, Node};\nuse anyhow::Result;\nuse serde::{Deserialize, Serialize};\n\n// ... (plugin implementation)\n</code></pre>"},{"location":"developer/plugin-development/#step-2-register-the-plugin","title":"Step 2: Register the Plugin","text":"<p>Add your plugin to <code>crates/plugin-sdk/src/plugins/mod.rs</code>:</p> <pre><code>// Add to the plugin modules\npub mod my_custom_plugin;\n\n// In the create_default_registry function, add:\nregistry.register(Box::new(my_custom_plugin::MyCustomPlugin::new()));\n</code></pre>"},{"location":"developer/plugin-development/#step-3-build-and-test","title":"Step 3: Build and Test","text":"<pre><code># Run tests\ncargo test my_custom_plugin\n\n# Build the project\ncargo build --release\n\n# Test with CLI\necho '&lt;svg&gt;&lt;rect x=\"0\" y=\"0\" width=\"100\" height=\"100\"/&gt;&lt;/svg&gt;' | \\\n  target/release/vexy-svgo --enable myCustomPlugin\n</code></pre>"},{"location":"developer/plugin-development/#advanced-plugin-development","title":"Advanced Plugin Development","text":""},{"location":"developer/plugin-development/#working-with-complex-ast-transformations","title":"Working with Complex AST Transformations","text":"<p>Here's a more advanced plugin that optimizes gradients:</p> <pre><code>// this_file: crates/plugin-sdk/src/plugins/optimize_gradients/mod.rs\n\nuse vexy-svgo-plugin-sdk::Plugin;\nuse vexy-svgo-core::visitor::{Visitor, VisitorContext};\nuse vexy-svgo-core::ast::{Document, Element, Node};\nuse std::collections::{HashMap, HashSet};\n\npub struct OptimizeGradientsPlugin { // ... }\n\nimpl Plugin for OptimizeGradientsPlugin {\n    fn metadata(&amp;self) -&gt; vexy-svgo-plugin-sdk::PluginMetadata {\n        vexy-svgo-plugin-sdk::PluginMetadata {\n            name: \"optimizeGradients\".to_string(),\n            description: \"Removes duplicate gradients and unused gradients\".to_string(),\n            version: \"1.0.0\".to_string(),\n            author: Some(\"Vexy SVGO Team\".to_string()),\n            tags: vec![\"gradients\", \"optimization\", \"cleanup\"],\n            experimental: false,\n        }\n    }\n\n    fn optimize(&amp;mut self, document: &amp;mut Document) -&gt; anyhow::Result&lt;()&gt; {\n        // ...\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"developer/plugin-development/#plugin-communication","title":"Plugin Communication","text":"<p>Plugins can share data through the visitor context:</p> <pre><code>use vexy-svgo-core::visitor::{VisitorContext, ContextData};\n\nimpl&lt;'a&gt; Visitor&lt;'a&gt; for MyPlugin {\n    fn visit_element_enter(\n        &amp;mut self, \n        element: &amp;mut Element&lt;'a&gt;,\n        context: &amp;mut VisitorContext\n    ) -&gt; Result&lt;()&gt; {\n        // ...\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"developer/plugin-development/#testing-your-plugin","title":"Testing Your Plugin","text":""},{"location":"developer/plugin-development/#unit-testing","title":"Unit Testing","text":"<p>Create comprehensive tests in your plugin module:</p> <pre><code>#[cfg(test)]\nmod tests {\n    use super::*;\n    use vexy-svgo-test-utils::{assert_svg_eq, optimize_with_plugin};\n\n    #[test]\n    fn test_removes_duplicate_gradients() {\n        // ...\n    }\n}\n</code></pre>"},{"location":"developer/plugin-development/#integration-testing","title":"Integration Testing","text":"<p>Test your plugin with the full Vexy SVGO pipeline:</p> <pre><code>#[test]\nfn test_plugin_in_pipeline() {\n    let config = Config {\n        plugins: vec![\n            PluginConfig::Name(\"removeComments\".to_string()),\n            PluginConfig::Name(\"myCustomPlugin\".to_string()),\n            PluginConfig::WithParams {\n                name: \"optimizeGradients\".to_string(),\n                params: json!({\"removeUnused\": true}),\n            },\n        ],\n        ..Default::default()\n    };\n\n    let result = optimize_with_config(svg_input, config).unwrap();\n    // Assert expectations\n}\n</code></pre>"},{"location":"developer/plugin-development/#performance-testing","title":"Performance Testing","text":"<pre><code>#[bench]\nfn bench_large_svg_optimization(b: &amp;mut Bencher) {\n    // ...\n}\n</code></pre>"},{"location":"developer/plugin-development/#publishing-and-distribution","title":"Publishing and Distribution","text":""},{"location":"developer/plugin-development/#1-package-your-plugin","title":"1. Package Your Plugin","text":"<p>Create a separate crate for distribution:</p> <pre><code># Cargo.toml\n[package]\nname = \"vexy-svgo-plugin-custom\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nvexy-svgo-plugin-sdk = \"2.0\"\nvexy-svgo-core = \"2.0\"\nanyhow = \"1.0\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\n\n[dev-dependencies]\nvexy-svgo-test-utils = \"2.0\"\n</code></pre>"},{"location":"developer/plugin-development/#2-documentation","title":"2. Documentation","text":"<p>Document your plugin thoroughly:</p> <pre><code>//! # Custom Vexy SVGO Plugin\n//!\n//! This plugin adds custom attributes to SVG elements based on configurable rules.\n//!\n//! ## Usage\n//!\n//! ```rust\n//! use vexy-svgo-plugin-custom::MyCustomPlugin;\n//! use vexy-svgo-core::Config;\n//!\n//! let mut config = Config::default();\n//! config.plugins.push(PluginConfig::Name(\"myCustomPlugin\".to_string()));\n//! ```\n//!\n//! ## Configuration\n//!\n//! The plugin accepts the following parameters:\n//!\n//! - `attribute_name`: The name of the attribute to add (default: \"data-custom\")\n//! - `attribute_value`: The value of the attribute (default: \"processed\")\n//! - `target_class`: Optional class name to filter elements\n</code></pre>"},{"location":"developer/plugin-development/#3-publish-to-cratesio","title":"3. Publish to crates.io","text":"<pre><code># Ensure tests pass\ncargo test\n\n# Check documentation\ncargo doc --open\n\n# Publish\ncargo publish\n</code></pre>"},{"location":"developer/plugin-development/#best-practices","title":"Best Practices","text":""},{"location":"developer/plugin-development/#1-performance-optimization","title":"1. Performance Optimization","text":"<ul> <li>Minimize Allocations: Reuse strings and collections where possible</li> <li>Early Returns: Skip processing when conditions aren't met</li> <li>Batch Operations: Group similar modifications together</li> </ul> <pre><code>impl&lt;'a&gt; Visitor&lt;'a&gt; for EfficientPlugin {\n    fn visit_element_enter(&amp;mut self, element: &amp;mut Element&lt;'a&gt;) -&gt; Result&lt;()&gt; {\n        // ...\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"developer/plugin-development/#2-error-handling","title":"2. Error Handling","text":"<ul> <li>Graceful Degradation: Don't break the entire optimization on minor errors</li> <li>Informative Messages: Provide context in error messages</li> <li>Recovery Strategies: Implement fallbacks for common issues</li> </ul> <pre><code>fn process_element(&amp;mut self, element: &amp;mut Element) -&gt; Result&lt;()&gt; {\n    // ...\n}\n</code></pre>"},{"location":"developer/plugin-development/#3-configuration-validation","title":"3. Configuration Validation","text":"<pre><code>impl Plugin for ValidatedPlugin {\n    fn configure(&amp;mut self, params: serde_json::Value) -&gt; Result&lt;()&gt; {\n        // ...\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"developer/plugin-development/#4-compatibility","title":"4. Compatibility","text":"<ul> <li>SVGO Parity: Match SVGO behavior when implementing equivalent plugins</li> <li>Backward Compatibility: Don't break existing configurations</li> <li>Feature Detection: Check for optional dependencies</li> </ul> <pre><code>impl Plugin for CompatiblePlugin {\n    fn optimize(&amp;mut self, document: &amp;mut Document) -&gt; Result&lt;()&gt; {\n        // ...\n    }\n}\n</code></pre>"},{"location":"developer/plugin-development/#plugin-ideas","title":"Plugin Ideas","text":"<p>Here are some plugin ideas to inspire your development:</p> <ol> <li>Accessibility Enhancer: Add ARIA labels and roles automatically</li> <li>Animation Optimizer: Optimize SMIL animations and CSS animations</li> <li>Icon Sprite Generator: Combine multiple icons into a sprite sheet</li> <li>Responsive SVG: Add viewBox and preserveAspectRatio for responsive designs</li> <li>Security Scanner: Detect and remove potentially malicious content</li> <li>Style Optimizer: Convert inline styles to CSS classes</li> <li>Path Simplifier: Advanced path optimization beyond convertPathData</li> <li>Metadata Manager: Add/update copyright, license, and attribution</li> <li>Theme Converter: Convert colors to CSS variables for theming</li> <li>Performance Profiler: Add timing marks for animation performance</li> </ol>"},{"location":"developer/plugin-development/#resources","title":"Resources","text":"<ul> <li>Vexy SVGO Plugin SDK Documentation</li> <li>SVG Specification</li> <li>SVGO Plugin Reference</li> <li>Rust Visitor Pattern Guide</li> </ul>"},{"location":"developer/plugin-development/#conclusion","title":"Conclusion","text":"<p>Creating Vexy SVGO plugins allows you to extend the optimizer with custom functionality while maintaining the performance benefits of Rust. Start with simple transformations and gradually build more complex optimizations as you become familiar with the AST and visitor pattern.</p> <p>Remember to: - Test thoroughly with various SVG inputs - Document your plugin's behavior and configuration - Consider performance implications - Share your plugins with the community</p> <p>Happy plugin development! \ud83d\ude80</p>"},{"location":"developer/plugin-migration/","title":"Plugin Migration Guide","text":"<p>This guide explains how to migrate existing SVGO plugins to the new vexy_svgo plugin architecture.</p>"},{"location":"developer/plugin-migration/#overview","title":"Overview","text":"<p>The new plugin architecture uses composition over inheritance with a visitor pattern for SVG document traversal. Each plugin implements the <code>Plugin</code> trait and uses visitors to perform transformations.</p>"},{"location":"developer/plugin-migration/#migration-process","title":"Migration Process","text":""},{"location":"developer/plugin-migration/#1-plugin-structure","title":"1. Plugin Structure","text":"<p>Old SVGO Plugin (JavaScript): <pre><code>exports.type = 'visitor';\nexports.name = 'removeComments';\nexports.description = 'removes comments';\n\nexports.fn = (root, params) =&gt; {\n  // Plugin logic here\n};\n</code></pre></p> <p>New Vexy SVGO Plugin (Rust): <pre><code>use crate::Plugin;\nuse vexy_svgo_core::ast::{Document, Element};\nuse vexy_svgo_core::visitor::Visitor;\nuse anyhow::Result;\n\npub struct RemoveCommentsPlugin {\n    preserve_patterns: bool,\n}\n\nimpl Plugin for RemoveCommentsPlugin {\n    fn name(&amp;self) -&gt; &amp;'static str {\n        \"removeComments\"\n    }\n\n    fn description(&amp;self) -&gt; &amp;'static str {\n        \"Remove comments from SVG document\"\n    }\n\n    fn apply(&amp;self, document: &amp;mut Document) -&gt; Result&lt;()&gt; {\n        let mut visitor = CommentRemovalVisitor::new(self.preserve_patterns);\n        vexy_svgo_core::visitor::walk_document(&amp;mut visitor, document)?;\n        Ok(())\n    }\n}\n</code></pre></p>"},{"location":"developer/plugin-migration/#2-visitor-implementation","title":"2. Visitor Implementation","text":"<p>Create a visitor struct that implements the <code>Visitor</code> trait:</p> <pre><code>struct CommentRemovalVisitor {\n    preserve_patterns: bool,\n}\n\nimpl Visitor&lt;'_&gt; for CommentRemovalVisitor {\n    fn visit_element_enter(&amp;mut self, element: &amp;mut Element&lt;'_&gt;) -&gt; Result&lt;()&gt; {\n        // Apply transformations to the element\n        element.children.retain(|child| {\n            match child {\n                Node::Comment(comment) =&gt; self.should_keep_comment(comment),\n                _ =&gt; true,\n            }\n        });\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"developer/plugin-migration/#3-parameter-validation","title":"3. Parameter Validation","text":"<p>Implement parameter validation in the plugin:</p> <pre><code>fn validate_params(&amp;self, params: &amp;serde_json::Value) -&gt; anyhow::Result&lt;()&gt; {\n    if let Some(preserve) = params.get(\"preservePatterns\") {\n        if !preserve.is_boolean() {\n            return Err(anyhow::anyhow!(\n                \"preservePatterns must be a boolean\"\n            ));\n        }\n    }\n    Ok(())\n}\n</code></pre>"},{"location":"developer/plugin-migration/#examples","title":"Examples","text":""},{"location":"developer/plugin-migration/#example-1-removecomments-plugin","title":"Example 1: RemoveComments Plugin","text":"<p>Original SVGO Logic: - Remove all comments from SVG documents - Optionally preserve \"legal\" comments (starting with !)</p> <p>Migration Steps: 1. Create <code>RemoveCommentsPlugin</code> struct with configuration 2. Implement <code>Plugin</code> trait with name, description, and apply methods 3. Create <code>CommentRemovalVisitor</code> that filters comments based on configuration 4. Use visitor pattern to traverse and modify the document</p> <p>Files: - <code>crates/plugin-sdk/src/plugins/remove_comments.rs</code> - Tests in the same file with <code>#[cfg(test)]</code></p>"},{"location":"developer/plugin-migration/#example-2-removeemptyattrs-plugin","title":"Example 2: RemoveEmptyAttrs Plugin","text":"<p>Original SVGO Logic: - Remove attributes with empty values - Optionally preserve specific attributes (class, id)</p> <p>Migration Steps: 1. Create <code>RemoveEmptyAttrsPlugin</code> struct with preservation settings 2. Implement visitor that filters empty attributes 3. Add logic to handle preservation rules 4. Comprehensive testing for edge cases</p> <p>Files: - <code>crates/plugin-sdk/src/plugins/remove_empty_attrs.rs</code></p>"},{"location":"developer/plugin-migration/#best-practices","title":"Best Practices","text":""},{"location":"developer/plugin-migration/#1-configuration-management","title":"1. Configuration Management","text":"<pre><code>pub struct MyPlugin {\n    option1: bool,\n    option2: String,\n}\n\nimpl MyPlugin {\n    pub fn new() -&gt; Self {\n        Self {\n            option1: true,\n            option2: \"default\".to_string(),\n        }\n    }\n\n    pub fn with_options(option1: bool, option2: String) -&gt; Self {\n        Self { option1, option2 }\n    }\n}\n</code></pre>"},{"location":"developer/plugin-migration/#2-error-handling","title":"2. Error Handling","text":"<p>Use <code>anyhow::Result</code> for error handling and provide meaningful error messages:</p> <pre><code>fn validate_params(&amp;self, params: &amp;serde_json::Value) -&gt; anyhow::Result&lt;()&gt; {\n    if let Some(value) = params.get(\"myParam\") {\n        if !value.is_boolean() {\n            return Err(anyhow::anyhow!(\"myParam must be a boolean, got: {}\", value));\n        }\n    }\n    Ok(())\n}\n</code></pre>"},{"location":"developer/plugin-migration/#3-testing-strategy","title":"3. Testing Strategy","text":"<p>Create comprehensive tests covering:</p> <ul> <li>Plugin creation and configuration</li> <li>Parameter validation (valid and invalid cases)</li> <li>Visitor logic isolation</li> <li>Integration with documents</li> <li>Edge cases and error conditions</li> </ul> <pre><code>#[cfg(test)]\nmod tests {\n    use super::*;\n    use vexy_svgo_core::ast::Document;\n    use serde_json::json;\n\n    #[test]\n    fn test_plugin_creation() {\n        let plugin = MyPlugin::new();\n        assert_eq!(plugin.name(), \"myPlugin\");\n    }\n\n    #[test]\n    fn test_parameter_validation() {\n        let plugin = MyPlugin::new();\n        assert!(plugin.validate_params(&amp;json!({})).is_ok());\n        assert!(plugin.validate_params(&amp;json!({\"invalid\": \"value\"})).is_err());\n    }\n\n    #[test]\n    fn test_plugin_application() {\n        let plugin = MyPlugin::new();\n        let mut doc = Document::new();\n        // Set up test document\n        let result = plugin.apply(&amp;mut doc);\n        assert!(result.is_ok());\n        // Verify transformations\n    }\n}\n</code></pre>"},{"location":"developer/plugin-migration/#4-integration-testing","title":"4. Integration Testing","text":"<p>Create integration tests that verify plugins work together:</p> <pre><code>// crates/plugin-sdk/tests/integration_test.rs\n#[test]\nfn test_multiple_plugins() {\n    let mut registry = PluginRegistry::new();\n    registry.register(RemoveCommentsPlugin::new());\n    registry.register(RemoveEmptyAttrsPlugin::new());\n\n    let configs = vec![\n        PluginConfig { name: \"removeComments\".to_string(), /* ... */ },\n        PluginConfig { name: \"removeEmptyAttrs\".to_string(), /* ... */ },\n    ];\n\n    let mut doc = create_test_document();\n    registry.apply_plugins(&amp;mut doc, &amp;configs).unwrap();\n    // Verify combined effects\n}\n</code></pre>"},{"location":"developer/plugin-migration/#plugin-registry-integration","title":"Plugin Registry Integration","text":""},{"location":"developer/plugin-migration/#1-register-plugins","title":"1. Register Plugins","text":"<pre><code>// In create_default_registry() function\nlet mut registry = PluginRegistry::new();\nregistry.register(RemoveCommentsPlugin::new());\nregistry.register(RemoveEmptyAttrsPlugin::new());\n// Add more plugins...\n</code></pre>"},{"location":"developer/plugin-migration/#2-plugin-configuration","title":"2. Plugin Configuration","text":"<pre><code>let config = PluginConfig {\n    name: \"removeComments\".to_string(),\n    params: json!({\n        \"preservePatterns\": true\n    }),\n    enabled: true,\n};\n</code></pre>"},{"location":"developer/plugin-migration/#common-migration-patterns","title":"Common Migration Patterns","text":""},{"location":"developer/plugin-migration/#1-simple-element-transformation","title":"1. Simple Element Transformation","text":"<pre><code>impl Visitor&lt;'_&gt; for MyVisitor {\n    fn visit_element_enter(&amp;mut self, element: &amp;mut Element&lt;'_&gt;) -&gt; Result&lt;()&gt; {\n        // Modify attributes\n        element.attributes.retain(|name, value| {\n            // Filtering logic\n        });\n\n        // Modify children\n        element.children.retain(|child| {\n            // Filtering logic\n        });\n\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"developer/plugin-migration/#2-conditional-processing","title":"2. Conditional Processing","text":"<pre><code>impl Visitor&lt;'_&gt; for MyVisitor {\n    fn visit_element_enter(&amp;mut self, element: &amp;mut Element&lt;'_&gt;) -&gt; Result&lt;()&gt; {\n        if self.should_process_element(&amp;element.name) {\n            // Apply transformations\n        }\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"developer/plugin-migration/#3-stateful-visitors","title":"3. Stateful Visitors","text":"<pre><code>struct StatefulVisitor {\n    state: SomeState,\n    counters: HashMap&lt;String, usize&gt;,\n}\n\nimpl Visitor&lt;'_&gt; for StatefulVisitor {\n    fn visit_element_enter(&amp;mut self, element: &amp;mut Element&lt;'_&gt;) -&gt; Result&lt;()&gt; {\n        // Update state based on element\n        self.state.update(&amp;element);\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"developer/plugin-migration/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Minimize Allocations: Reuse data structures where possible</li> <li>Efficient Filtering: Use <code>retain()</code> instead of collect/filter/rebuild</li> <li>Early Returns: Skip processing when conditions aren't met</li> <li>Visitor Efficiency: Only implement necessary visitor methods</li> </ol>"},{"location":"developer/plugin-migration/#file-organization","title":"File Organization","text":"<pre><code>crates/plugin-sdk/src/plugins/\n\u251c\u2500\u2500 mod.rs                    # Plugin exports\n\u251c\u2500\u2500 remove_comments.rs        # Remove comments plugin\n\u251c\u2500\u2500 remove_empty_attrs.rs     # Remove empty attributes plugin\n\u2514\u2500\u2500 ...                       # Additional plugins\n\ncrates/plugin-sdk/tests/\n\u251c\u2500\u2500 integration_test.rs       # Plugin integration tests\n\u251c\u2500\u2500 registry_test.rs          # Registry system tests\n\u2514\u2500\u2500 ...                       # Additional test suites\n\ncrates/plugin-sdk/examples/\n\u251c\u2500\u2500 plugin_composition.rs     # Multi-plugin usage example\n\u2514\u2500\u2500 ...                       # Additional examples\n</code></pre>"},{"location":"developer/plugin-migration/#migration-checklist","title":"Migration Checklist","text":"<p>For each plugin migration:</p> <ul> <li>[ ] Create plugin struct with configuration options</li> <li>[ ] Implement <code>Plugin</code> trait (name, description, validate_params, apply)</li> <li>[ ] Create visitor struct implementing <code>Visitor</code> trait</li> <li>[ ] Add comprehensive unit tests</li> <li>[ ] Add integration tests</li> <li>[ ] Update plugin registry in <code>create_default_registry()</code></li> <li>[ ] Add plugin to module exports in <code>mod.rs</code></li> <li>[ ] Document any SVGO compatibility differences</li> <li>[ ] Verify performance characteristics</li> </ul>"},{"location":"developer/plugin-migration/#svgo-compatibility-notes","title":"SVGO Compatibility Notes","text":"<ul> <li>Plugin names should match SVGO plugin names exactly</li> <li>Parameter names should match SVGO parameter names</li> <li>Default behaviors should match SVGO defaults</li> <li>Document any intentional differences in behavior</li> <li>Maintain backward compatibility where possible</li> </ul>"},{"location":"developer/plugin-reference/","title":"Plugin Implementation Reference","text":"<p>{: .no_toc }</p> <p>Complete reference for all SVGO plugins and their implementation status in Vexy SVGO</p>"},{"location":"developer/plugin-reference/#table-of-contents","title":"Table of contents","text":"<p>{: .no_toc .text-delta }</p> <ol> <li>TOC</li> </ol>"},{"location":"developer/plugin-reference/#overview","title":"Overview","text":"<p>This document provides a comprehensive analysis of all SVGO plugins from the reference implementation, including their descriptions, default preset status, parameters, and implementation status in Vexy SVGO.</p>"},{"location":"developer/plugin-reference/#plugin-classification","title":"Plugin Classification","text":""},{"location":"developer/plugin-reference/#default-preset-plugins-35-plugins","title":"Default Preset Plugins (35 plugins)","text":"<p>These plugins are included in the SVGO default preset and are enabled by default:</p> Plugin Name Implementation Status Description Parameters removeDoctype \u2705 Implemented removes doctype declarations None removeXMLProcInst \u2705 Implemented removes XML processing instructions None removeComments \u2705 Implemented removes comments <code>preservePatterns</code> (RegExp[] or false) removeDeprecatedAttrs \u2705 Implemented removes deprecated attributes None removeMetadata \u2705 Implemented removes <code>&lt;metadata&gt;</code> elements None removeEditorsNSData \u2705 Implemented removes editor-specific namespaces, elements, and attributes None cleanupAttrs \u2705 Implemented cleanups attributes from newlines, trailing and repeating spaces <code>newlines</code>, <code>trim</code>, <code>spaces</code> (boolean) mergeStyles \u2705 Implemented merge multiple style elements into one None inlineStyles \u274c Not Implemented inline styles (additional options) <code>onlyMatchedOnce</code>, <code>removeMatchedSelectors</code>, <code>useMqs</code>, <code>usePseudos</code> minifyStyles \u2705 Implemented minifies styles and removes unused styles <code>restructure</code>, <code>forceMediaMerge</code>, <code>comments</code>, <code>usage</code> cleanupIds \u2705 Implemented removes unused IDs and minifies used <code>remove</code>, <code>minify</code>, <code>preserve</code>, <code>preservePrefixes</code>, <code>force</code> removeUselessDefs \u2705 Implemented removes elements in <code>&lt;defs&gt;</code> without an <code>id</code> None cleanupNumericValues \u2705 Implemented rounds numeric values to the fixed precision, removes default \"px\" units <code>floatPrecision</code>, <code>leadingZero</code>, <code>defaultPx</code>, <code>convertToPx</code> convertColors \u2705 Implemented converts colors: rgb() to #rrggbb and #rrggbb to #rgb <code>currentColor</code>, <code>names2hex</code>, <code>rgb2hex</code>, <code>convertCase</code>, <code>shorthex</code>, <code>shortname</code> removeUnknownsAndDefaults \u2705 Implemented removes unknown elements content and attributes, removes attrs with default values <code>unknownContent</code>, <code>unknownAttrs</code>, <code>defaultAttrs</code>, <code>defaultMarkupDeclarations</code>, <code>uselessOverrides</code>, <code>keepDataAttrs</code>, <code>keepAriaAttrs</code>, <code>keepRoleAttr</code> removeNonInheritableGroupAttrs \u2705 Implemented removes non-inheritable group's \"presentation\" attributes None removeUselessStrokeAndFill \u2705 Implemented removes useless <code>stroke</code> and <code>fill</code> attributes None cleanupEnableBackground \u2705 Implemented remove or cleanup enable-background attribute when possible None removeHiddenElems \u2705 Implemented removes hidden elements (<code>display=\"none\"</code> or <code>visibility=\"hidden\"</code>) None removeEmptyText \u2705 Implemented removes empty text elements None convertShapeToPath \u2705 Implemented converts basic shapes to more compact path form <code>convertArcs</code>, <code>floatPrecision</code> convertEllipseToCircle \u2705 Implemented converts non-eccentric <code>&lt;ellipse&gt;</code>s to <code>&lt;circle&gt;</code>s None moveElemsAttrsToGroup \u274c Not Implemented Move common attributes of group children to the group None moveGroupAttrsToElems \u274c Not Implemented moves some group attributes to the content elements None collapseGroups \u2705 Implemented collapses useless groups None convertPathData \u2705 Implemented optimizes path data: writes in shorter form, applies transformations See detailed parameters below convertTransform \u274c Not Implemented collapses multiple transformations and optimizes it <code>convertToShorts</code>, <code>degPrecision</code>, <code>floatPrecision</code>, <code>transformPrecision</code>, <code>matrixToTransform</code>, <code>shortTranslate</code>, <code>shortScale</code>, <code>shortRotate</code>, <code>removeUseless</code>, <code>collapseIntoOne</code>, <code>leadingZero</code>, <code>negativeExtraSpace</code> removeEmptyAttrs \u2705 Implemented removes empty attributes None removeEmptyContainers \u2705 Implemented removes empty container elements None mergePaths \u274c Not Implemented merges multiple paths in one if possible <code>force</code>, <code>floatPrecision</code>, <code>noSpaceAfterFlags</code> removeUnusedNS \u2705 Implemented removes unused namespace declarations None sortAttrs \u2705 Implemented Sort element attributes for better compression <code>order</code>, <code>xmlnsOrder</code> sortDefsChildren \u2705 Implemented Sorts children of <code>&lt;defs&gt;</code> to improve compression None removeDesc \u2705 Implemented removes <code>&lt;desc&gt;</code> <code>removeAny</code>"},{"location":"developer/plugin-reference/#non-default-plugins-18-plugins","title":"Non-Default Plugins (18 plugins)","text":"<p>These plugins are available but not included in the default preset:</p> Plugin Name Implementation Status Description Parameters addAttributesToSVGElement \u2705 Implemented adds attributes to the root <code>&lt;svg&gt;</code> element <code>attributes</code> addClassesToSVGElement \u2705 Implemented adds class names to the root <code>&lt;svg&gt;</code> element <code>classNames</code> cleanupListOfValues \u2705 Implemented rounds numeric values in attributes that have a list of numbers <code>floatPrecision</code>, <code>leadingZero</code> convertOneStopGradients \u2705 Implemented converts one-stop gradients to a plain color None prefixIds \u2705 Implemented prefix IDs and class names <code>prefix</code>, <code>prefixIds</code>, <code>prefixClassNames</code> removeAttrs \u2705 Implemented removes attributes by pattern <code>attrs</code> removeAttributesBySelector \u2705 Implemented removes attributes that match CSS selectors <code>selectors</code> removeDimensions \u2705 Implemented removes width/height attributes (preserves viewBox) None removeElementsByAttr \u2705 Implemented removes arbitrary elements by ID or class <code>id</code>, <code>class</code> removeOffCanvasPaths \u2705 Implemented removes elements that are drawn outside of the viewBox None removeRasterImages \u2705 Implemented removes raster images None removeScriptElement \u2705 Implemented removes <code>&lt;script&gt;</code> elements None removeStyleElement \u2705 Implemented removes <code>&lt;style&gt;</code> elements None removeTitle \u2705 Implemented removes <code>&lt;title&gt;</code> elements None removeUselessTransforms \u2705 Implemented removes identity transforms None removeViewBox \u2705 Implemented removes viewBox when possible None removeXlink \u2705 Implemented removes deprecated xlink attributes None removeXMLNS \u2705 Implemented removes xmlns attribute from root element None"},{"location":"developer/plugin-reference/#implementation-statistics","title":"Implementation Statistics","text":"<ul> <li>Total SVGO Plugins: 53</li> <li>Fully Implemented: 48 (90.6%)</li> <li>Not Yet Implemented: 5 (9.4%)</li> </ul>"},{"location":"developer/plugin-reference/#missing-plugins-high-priority","title":"Missing Plugins (High Priority)","text":"<ol> <li>inlineStyles - CSS inlining functionality</li> <li>moveElemsAttrsToGroup - Attribute optimization</li> <li>moveGroupAttrsToElems - Attribute optimization  </li> <li>convertTransform - Transform optimization</li> <li>mergePaths - Path merging optimization</li> </ol>"},{"location":"developer/plugin-reference/#detailed-plugin-parameters","title":"Detailed Plugin Parameters","text":""},{"location":"developer/plugin-reference/#convertpathdata-parameters","title":"convertPathData Parameters","text":"<p>This is one of the most complex plugins with extensive parameter options:</p> <pre><code>pub struct ConvertPathDataParams {\n    pub apply_transforms: bool,              // Apply transform matrices to path coordinates\n    pub apply_transforms_stroked: bool,      // Apply transforms to stroked paths\n    pub make_arcs: bool,                     // Convert smooth curves to arcs where possible\n    pub straight_curves: bool,               // Convert Bezier curves to lines when appropriate\n    pub line_shorthands: bool,               // Use shorthand commands (H, V instead of L)\n    pub curve_smooth_shorthands: bool,       // Use smooth curve commands (S, T)\n    pub float_precision: u8,                 // Coordinate precision (default: 3)\n    pub transform_precision: u8,             // Transform matrix precision (default: 5)\n    pub remove_useless: bool,                // Remove redundant commands\n    pub collapse_repeated: bool,             // Collapse repeated commands\n    pub utilize_absolute: bool,              // Use absolute coordinates when shorter\n    pub leading_zero: bool,                  // Keep leading zeros in numbers\n    pub negative_extra_space: bool,          // Add space before negative values\n}\n</code></pre>"},{"location":"developer/plugin-reference/#cleanupids-parameters","title":"cleanupIds Parameters","text":"<pre><code>pub struct CleanupIdsParams {\n    pub remove: bool,                        // Remove unused IDs\n    pub minify: bool,                        // Minify used IDs (shorten them)\n    pub preserve: Vec&lt;String&gt;,               // IDs to never remove/modify\n    pub preserve_prefixes: Vec&lt;String&gt;,      // ID prefixes to preserve\n    pub force: bool,                         // Force removal even if referenced\n}\n</code></pre>"},{"location":"developer/plugin-reference/#convertcolors-parameters","title":"convertColors Parameters","text":"<pre><code>pub struct ConvertColorsParams {\n    pub current_color: bool,                 // Convert colors to currentColor\n    pub names2hex: bool,                     // Named colors to hex (#red \u2192 #ff0000)\n    pub rgb2hex: bool,                       // RGB values to hex (rgb(255,0,0) \u2192 #ff0000)\n    pub convert_case: String,                // Color case: \"lower\" | \"upper\"\n    pub shorthex: bool,                      // Long hex to short (#ffffff \u2192 #fff)\n    pub shortname: bool,                     // Hex to named colors (#ff0000 \u2192 #red)\n}\n</code></pre>"},{"location":"developer/plugin-reference/#plugin-architecture","title":"Plugin Architecture","text":""},{"location":"developer/plugin-reference/#plugin-trait","title":"Plugin Trait","text":"<p>All plugins implement the core <code>Plugin</code> trait:</p> <pre><code>pub trait Plugin {\n    fn metadata(&amp;self) -&gt; PluginMetadata;\n    fn optimize(&amp;mut self, document: &amp;mut Document) -&gt; Result&lt;()&gt;;\n}\n\npub struct PluginMetadata {\n    pub name: String,\n    pub description: String,\n    pub version: String,\n    pub author: Option&lt;String&gt;,\n    pub tags: Vec&lt;&amp;'static str&gt;,\n    pub experimental: bool,\n}\n</code></pre>"},{"location":"developer/plugin-reference/#visitor-pattern","title":"Visitor Pattern","text":"<p>Most plugins use the visitor pattern for AST traversal:</p> <pre><code>pub trait Visitor {\n    fn visit_document(&amp;mut self, doc: &amp;mut Document) -&gt; Result&lt;()&gt;;\n    fn visit_element(&amp;mut self, element: &amp;mut Element) -&gt; Result&lt;()&gt;;\n    fn visit_attribute(&amp;mut self, attr: &amp;mut Attribute) -&gt; Result&lt;()&gt;;\n}\n</code></pre>"},{"location":"developer/plugin-reference/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"developer/plugin-reference/#for-contributors","title":"For Contributors","text":"<p>When implementing missing plugins:</p> <ol> <li>Study SVGO implementation - Reference the original JavaScript</li> <li>Maintain API compatibility - Same parameters and behavior</li> <li>Add comprehensive tests - Test edge cases and compatibility</li> <li>Document thoroughly - Parameters, examples, and limitations</li> <li>Follow Rust patterns - Use Result types, proper error handling</li> </ol>"},{"location":"developer/plugin-reference/#plugin-development-steps","title":"Plugin Development Steps","text":"<ol> <li> <p>Create plugin struct <pre><code>pub struct MyPlugin {\n    params: MyPluginParams,\n}\n</code></pre></p> </li> <li> <p>Implement Plugin trait <pre><code>impl Plugin for MyPlugin {\n    fn metadata(&amp;self) -&gt; PluginMetadata { /* ... */ }\n    fn optimize(&amp;mut self, document: &amp;mut Document) -&gt; Result&lt;()&gt; { /* ... */ }\n}\n</code></pre></p> </li> <li> <p>Add tests <pre><code>#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_my_plugin() {\n        // Test implementation\n    }\n}\n</code></pre></p> </li> <li> <p>Register plugin <pre><code>// In plugin registry\nregistry.register(\"myPlugin\", Box::new(MyPlugin::new));\n</code></pre></p> </li> </ol>"},{"location":"developer/plugin-reference/#migration-from-svgo","title":"Migration from SVGO","text":""},{"location":"developer/plugin-reference/#javascript-to-rust-patterns","title":"JavaScript to Rust Patterns","text":"SVGO (JavaScript) Vexy SVGO (Rust) <code>exports.fn = (root, params) =&gt; {}</code> <code>impl Plugin for MyPlugin {}</code> Dynamic typing Strong static typing Callback-based AST traversal Visitor pattern Runtime parameter validation Compile-time type safety Exception handling Result pattern"},{"location":"developer/plugin-reference/#common-migration-challenges","title":"Common Migration Challenges","text":"<ol> <li>String handling - UTF-8 safety and performance</li> <li>Regex patterns - Different regex engine capabilities  </li> <li>Floating point precision - Consistent numeric handling</li> <li>Error propagation - Rust's Result pattern vs exceptions</li> <li>Memory management - Ownership and borrowing</li> </ol>"},{"location":"developer/plugin-reference/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"developer/plugin-reference/#high-performance-plugins","title":"High-Performance Plugins","text":"<ul> <li><code>removeComments</code> - Simple string operations</li> <li><code>removeEmptyAttrs</code> - Attribute filtering</li> <li><code>sortAttrs</code> - In-place sorting</li> </ul>"},{"location":"developer/plugin-reference/#medium-performance-plugins","title":"Medium-Performance Plugins","text":"<ul> <li><code>convertColors</code> - String parsing and conversion</li> <li><code>cleanupNumericValues</code> - Numeric operations</li> <li><code>collapseGroups</code> - Structural analysis</li> </ul>"},{"location":"developer/plugin-reference/#complex-plugins","title":"Complex Plugins","text":"<ul> <li><code>convertPathData</code> - Path geometry operations</li> <li><code>mergePaths</code> - Advanced path analysis</li> <li><code>inlineStyles</code> - CSS parsing and application</li> </ul>"},{"location":"developer/plugin-reference/#testing-strategy","title":"Testing Strategy","text":""},{"location":"developer/plugin-reference/#unit-tests","title":"Unit Tests","text":"<p>Each plugin has comprehensive unit tests covering: - Basic functionality - Edge cases - Parameter variations - Error conditions</p>"},{"location":"developer/plugin-reference/#integration-tests","title":"Integration Tests","text":"<p>Plugin combinations are tested for: - Order-dependent behavior - Plugin interactions - Performance regression</p>"},{"location":"developer/plugin-reference/#compatibility-tests","title":"Compatibility Tests","text":"<p>SVGO comparison tests ensure: - Identical output for same inputs - Parameter compatibility - Error handling consistency</p>"},{"location":"developer/plugin-reference/#future-roadmap","title":"Future Roadmap","text":""},{"location":"developer/plugin-reference/#phase-1-complete-core-plugins","title":"Phase 1: Complete Core Plugins","text":"<ul> <li>\u2705 Implement <code>inlineStyles</code> </li> <li>\u2705 Implement <code>moveElemsAttrsToGroup</code></li> <li>\u2705 Implement <code>moveGroupAttrsToElems</code></li> </ul>"},{"location":"developer/plugin-reference/#phase-2-advanced-optimizations","title":"Phase 2: Advanced Optimizations","text":"<ul> <li>\u2705 Implement <code>convertTransform</code></li> <li>\u2705 Implement <code>mergePaths</code></li> <li>\u2705 Add <code>reusePaths</code> plugin</li> </ul>"},{"location":"developer/plugin-reference/#phase-3-performance-optimizations","title":"Phase 3: Performance Optimizations","text":"<ul> <li>SIMD-optimized path operations</li> <li>Parallel plugin execution</li> <li>Streaming large file support</li> </ul>"},{"location":"developer/plugin-reference/#phase-4-extensions","title":"Phase 4: Extensions","text":"<ul> <li>Custom plugin development framework</li> <li>Visual plugin debugging tools</li> <li>Plugin marketplace integration</li> </ul>"},{"location":"developer/plugin-reference/#contributing","title":"Contributing","text":""},{"location":"developer/plugin-reference/#getting-started","title":"Getting Started","text":"<ol> <li>Choose a missing plugin from the list above</li> <li>Study the SVGO implementation in <code>ref/svgo/plugins/</code></li> <li>Create plugin structure in <code>crates/plugin-sdk/src/plugins/</code></li> <li>Write comprehensive tests in the test module</li> <li>Add documentation and examples</li> </ol>"},{"location":"developer/plugin-reference/#code-review-process","title":"Code Review Process","text":"<ol> <li>Functionality review - Correctness vs SVGO</li> <li>Performance review - Benchmarks and profiling</li> <li>API review - Parameter compatibility</li> <li>Documentation review - Examples and clarity</li> </ol>"},{"location":"developer/plugin-reference/#resources","title":"Resources","text":"<ul> <li>SVGO Plugin Reference</li> <li>Vexy SVGO Plugin SDK</li> <li>Contributing Guide</li> <li>Performance Benchmarks</li> </ul> <p>This reference is automatically updated as new plugins are implemented. Last updated: 2024-07-12</p>"},{"location":"user/","title":"User Guide","text":"<p>{: .no_toc }</p> <p>Complete guide to using Vexy SVGO for end users</p>"},{"location":"user/#table-of-contents","title":"Table of contents","text":"<p>{: .no_toc .text-delta }</p> <ol> <li>TOC</li> </ol>"},{"location":"user/#welcome-to-vexy-svgo","title":"Welcome to Vexy SVGO","text":"<p>Vexy SVGO is a high-performance, native Rust port of the popular SVG optimizer SVGO. This guide will help you get started with optimizing your SVG files using our fast, reliable, and feature-complete optimizer.</p>"},{"location":"user/#what-makes-vexy-svgo-special","title":"What Makes Vexy SVGO Special","text":"<ul> <li>\ud83d\ude80 12x Faster: Native Rust performance beats Node.js implementations</li> <li>\ud83d\udd04 Drop-in Compatible: Full SVGO API compatibility </li> <li>\ud83c\udf10 Runs Everywhere: CLI, library, and WebAssembly support</li> <li>\ud83d\udee1\ufe0f Production Ready: 353/353 tests passing, battle-tested</li> </ul>"},{"location":"user/#quick-start","title":"Quick Start","text":""},{"location":"user/#1-try-the-interactive-demo","title":"1. Try the Interactive Demo","text":"<p>The fastest way to experience Vexy SVGO is through our browser-based demo:</p> <p>\ud83c\udfae Launch Demo \u2192</p>"},{"location":"user/#2-install-locally","title":"2. Install Locally","text":"<p>Choose your preferred installation method:</p>"},{"location":"user/#pre-built-binaries-recommended","title":"Pre-built Binaries (Recommended)","text":"<pre><code># macOS (Universal)\ncurl -sSL https://github.com/vexyart/vexy-svgo/releases/latest/download/vexy-svgo-macos.tar.gz | tar -xz\n\n# Windows\ncurl -sSL https://github.com/vexyart/vexy-svgo/releases/latest/download/vexy-svgo-windows.zip -o vexy-svgo.zip &amp;&amp; unzip vexy-svgo.zip\n\n# Linux\ncurl -sSL https://github.com/vexyart/vexy-svgo/releases/latest/download/vexy-svgo-linux.tar.gz | tar -xz\n</code></pre>"},{"location":"user/#from-source","title":"From Source","text":"<pre><code>git clone https://github.com/vexyart/vexy-svgo\ncd vexy-svgo\ncargo build --release\n# Binary will be at ./target/release/vexy-svgo\n</code></pre>"},{"location":"user/#3-basic-usage","title":"3. Basic Usage","text":"<pre><code># Optimize a single file\nvexy-svgo input.svg -o output.svg\n\n# Process multiple files\nvexy-svgo *.svg\n\n# Use with pipes\ncat input.svg | vexy-svgo &gt; output.svg\n\n# Process entire directories\nvexy-svgo -f ./icons/ -r\n</code></pre>"},{"location":"user/#user-guide-sections","title":"User Guide Sections","text":"\ud83d\udce6 Installation <p>Complete installation guide for all platforms</p> Read more \u2192 \ud83d\udcbb CLI Usage <p>Master the command-line interface</p> Read more \u2192 \u2699\ufe0f Configuration <p>Configure plugins and optimization settings</p> Read more \u2192 \ud83e\udde9 Plugins <p>Complete plugin reference and usage</p> Read more \u2192"},{"location":"user/#common-tasks","title":"Common Tasks","text":""},{"location":"user/#optimize-for-web","title":"Optimize for Web","text":"<pre><code># Standard web optimization\nvexy-svgo input.svg -o output.svg --pretty\n\n# Remove unnecessary precision\nvexy-svgo input.svg -o output.svg -p 2\n\n# Maximum compression\nvexy-svgo input.svg -o output.svg --multipass\n</code></pre>"},{"location":"user/#batch-processing","title":"Batch Processing","text":"<pre><code># Process all SVGs in a directory\nvexy-svgo -f ./assets/icons/ -r\n\n# With specific plugins\nvexy-svgo -f ./icons/ --disable removeViewBox --enable cleanupIds\n\n# Custom output directory\nvexy-svgo -f ./src/icons/ -o ./dist/icons/ -r\n</code></pre>"},{"location":"user/#integration-examples","title":"Integration Examples","text":"<pre><code># Build pipeline\nnpm run build &amp;&amp; find dist -name \"*.svg\" -exec vexy-svgo {} \\;\n\n# Git pre-commit hook\ngit diff --cached --name-only --diff-filter=A | grep '\\.svg$' | xargs vexy-svgo\n\n# Watch mode (with external tool)\nwatchman-make -p '**/*.svg' -t optimize-svgs\n</code></pre>"},{"location":"user/#performance-tips","title":"Performance Tips","text":""},{"location":"user/#1-use-native-binary","title":"1. Use Native Binary","text":"<p>The native binary is always fastest. Avoid wrappers when possible.</p>"},{"location":"user/#2-batch-processing","title":"2. Batch Processing","text":"<p>Process multiple files at once rather than one-by-one:</p> <pre><code># \u2705 Fast - batch processing\nvexy-svgo *.svg\n\n# \u274c Slow - individual processing\nfor file in *.svg; do vexy-svgo \"$file\"; done\n</code></pre>"},{"location":"user/#3-optimize-plugin-selection","title":"3. Optimize Plugin Selection","text":"<p>Disable unnecessary plugins for faster processing:</p> <pre><code># For build pipelines, focus on size reduction\nvexy-svgo input.svg --disable removeTitle --disable removeDesc\n\n# For icon sprites, keep structure\nvexy-svgo input.svg --disable removeViewBox --disable removeDimensions\n</code></pre>"},{"location":"user/#migration-from-svgo","title":"Migration from SVGO","text":"<p>Vexy SVGO is designed as a drop-in replacement for SVGO. Most existing workflows will work unchanged:</p> <pre><code># Replace this\nnpx svgo input.svg -o output.svg\n\n# With this\nvexy-svgo input.svg -o output.svg\n</code></pre>"},{"location":"user/#key-differences","title":"Key Differences","text":"Feature SVGO Vexy SVGO Performance Baseline 12x faster Installation npm install Single binary Config Files .svgo.config.js .svgo.config.json Plugin API JavaScript Rust (for custom plugins)"},{"location":"user/#configuration-migration","title":"Configuration Migration","text":"<p>Most SVGO configurations work directly:</p> <pre><code># Your existing config works\nvexy-svgo --config .svgo.config.js input.svg\n</code></pre>"},{"location":"user/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Documentation: Continue reading this guide</li> <li>\ud83c\udfae Demo: Try our interactive demo</li> <li>\ud83d\udc1b Issues: Report problems on GitHub</li> <li>\ud83d\udcac Discussions: Join GitHub Discussions</li> </ul> <p>Ready to get started? Continue to Installation \u2192</p>"},{"location":"user/cli-usage/","title":"CLI Usage","text":"<p>{: .no_toc }</p> <p>Master the Vexy SVGO command-line interface</p>"},{"location":"user/cli-usage/#table-of-contents","title":"Table of contents","text":"<p>{: .no_toc .text-delta }</p> <ol> <li>TOC</li> </ol>"},{"location":"user/cli-usage/#basic-usage","title":"Basic Usage","text":"<p>Vexy SVGO provides a powerful command-line interface that's fully compatible with SVGO while adding performance and convenience features.</p>"},{"location":"user/cli-usage/#single-file-optimization","title":"Single File Optimization","text":"<pre><code># Basic optimization\nvexy-svgo input.svg -o output.svg\n\n# Using pipes (STDIN/STDOUT)\ncat input.svg | vexy-svgo &gt; output.svg\n\n# Process string directly\nvexy-svgo -s '&lt;svg xmlns=\"http://www.w3.org/2000/svg\"&gt;&lt;circle r=\"50\"/&gt;&lt;/svg&gt;'\n</code></pre>"},{"location":"user/cli-usage/#multiple-files","title":"Multiple Files","text":"<pre><code># Multiple specific files\nvexy-svgo icon1.svg icon2.svg icon3.svg\n\n# All SVG files in current directory\nvexy-svgo *.svg\n\n# Process directory\nvexy-svgo -f assets/icons/\n\n# Recursive directory processing\nvexy-svgo -f assets/ -r\n</code></pre>"},{"location":"user/cli-usage/#command-options","title":"Command Options","text":""},{"location":"user/cli-usage/#inputoutput-options","title":"Input/Output Options","text":"Option Description Example <code>-i, --input</code> Input file/directory/STDIN <code>vexy-svgo -i input.svg</code> <code>-o, --output</code> Output file/directory/STDOUT <code>vexy-svgo -o output.svg</code> <code>-s, --string</code> Process SVG string directly <code>vexy-svgo -s '&lt;svg&gt;...&lt;/svg&gt;'</code> <code>-f, --folder</code> Process entire folder <code>vexy-svgo -f ./icons/</code> <code>-r, --recursive</code> Process folders recursively <code>vexy-svgo -f ./assets/ -r</code>"},{"location":"user/cli-usage/#formatting-options","title":"Formatting Options","text":"Option Description Default <code>--pretty</code> Pretty print output <code>false</code> <code>--indent</code> Indentation spaces <code>2</code> <code>--eol</code> Line ending (lf/crlf) Platform default <code>--final-newline</code> Ensure trailing newline <code>false</code> <code>-p, --precision</code> Numeric precision <code>3</code>"},{"location":"user/cli-usage/#plugin-options","title":"Plugin Options","text":"Option Description Example <code>--config</code> Custom config file <code>--config .svgo.config.js</code> <code>--disable</code> Disable plugin <code>--disable removeViewBox</code> <code>--enable</code> Enable plugin <code>--enable cleanupIds</code> <code>--show-plugins</code> List available plugins <code>vexy-svgo --show-plugins</code>"},{"location":"user/cli-usage/#output-options","title":"Output Options","text":"Option Description Example <code>--datauri</code> Output as Data URI <code>--datauri base64</code> <code>--multipass</code> Multiple optimization passes <code>--multipass</code> <code>-q, --quiet</code> Suppress output <code>-q</code> <code>--no-color</code> Disable colored output <code>--no-color</code>"},{"location":"user/cli-usage/#common-workflows","title":"Common Workflows","text":""},{"location":"user/cli-usage/#web-development","title":"Web Development","text":"<pre><code># Standard web optimization\nvexy-svgo input.svg -o output.svg --pretty\n\n# Aggressive compression for production\nvexy-svgo input.svg -o output.svg --multipass -p 2\n\n# Process all icons in a build\nvexy-svgo -f src/assets/icons/ -o dist/assets/icons/ -r\n</code></pre>"},{"location":"user/cli-usage/#build-pipeline-integration","title":"Build Pipeline Integration","text":"<pre><code># Process new/modified SVGs only\nfind . -name \"*.svg\" -newer .last-build | xargs vexy-svgo\n\n# Git pre-commit hook\ngit diff --cached --name-only --diff-filter=A | grep '\\.svg$' | xargs vexy-svgo\n\n# npm script integration\nnpm run icons:optimize &amp;&amp; vexy-svgo -f dist/icons/\n</code></pre>"},{"location":"user/cli-usage/#batch-processing","title":"Batch Processing","text":"<pre><code># Process with progress (large batches)\nvexy-svgo -f ./thousands-of-icons/ -r --verbose\n\n# Custom output structure\nvexy-svgo -f src/icons/ -o dist/icons/ -r --pretty\n\n# Exclude certain files\nvexy-svgo -f assets/ -r --exclude \"temp|backup\" --exclude \".*\\.min\\.svg\"\n</code></pre>"},{"location":"user/cli-usage/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user/cli-usage/#custom-precision","title":"Custom Precision","text":"<p>Control numeric precision for different use cases:</p> <pre><code># High precision for print (slower, larger)\nvexy-svgo input.svg -p 5\n\n# Low precision for web (faster, smaller)  \nvexy-svgo input.svg -p 1\n\n# Balanced for most use cases\nvexy-svgo input.svg -p 3\n</code></pre>"},{"location":"user/cli-usage/#plugin-configuration","title":"Plugin Configuration","text":"<pre><code># Disable specific optimizations\nvexy-svgo input.svg --disable removeViewBox --disable removeDimensions\n\n# Enable additional plugins\nvexy-svgo input.svg --enable cleanupIds --enable sortAttrs\n\n# Show all available plugins\nvexy-svgo --show-plugins\n</code></pre>"},{"location":"user/cli-usage/#output-formats","title":"Output Formats","text":"<pre><code># Generate Data URI for CSS\nvexy-svgo input.svg --datauri base64 &gt; icon.css\n\n# Pretty formatted for development\nvexy-svgo input.svg --pretty --indent 4\n\n# Minified for production\nvexy-svgo input.svg\n</code></pre>"},{"location":"user/cli-usage/#configuration-files","title":"Configuration Files","text":""},{"location":"user/cli-usage/#svgoconfigjs-svgo-compatible","title":".svgo.config.js (SVGO Compatible)","text":"<pre><code>module.exports = {\n  multipass: true,\n  plugins: [\n    'removeComments',\n    'removeEmptyAttrs',\n    {\n      name: 'convertColors',\n      params: {\n        currentColor: true\n      }\n    }\n  ]\n};\n</code></pre>"},{"location":"user/cli-usage/#svgoconfigjson-native-format","title":".svgo.config.json (Native Format)","text":"<pre><code>{\n  \"multipass\": true,\n  \"plugins\": [\n    \"removeComments\",\n    \"removeEmptyAttrs\",\n    {\n      \"name\": \"convertColors\", \n      \"params\": {\n        \"currentColor\": true\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"user/cli-usage/#using-config-files","title":"Using Config Files","text":"<pre><code># Use specific config file\nvexy-svgo --config custom.config.js input.svg\n\n# Automatic discovery (.svgo.config.js/json in current or parent dirs)\nvexy-svgo input.svg\n\n# Override config options\nvexy-svgo --config base.config.js --disable removeComments input.svg\n</code></pre>"},{"location":"user/cli-usage/#performance-tips","title":"Performance Tips","text":""},{"location":"user/cli-usage/#maximize-speed","title":"Maximize Speed","text":"<pre><code># Use native binary (not wrapper)\nvexy-svgo input.svg\n\n# Batch processing instead of individual files\nvexy-svgo *.svg  # \u2705 Fast\n# vs\nfor f in *.svg; do vexy-svgo \"$f\"; done  # \u274c Slow\n\n# Disable unnecessary plugins for simple files\nvexy-svgo --disable removeMetadata --disable removeTitle simple.svg\n</code></pre>"},{"location":"user/cli-usage/#memory-optimization","title":"Memory Optimization","text":"<pre><code># For very large files, use streaming\nvexy-svgo --stream large-file.svg\n\n# Process large batches in chunks\nfind . -name \"*.svg\" | xargs -n 50 vexy-svgo\n</code></pre>"},{"location":"user/cli-usage/#integration-examples","title":"Integration Examples","text":""},{"location":"user/cli-usage/#makefile","title":"Makefile","text":"<pre><code>optimize-svg:\n    vexy-svgo -f src/assets/icons/ -o dist/assets/icons/ -r\n\nwatch-svg:\n    watchman-make -p '**/*.svg' -t optimize-svg\n\n.PHONY: optimize-svg watch-svg\n</code></pre>"},{"location":"user/cli-usage/#npm-scripts","title":"npm Scripts","text":"<pre><code>{\n  \"scripts\": {\n    \"icons:optimize\": \"vexy-svgo -f src/icons/ -o dist/icons/ -r\",\n    \"icons:watch\": \"chokidar 'src/**/*.svg' -c 'npm run icons:optimize'\",\n    \"build\": \"npm run icons:optimize &amp;&amp; webpack\"\n  }\n}\n</code></pre>"},{"location":"user/cli-usage/#github-actions","title":"GitHub Actions","text":"<pre><code>- name: Optimize SVGs\n  run: |\n    curl -sSL https://github.com/vexyart/vexy-svgo/releases/latest/download/vexy-svgo-linux.tar.gz | tar -xz\n    ./vexy-svgo -f assets/ -r\n</code></pre>"},{"location":"user/cli-usage/#migration-from-svgo","title":"Migration from SVGO","text":"<p>Vexy SVGO is designed as a drop-in replacement:</p> <pre><code># Replace this:\nnpx svgo input.svg -o output.svg\n\n# With this:\nvexy-svgo input.svg -o output.svg\n</code></pre>"},{"location":"user/cli-usage/#key-differences","title":"Key Differences","text":"Feature SVGO Vexy SVGO Speed Baseline 12x faster Config .svgo.config.js .svgo.config.js/.json Precision --precision -p, --precision Folder --folder -f, --folder String input Not supported -s, --string"},{"location":"user/cli-usage/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Some plugin parameters may have different names</li> <li>Custom plugins need to be rewritten in Rust</li> <li>Output formatting may have minor differences</li> </ul>"},{"location":"user/cli-usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user/cli-usage/#common-issues","title":"Common Issues","text":"<p>\"Command not found\" <pre><code># Check if vexy-svgo is in PATH\nwhich vexy-svgo\necho $PATH\n\n# Install or move binary to PATH location\n</code></pre></p> <p>\"Permission denied\" <pre><code># Make binary executable\nchmod +x vexy-svgo\n</code></pre></p> <p>\"Invalid SVG\" <pre><code># Validate input SVG\nxmllint --noout input.svg\n\n# Check encoding\nfile input.svg\n</code></pre></p>"},{"location":"user/cli-usage/#debug-mode","title":"Debug Mode","text":"<pre><code># Verbose output for debugging\nvexy-svgo --verbose input.svg\n\n# Time operations\ntime vexy-svgo input.svg\n</code></pre>"},{"location":"user/cli-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration - Learn about configuration options</li> <li>Plugins - Understand available optimizations</li> <li>Interactive Demo - Try optimizations in your browser</li> </ul> <p>Need help? Check our GitHub Discussions for community support.</p>"},{"location":"user/configuration/","title":"Configuration","text":"<p>{: .no_toc }</p> <p>Configure Vexy SVGO plugins and optimization settings</p>"},{"location":"user/configuration/#table-of-contents","title":"Table of contents","text":"<p>{: .no_toc .text-delta }</p> <ol> <li>TOC</li> </ol>"},{"location":"user/configuration/#overview","title":"Overview","text":"<p>Vexy SVGO uses the same configuration format as SVGO, ensuring easy migration and compatibility. Configuration can be provided through files, command-line options, or programmatically.</p>"},{"location":"user/configuration/#configuration-priority","title":"Configuration Priority","text":"<ol> <li>Command-line options (highest priority)</li> <li>Configuration files (.svgo.config.js, .svgo.config.json)</li> <li>Default settings (lowest priority)</li> </ol>"},{"location":"user/configuration/#configuration-files","title":"Configuration Files","text":""},{"location":"user/configuration/#svgoconfigjs-svgo-compatible","title":".svgo.config.js (SVGO Compatible)","text":"<p>The standard SVGO configuration format:</p> <pre><code>module.exports = {\n  multipass: true,\n  js2svg: {\n    pretty: true,\n    indent: 2\n  },\n  plugins: [\n    // Enable plugin with default settings\n    'removeComments',\n    'removeEmptyAttrs',\n\n    // Enable plugin with custom parameters\n    {\n      name: 'convertColors',\n      params: {\n        currentColor: true,\n        names2hex: true\n      }\n    },\n\n    // Disable plugin that's enabled by default\n    {\n      name: 'removeViewBox',\n      enabled: false\n    }\n  ]\n};\n</code></pre>"},{"location":"user/configuration/#svgoconfigjson-native-format","title":".svgo.config.json (Native Format)","text":"<p>JSON format for simpler configurations:</p> <pre><code>{\n  \"multipass\": true,\n  \"js2svg\": {\n    \"pretty\": true,\n    \"indent\": 2\n  },\n  \"plugins\": [\n    \"removeComments\",\n    \"removeEmptyAttrs\",\n    {\n      \"name\": \"convertColors\",\n      \"params\": {\n        \"currentColor\": true,\n        \"names2hex\": true\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"user/configuration/#configuration-discovery","title":"Configuration Discovery","text":"<p>Vexy SVGO looks for configuration files in this order:</p> <ol> <li>File specified with <code>--config</code> option</li> <li><code>.svgo.config.js</code> in current directory</li> <li><code>.svgo.config.json</code> in current directory</li> <li><code>.svgo.config.js</code> in parent directories (walking up)</li> <li><code>.svgo.config.json</code> in parent directories (walking up)</li> </ol>"},{"location":"user/configuration/#core-settings","title":"Core Settings","text":""},{"location":"user/configuration/#multipass","title":"multipass","text":"<p>Run optimization multiple times until no further improvements are made.</p> <pre><code>{\n  multipass: true  // Default: false\n}\n</code></pre> <p>Command line: <code>--multipass</code></p>"},{"location":"user/configuration/#js2svg","title":"js2svg","text":"<p>Controls SVG output formatting:</p> <pre><code>{\n  js2svg: {\n    pretty: true,           // Pretty print with indentation\n    indent: 2,              // Indentation spaces\n    eol: 'lf',             // Line ending: 'lf' or 'crlf'\n    finalNewline: false     // Add newline at end\n  }\n}\n</code></pre> <p>Command line: <code>--pretty</code>, <code>--indent 4</code>, <code>--eol crlf</code></p>"},{"location":"user/configuration/#floatprecision","title":"floatPrecision","text":"<p>Numeric precision for coordinates and values:</p> <pre><code>{\n  floatPrecision: 3  // Default: 3 decimal places\n}\n</code></pre> <p>Command line: <code>-p 2</code>, <code>--precision 2</code></p>"},{"location":"user/configuration/#plugin-configuration","title":"Plugin Configuration","text":""},{"location":"user/configuration/#plugin-format","title":"Plugin Format","text":"<p>Plugins can be configured in several ways:</p> <pre><code>{\n  plugins: [\n    // Simple enable (uses default parameters)\n    'removeComments',\n\n    // Enable with custom parameters\n    {\n      name: 'cleanupNumericValues',\n      params: {\n        floatPrecision: 2,\n        leadingZero: false\n      }\n    },\n\n    // Explicitly disable\n    {\n      name: 'removeViewBox',\n      enabled: false\n    }\n  ]\n}\n</code></pre>"},{"location":"user/configuration/#default-plugin-preset","title":"Default Plugin Preset","text":"<p>Vexy SVGO includes a default preset similar to SVGO's:</p> <pre><code>// Default plugins (applied when no config is specified)\nconst defaultPlugins = [\n  'removeDoctype',\n  'removeXMLProcInst', \n  'removeComments',\n  'removeMetadata',\n  'removeEditorsNSData',\n  'cleanupAttrs',\n  'mergeStyles',\n  'cleanupIds',\n  'removeUselessDefs',\n  'cleanupNumericValues',\n  'convertColors',\n  'removeUnknownsAndDefaults',\n  'removeNonInheritableGroupAttrs',\n  'cleanupEnableBackground',\n  'removeHiddenElems',\n  'removeEmptyText',\n  'convertShapeToPath',\n  'convertEllipseToCircle',\n  'collapseGroups',\n  'convertPathData',\n  'removeEmptyAttrs',\n  'removeEmptyContainers',\n  'removeUnusedNS',\n  'sortAttrs',\n  'sortDefsChildren',\n  'removeDesc'\n];\n</code></pre>"},{"location":"user/configuration/#available-plugins","title":"Available Plugins","text":"<p>See the complete list with descriptions:</p> <pre><code>vexy-svgo --show-plugins\n</code></pre>"},{"location":"user/configuration/#common-configuration-examples","title":"Common Configuration Examples","text":""},{"location":"user/configuration/#web-development","title":"Web Development","text":"<p>Optimized for web use with readable output:</p> <pre><code>module.exports = {\n  multipass: true,\n  js2svg: {\n    pretty: true,\n    indent: 2\n  },\n  plugins: [\n    'removeComments',\n    'removeEmptyAttrs',\n    'convertColors',\n    'cleanupIds',\n    {\n      name: 'cleanupNumericValues',\n      params: { floatPrecision: 2 }\n    },\n    // Keep viewBox for responsive design\n    { name: 'removeViewBox', enabled: false },\n    // Keep dimensions for img tags\n    { name: 'removeDimensions', enabled: false }\n  ]\n};\n</code></pre>"},{"location":"user/configuration/#production-build","title":"Production Build","text":"<p>Maximum compression for production:</p> <pre><code>module.exports = {\n  multipass: true,\n  js2svg: {\n    pretty: false\n  },\n  plugins: [\n    // Enable all safe optimizations\n    'removeComments',\n    'removeTitle',\n    'removeDesc',\n    'removeEmptyAttrs',\n    'removeEmptyText',\n    'removeEmptyContainers',\n    'cleanupAttrs',\n    'cleanupNumericValues',\n    'convertColors',\n    'convertPathData',\n    'collapseGroups',\n    'mergePaths',\n    {\n      name: 'cleanupNumericValues',\n      params: { floatPrecision: 1 }\n    }\n  ]\n};\n</code></pre>"},{"location":"user/configuration/#icon-library","title":"Icon Library","text":"<p>Preserve structure for icon systems:</p> <pre><code>module.exports = {\n  plugins: [\n    'removeComments',\n    'removeEmptyAttrs',\n    'cleanupAttrs',\n    'convertColors',\n    {\n      name: 'cleanupIds',\n      params: { remove: false, minify: true }\n    },\n    // Preserve viewBox for icon scaling\n    { name: 'removeViewBox', enabled: false },\n    // Preserve groups for icon structure\n    { name: 'collapseGroups', enabled: false }\n  ]\n};\n</code></pre>"},{"location":"user/configuration/#printhigh-quality","title":"Print/High Quality","text":"<p>Maintain precision for print graphics:</p> <pre><code>module.exports = {\n  js2svg: {\n    pretty: true,\n    indent: 2\n  },\n  plugins: [\n    'removeComments',\n    'removeEmptyAttrs',\n    'cleanupAttrs',\n    {\n      name: 'cleanupNumericValues',\n      params: { floatPrecision: 5 }\n    },\n    // Disable aggressive optimizations\n    { name: 'convertShapeToPath', enabled: false },\n    { name: 'mergePaths', enabled: false }\n  ]\n};\n</code></pre>"},{"location":"user/configuration/#command-line-configuration","title":"Command-Line Configuration","text":""},{"location":"user/configuration/#override-settings","title":"Override Settings","text":"<pre><code># Use config file but override specific settings\nvexy-svgo --config base.config.js --multipass --precision 1 input.svg\n\n# Disable specific plugins\nvexy-svgo --disable removeViewBox --disable removeDimensions input.svg\n\n# Enable additional plugins  \nvexy-svgo --enable cleanupIds --enable sortAttrs input.svg\n</code></pre>"},{"location":"user/configuration/#multiple-plugin-operations","title":"Multiple Plugin Operations","text":"<pre><code># Complex plugin configuration\nvexy-svgo \\\n  --disable removeTitle \\\n  --disable removeDesc \\\n  --enable cleanupIds \\\n  --precision 2 \\\n  --multipass \\\n  input.svg\n</code></pre>"},{"location":"user/configuration/#plugin-parameters","title":"Plugin Parameters","text":""},{"location":"user/configuration/#cleanupnumericvalues","title":"cleanupNumericValues","text":"<pre><code>{\n  name: 'cleanupNumericValues',\n  params: {\n    floatPrecision: 3,      // Decimal precision\n    leadingZero: true,      // Keep leading zeros\n    defaultPrecision: 2,    // Default for unspecified\n    jsFloatPrecision: 0     // JavaScript number precision\n  }\n}\n</code></pre>"},{"location":"user/configuration/#convertcolors","title":"convertColors","text":"<pre><code>{\n  name: 'convertColors', \n  params: {\n    currentColor: false,    // Convert to currentColor\n    names2hex: true,        // Named colors to hex\n    rgb2hex: true,          // rgb() to hex\n    shorthex: true,         // #rrggbb to #rgb\n    shortname: true         // hex to named colors\n  }\n}\n</code></pre>"},{"location":"user/configuration/#cleanupids","title":"cleanupIds","text":"<pre><code>{\n  name: 'cleanupIds',\n  params: {\n    remove: true,           // Remove unused IDs\n    minify: true,           // Minify used IDs\n    prefix: '',             // Add prefix to IDs\n    preserve: []            // IDs to never remove\n  }\n}\n</code></pre>"},{"location":"user/configuration/#convertpathdata","title":"convertPathData","text":"<pre><code>{\n  name: 'convertPathData',\n  params: {\n    applyTransforms: true,      // Apply transform matrices\n    applyTransformsStroked: true, // Apply to stroked paths\n    makeArcs: true,             // Convert to arcs where possible\n    straightCurves: true,       // Convert curves to lines\n    lineShorthands: true,       // Use H/V commands\n    curveSmoothShorthands: true, // Use S/T commands\n    floatPrecision: 3,          // Coordinate precision\n    transformPrecision: 5,      // Transform precision\n    removeUseless: true,        // Remove redundant commands\n    collapseRepeated: true,     // Collapse repeated commands\n    utilizeAbsolute: true,      // Convert to absolute when shorter\n    leadingZero: true,          // Keep leading zeros\n    negativeExtraSpace: true    // Add space before negative values\n  }\n}\n</code></pre>"},{"location":"user/configuration/#environment-configuration","title":"Environment Configuration","text":""},{"location":"user/configuration/#environment-variables","title":"Environment Variables","text":"<pre><code># Set default precision\nexport VEXY_SVGO_PRECISION=2\n\n# Default config file location\nexport VEXY_SVGO_CONFIG=/path/to/config.js\n\n# Disable colors in output\nexport NO_COLOR=1\n</code></pre>"},{"location":"user/configuration/#project-settings","title":"Project Settings","text":"<p>Create <code>.vexysvgorc</code> in your project root:</p> <pre><code>{\n  \"precision\": 2,\n  \"multipass\": true,\n  \"configFile\": \"tools/svgo.config.js\"\n}\n</code></pre>"},{"location":"user/configuration/#migration-from-svgo","title":"Migration from SVGO","text":""},{"location":"user/configuration/#configuration-compatibility","title":"Configuration Compatibility","text":"<p>Most SVGO configurations work directly:</p> <pre><code># Your existing SVGO config should work\nvexy-svgo --config .svgo.config.js input.svg\n</code></pre>"},{"location":"user/configuration/#key-differences","title":"Key Differences","text":"SVGO Vexy SVGO Notes <code>precision</code> <code>floatPrecision</code> Both supported Plugin order Plugin order May differ slightly Custom plugins Not supported Rust plugins only"},{"location":"user/configuration/#migration-checklist","title":"Migration Checklist","text":"<ol> <li>\u2705 Copy your <code>.svgo.config.js</code></li> <li>\u2705 Test with sample files</li> <li>\u26a0\ufe0f Check output differences</li> <li>\u26a0\ufe0f Update custom plugins (if any)</li> <li>\u2705 Update build scripts</li> </ol>"},{"location":"user/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user/configuration/#configuration-not-found","title":"Configuration Not Found","text":"<pre><code># Check current directory\nls -la .svgo.config.*\n\n# Check config discovery\nvexy-svgo --verbose input.svg\n</code></pre>"},{"location":"user/configuration/#plugin-errors","title":"Plugin Errors","text":"<pre><code># List available plugins\nvexy-svgo --show-plugins\n\n# Test individual plugins\nvexy-svgo --disable-all --enable removeComments input.svg\n</code></pre>"},{"location":"user/configuration/#output-differences","title":"Output Differences","text":"<pre><code># Compare with SVGO\nsvgo input.svg -o svgo-output.svg\nvexy-svgo input.svg -o vexy-output.svg\ndiff svgo-output.svg vexy-output.svg\n</code></pre>"},{"location":"user/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Plugins - Detailed plugin documentation</li> <li>CLI Usage - Command-line reference</li> <li>Interactive Demo - Test configurations online</li> </ul> <p>Need help? Check our GitHub Discussions for configuration examples and community support.</p>"},{"location":"user/demo/","title":"Interactive Demo","text":"Vexy SVGO WebAssembly Demo Vexy SVGO WebAssembly Demo <p>Experience Vexy SVGO's power directly in your browser with native WebAssembly performance.</p> \u23f3 Loading WebAssembly module...  Multipass optimization                       Pretty print output                      Precision: Indent: \u2699\ufe0f Optimize SVG \ud83d\udcdd Load Example \ud83d\uddd1\ufe0f Clear \ud83d\udcc1 Upload SVG \ud83d\udcbe Download \ud83e\udde9 Plugin Configuration Input SVG SVG preview will appear here Optimized SVG Optimized SVG preview will appear here Optimization Results - Original Size - Optimized Size - Size Reduction - Processing Time Quick Examples"},{"location":"user/installation/","title":"Installation","text":"<p>{: .no_toc }</p> <p>How to install Vexy SVGO on your system</p>"},{"location":"user/installation/#table-of-contents","title":"Table of contents","text":"<p>{: .no_toc .text-delta }</p> <ol> <li>TOC</li> </ol>"},{"location":"user/installation/#pre-built-binaries-recommended","title":"Pre-built Binaries (Recommended)","text":"<p>The easiest way to get started is with our pre-built binaries, available for all major platforms.</p>"},{"location":"user/installation/#macos","title":"macOS","text":"<pre><code># Download and extract (Universal binary - works on Intel and Apple Silicon)\ncurl -sSL https://github.com/vexyart/vexy-svgo/releases/latest/download/vexy-svgo-macos.tar.gz | tar -xz\n\n# Make executable and move to PATH\nchmod +x vexy-svgo\nsudo mv vexy-svgo /usr/local/bin/\n\n# Verify installation\nvexy-svgo --version\n</code></pre>"},{"location":"user/installation/#alternative-homebrew-coming-soon","title":"Alternative: Homebrew (Coming Soon)","text":"<pre><code># Will be available soon\nbrew install vexy-svgo\n</code></pre>"},{"location":"user/installation/#windows","title":"Windows","text":"<pre><code># Download using PowerShell\nInvoke-WebRequest -Uri \"https://github.com/vexyart/vexy-svgo/releases/latest/download/vexy-svgo-windows.zip\" -OutFile \"vexy-svgo.zip\"\n\n# Extract\nExpand-Archive -Path \"vexy-svgo.zip\" -DestinationPath \".\"\n\n# Add to PATH or move to a directory in PATH\n# Verify installation\n.\\vexy-svgo.exe --version\n</code></pre>"},{"location":"user/installation/#alternative-chocolatey-coming-soon","title":"Alternative: Chocolatey (Coming Soon)","text":"<pre><code># Will be available soon\nchoco install vexy-svgo\n</code></pre>"},{"location":"user/installation/#linux","title":"Linux","text":"<pre><code># Download and extract\ncurl -sSL https://github.com/vexyart/vexy-svgo/releases/latest/download/vexy-svgo-linux.tar.gz | tar -xz\n\n# Make executable and move to PATH\nchmod +x vexy-svgo\nsudo mv vexy-svgo /usr/local/bin/\n\n# Verify installation\nvexy-svgo --version\n</code></pre>"},{"location":"user/installation/#build-from-source","title":"Build from Source","text":"<p>If you prefer to build from source or need the latest development version:</p>"},{"location":"user/installation/#prerequisites","title":"Prerequisites","text":"<p>You'll need Rust and Cargo installed:</p> <pre><code># Install Rust via rustup\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Follow the on-screen instructions and restart your shell\nsource ~/.cargo/env\n\n# Verify installation\nrustc --version\ncargo --version\n</code></pre>"},{"location":"user/installation/#build-steps","title":"Build Steps","text":"<pre><code># Clone the repository\ngit clone https://github.com/vexyart/vexy-svgo\ncd vexy-svgo\n\n# Build in release mode (optimized)\ncargo build --release\n\n# The binary will be at ./target/release/vexy-svgo\n./target/release/vexy-svgo --version\n\n# Optionally install system-wide\ncargo install --path crates/cli\n</code></pre>"},{"location":"user/installation/#build-script","title":"Build Script","text":"<p>For a complete build including tests and verification:</p> <pre><code># Use our build script\n./build.sh all\n\n# Or build specific components\n./build.sh native     # CLI and library only\n./build.sh wasm       # WebAssembly version\n./build.sh docs       # Documentation\n</code></pre>"},{"location":"user/installation/#package-managers","title":"Package Managers","text":""},{"location":"user/installation/#rustcargo","title":"Rust/Cargo","text":"<p>Install as a Rust tool:</p> <pre><code># Install from crates.io (when published)\ncargo install vexy-svgo\n\n# Or install from Git\ncargo install --git https://github.com/vexyart/vexy-svgo vexy-svgo-cli\n</code></pre>"},{"location":"user/installation/#npm-webassembly","title":"npm (WebAssembly)","text":"<p>For Node.js and web development:</p> <pre><code># Install WASM version via npm (when published)\nnpm install vexy-svgo-wasm\n\n# Or install globally\nnpm install -g vexy-svgo-wasm\n</code></pre>"},{"location":"user/installation/#docker","title":"Docker","text":"<p>Run Vexy SVGO in a container:</p> <pre><code># Pull and run (coming soon)\ndocker run --rm -v $(pwd):/work vexyart/vexy-svgo input.svg -o output.svg\n\n# Or build locally\ngit clone https://github.com/vexyart/vexy-svgo\ncd vexy-svgo\ndocker build -t vexy-svgo .\ndocker run --rm -v $(pwd):/work vexy-svgo input.svg -o output.svg\n</code></pre>"},{"location":"user/installation/#verification","title":"Verification","text":"<p>After installation, verify everything works:</p> <pre><code># Check version\nvexy-svgo --version\n\n# Test basic functionality\necho '&lt;svg xmlns=\"http://www.w3.org/2000/svg\"&gt;&lt;circle cx=\"50\" cy=\"50\" r=\"40\"/&gt;&lt;/svg&gt;' | vexy-svgo\n\n# Run help to see all options\nvexy-svgo --help\n</code></pre> <p>Expected output should show the optimized SVG and version information.</p>"},{"location":"user/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user/installation/#macos-developer-cannot-be-verified","title":"macOS: \"Developer cannot be verified\"","text":"<p>If you see a security warning on macOS:</p> <pre><code># Remove quarantine attribute\nxattr -dr com.apple.quarantine vexy-svgo\n\n# Or go to System Preferences &gt; Security &amp; Privacy and allow the app\n</code></pre>"},{"location":"user/installation/#linux-permission-denied","title":"Linux: Permission Denied","text":"<pre><code># Make sure the binary is executable\nchmod +x vexy-svgo\n\n# Check if the binary is in your PATH\necho $PATH\nwhich vexy-svgo\n</code></pre>"},{"location":"user/installation/#windows-antivirus-warning","title":"Windows: Antivirus Warning","text":"<p>Some antivirus software may flag the binary. This is a false positive common with Rust binaries. You can:</p> <ol> <li>Add an exception for the file</li> <li>Download from GitHub releases directly</li> <li>Build from source</li> </ol>"},{"location":"user/installation/#build-issues","title":"Build Issues","text":"<p>If building from source fails:</p> <pre><code># Update Rust toolchain\nrustup update\n\n# Clean and rebuild\ncargo clean\ncargo build --release\n\n# Check system requirements\nrustc --version  # Should be 1.70 or newer\n</code></pre>"},{"location":"user/installation/#next-steps","title":"Next Steps","text":"<p>Once installed, continue to:</p> <ul> <li>CLI Usage - Learn command-line usage</li> <li>Configuration - Set up custom configurations</li> <li>Interactive Demo - Try optimization in your browser</li> </ul>"},{"location":"user/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Minimum: Any 64-bit system (x86_64, ARM64)</li> <li>Memory: 50MB RAM for typical usage</li> <li>Storage: 10MB for the binary</li> <li>OS: macOS 10.12+, Windows 10+, Linux (glibc 2.17+)</li> </ul> <p>For building from source: - Rust: 1.70 or newer - Memory: 1GB RAM for compilation - Storage: 500MB for build dependencies</p>"},{"location":"user/plugins/","title":"Plugin Reference","text":"<p>{: .no_toc }</p> <p>Complete reference of Vexy SVGO optimization plugins</p>"},{"location":"user/plugins/#table-of-contents","title":"Table of contents","text":"<p>{: .no_toc .text-delta }</p> <ol> <li>TOC</li> </ol>"},{"location":"user/plugins/#overview","title":"Overview","text":"<p>Plugins are the core of Vexy SVGO's optimization capabilities. Each plugin performs a specific transformation on the SVG's Abstract Syntax Tree (AST) to reduce file size and improve rendering efficiency.</p> <p>Vexy SVGO maintains full compatibility with SVGO's plugin system while delivering significant performance improvements through native Rust implementation.</p>"},{"location":"user/plugins/#plugin-categories","title":"Plugin Categories","text":""},{"location":"user/plugins/#basic-optimization-plugins","title":"Basic Optimization Plugins","text":"<p>These plugins handle fundamental SVG cleanup tasks:</p>"},{"location":"user/plugins/#removecomments","title":"<code>removeComments</code>","text":"<p>Description: Removes comments from SVG (preserves legal comments starting with <code>!</code>) Default: \u2705 Enabled Parameters: None</p> <pre><code># Disable in CLI\nvexy-svgo --disable removeComments input.svg\n</code></pre>"},{"location":"user/plugins/#removedoctype","title":"<code>removeDoctype</code>","text":"<p>Description: Removes doctype declarations Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#removexmlprocinst","title":"<code>removeXMLProcInst</code>","text":"<p>Description: Removes XML processing instructions Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#removemetadata","title":"<code>removeMetadata</code>","text":"<p>Description: Removes <code>&lt;metadata&gt;</code> elements Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#removetitle","title":"<code>removeTitle</code>","text":"<p>Description: Removes <code>&lt;title&gt;</code> elements Default: \u274c Disabled (accessibility) Parameters: None</p>"},{"location":"user/plugins/#removedesc","title":"<code>removeDesc</code>","text":"<p>Description: Removes <code>&lt;desc&gt;</code> elements Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#attribute-optimization","title":"Attribute Optimization","text":""},{"location":"user/plugins/#cleanupattrs","title":"<code>cleanupAttrs</code>","text":"<p>Description: Cleans up attributes from newlines, trailing, and repeating spaces Default: \u2705 Enabled Parameters: - <code>newlines</code> (boolean) - Remove newlines - <code>trim</code> (boolean) - Trim whitespace - <code>spaces</code> (boolean) - Collapse spaces</p>"},{"location":"user/plugins/#removeemptyattrs","title":"<code>removeEmptyAttrs</code>","text":"<p>Description: Removes empty attributes Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#removeunknownsanddefaults","title":"<code>removeUnknownsAndDefaults</code>","text":"<p>Description: Removes unknown elements and default values Default: \u2705 Enabled Parameters: - <code>unknownContent</code> (boolean) - <code>unknownAttrs</code> (boolean)  - <code>defaultAttrs</code> (boolean) - <code>keepDataAttrs</code> (boolean) - <code>keepAriaAttrs</code> (boolean)</p>"},{"location":"user/plugins/#sortattrs","title":"<code>sortAttrs</code>","text":"<p>Description: Sorts element attributes for better compression Default: \u2705 Enabled Parameters: - <code>order</code> (string[]) - Custom attribute order - <code>xmlnsOrder</code> (string) - XML namespace order</p>"},{"location":"user/plugins/#style-and-color-optimization","title":"Style and Color Optimization","text":""},{"location":"user/plugins/#convertcolors","title":"<code>convertColors</code>","text":"<p>Description: Converts colors to optimal format (rgb\u2192hex, names\u2192hex) Default: \u2705 Enabled Parameters: - <code>currentColor</code> (boolean) - Convert to currentColor - <code>names2hex</code> (boolean) - Named colors to hex - <code>rgb2hex</code> (boolean) - RGB to hex - <code>shorthex</code> (boolean) - #rrggbb to #rgb - <code>shortname</code> (boolean) - Hex to named colors</p> <pre><code>// Example configuration\n{\n  name: 'convertColors',\n  params: {\n    currentColor: true,\n    names2hex: true,\n    rgb2hex: true,\n    shorthex: true\n  }\n}\n</code></pre>"},{"location":"user/plugins/#mergestyles","title":"<code>mergeStyles</code>","text":"<p>Description: Merges multiple <code>&lt;style&gt;</code> elements into one Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#minifystyles","title":"<code>minifyStyles</code>","text":"<p>Description: Basic CSS minification Default: \u2705 Enabled Parameters: - <code>restructure</code> (boolean) - <code>comments</code> (string|boolean)</p>"},{"location":"user/plugins/#convertstyletoattrs","title":"<code>convertStyleToAttrs</code>","text":"<p>Description: Converts styles to presentation attributes Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#numeric-value-optimization","title":"Numeric Value Optimization","text":""},{"location":"user/plugins/#cleanupnumericvalues","title":"<code>cleanupNumericValues</code>","text":"<p>Description: Rounds numeric values to fixed precision, removes default units Default: \u2705 Enabled Parameters: - <code>floatPrecision</code> (number) - Decimal precision (default: 3) - <code>leadingZero</code> (boolean) - Keep leading zeros - <code>defaultPx</code> (boolean) - Remove default px units</p> <pre><code>{\n  name: 'cleanupNumericValues',\n  params: {\n    floatPrecision: 2,\n    leadingZero: false,\n    defaultPx: true\n  }\n}\n</code></pre>"},{"location":"user/plugins/#structure-optimization","title":"Structure Optimization","text":""},{"location":"user/plugins/#removeemptycontainers","title":"<code>removeEmptyContainers</code>","text":"<p>Description: Removes empty container elements Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#removeemptytext","title":"<code>removeEmptyText</code>","text":"<p>Description: Removes empty text elements Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#collapsegroups","title":"<code>collapseGroups</code>","text":"<p>Description: Collapses useless groups (<code>&lt;g&gt;</code>) Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#removeuselessdefs","title":"<code>removeUselessDefs</code>","text":"<p>Description: Removes <code>&lt;defs&gt;</code> elements without IDs Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#removehiddenelems","title":"<code>removeHiddenElems</code>","text":"<p>Description: Removes hidden elements (display:none, visibility:hidden) Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#shape-conversion","title":"Shape Conversion","text":""},{"location":"user/plugins/#convertshapetopath","title":"<code>convertShapeToPath</code>","text":"<p>Description: Converts basic shapes to <code>&lt;path&gt;</code> elements Default: \u2705 Enabled Parameters: - <code>convertArcs</code> (boolean) - Convert arcs - <code>floatPrecision</code> (number) - Coordinate precision</p>"},{"location":"user/plugins/#convertellipsetocircle","title":"<code>convertEllipseToCircle</code>","text":"<p>Description: Converts <code>&lt;ellipse&gt;</code> to <code>&lt;circle&gt;</code> when possible Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#path-optimization","title":"Path Optimization","text":""},{"location":"user/plugins/#convertpathdata","title":"<code>convertPathData</code> \u2b50","text":"<p>Description: Comprehensive path optimization - converts coordinates, removes redundant commands Default: \u2705 Enabled Parameters: - <code>applyTransforms</code> (boolean) - Apply transform matrices - <code>makeArcs</code> (boolean) - Convert to arcs where possible - <code>straightCurves</code> (boolean) - Convert curves to lines - <code>lineShorthands</code> (boolean) - Use H/V commands - <code>floatPrecision</code> (number) - Coordinate precision - <code>removeUseless</code> (boolean) - Remove redundant commands - <code>collapseRepeated</code> (boolean) - Collapse repeated commands</p> <pre><code>{\n  name: 'convertPathData',\n  params: {\n    floatPrecision: 3,\n    applyTransforms: true,\n    makeArcs: true,\n    straightCurves: true,\n    lineShorthands: true,\n    removeUseless: true\n  }\n}\n</code></pre>"},{"location":"user/plugins/#id-and-reference-management","title":"ID and Reference Management","text":""},{"location":"user/plugins/#cleanupids","title":"<code>cleanupIds</code>","text":"<p>Description: Minifies and removes unused IDs Default: \u2705 Enabled Parameters: - <code>remove</code> (boolean) - Remove unused IDs - <code>minify</code> (boolean) - Minify used IDs - <code>prefix</code> (string) - Add prefix to IDs - <code>preserve</code> (string[]) - IDs to never remove</p> <pre><code>{\n  name: 'cleanupIds',\n  params: {\n    remove: true,\n    minify: true,\n    prefix: 'icon-',\n    preserve: ['logo', 'main-graphic']\n  }\n}\n</code></pre>"},{"location":"user/plugins/#removeunusedns","title":"<code>removeUnusedNS</code>","text":"<p>Description: Removes unused namespace declarations Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#advanced-plugins","title":"Advanced Plugins","text":""},{"location":"user/plugins/#transform-management","title":"Transform Management","text":""},{"location":"user/plugins/#removeuselessstrokeandfill","title":"<code>removeUselessStrokeAndFill</code>","text":"<p>Description: Removes unnecessary stroke and fill attributes Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#cleanupenablebackground","title":"<code>cleanupEnableBackground</code>","text":"<p>Description: Removes or cleans up enable-background attribute Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#removenoninheritablegroupattrs","title":"<code>removeNonInheritableGroupAttrs</code>","text":"<p>Description: Removes non-inheritable group attributes Default: \u2705 Enabled Parameters: None</p>"},{"location":"user/plugins/#not-yet-implemented","title":"Not Yet Implemented","text":"<p>These complex plugins require additional work:</p>"},{"location":"user/plugins/#mergepaths","title":"<code>mergePaths</code>","text":"<p>Description: Merge multiple paths into one Status: \u23f3 Coming soon Complexity: High - requires path geometry analysis</p>"},{"location":"user/plugins/#moveelemsattrstogroup","title":"<code>moveElemsAttrsToGroup</code>","text":"<p>Description: Move common attributes to parent group Status: \u23f3 Coming soon Complexity: Medium - requires attribute inheritance analysis</p>"},{"location":"user/plugins/#movegroupattrstoelems","title":"<code>moveGroupAttrsToElems</code>","text":"<p>Description: Move group attributes to child elements Status: \u23f3 Coming soon Complexity: Medium - requires attribute distribution logic</p>"},{"location":"user/plugins/#converttransform","title":"<code>convertTransform</code>","text":"<p>Description: Optimizes transform attributes Status: \u23f3 Coming soon Complexity: High - requires matrix operations</p>"},{"location":"user/plugins/#applytransforms","title":"<code>applyTransforms</code>","text":"<p>Description: Applies transform matrices to coordinates Status: \u23f3 Coming soon Complexity: Very High - requires geometric transformations</p>"},{"location":"user/plugins/#configuration-examples","title":"Configuration Examples","text":""},{"location":"user/plugins/#web-development","title":"Web Development","text":"<pre><code>{\n  plugins: [\n    'removeComments',\n    'removeEmptyAttrs', \n    'convertColors',\n    'cleanupIds',\n    {\n      name: 'cleanupNumericValues',\n      params: { floatPrecision: 2 }\n    },\n    // Keep viewBox for responsive design\n    { name: 'removeViewBox', enabled: false }\n  ]\n}\n</code></pre>"},{"location":"user/plugins/#maximum-compression","title":"Maximum Compression","text":"<pre><code>{\n  multipass: true,\n  plugins: [\n    'removeComments',\n    'removeTitle',\n    'removeDesc',\n    'removeEmptyAttrs',\n    'cleanupAttrs',\n    'convertColors',\n    'convertPathData',\n    'collapseGroups',\n    {\n      name: 'cleanupNumericValues', \n      params: { floatPrecision: 1 }\n    }\n  ]\n}\n</code></pre>"},{"location":"user/plugins/#icon-library","title":"Icon Library","text":"<pre><code>{\n  plugins: [\n    'removeComments',\n    'removeEmptyAttrs',\n    'cleanupAttrs',\n    'convertColors',\n    {\n      name: 'cleanupIds',\n      params: { remove: false, minify: true }\n    },\n    // Preserve structure for icons\n    { name: 'removeViewBox', enabled: false },\n    { name: 'collapseGroups', enabled: false }\n  ]\n}\n</code></pre>"},{"location":"user/plugins/#cli-usage","title":"CLI Usage","text":""},{"location":"user/plugins/#list-available-plugins","title":"List Available Plugins","text":"<pre><code>vexy-svgo --show-plugins\n</code></pre>"},{"location":"user/plugins/#enabledisable-plugins","title":"Enable/Disable Plugins","text":"<pre><code># Disable specific plugins\nvexy-svgo --disable removeComments --disable removeTitle input.svg\n\n# Enable additional plugins  \nvexy-svgo --enable cleanupIds --enable sortAttrs input.svg\n</code></pre>"},{"location":"user/plugins/#plugin-specific-configuration","title":"Plugin-Specific Configuration","text":"<pre><code># Use config file for complex plugin settings\nvexy-svgo --config plugins.config.js input.svg\n</code></pre>"},{"location":"user/plugins/#migration-from-svgo","title":"Migration from SVGO","text":""},{"location":"user/plugins/#plugin-compatibility","title":"Plugin Compatibility","text":"SVGO Plugin Vexy SVGO Status removeComments \u2705 removeComments Identical removeEmptyAttrs \u2705 removeEmptyAttrs Identical convertColors \u2705 convertColors Compatible cleanupIDs \u2705 cleanupIds Same functionality convertPathData \u2705 convertPathData Enhanced mergePaths \u23f3 Coming soon Not yet available"},{"location":"user/plugins/#breaking-changes","title":"Breaking Changes","text":"<ol> <li>Plugin names: Some plugins use camelCase instead of kebab-case</li> <li>Parameters: Some parameter names may differ slightly</li> <li>Custom plugins: JavaScript plugins need to be rewritten in Rust</li> </ol>"},{"location":"user/plugins/#performance-impact","title":"Performance Impact","text":""},{"location":"user/plugins/#high-impact-major-size-reduction","title":"High Impact (Major size reduction)","text":"<ul> <li><code>convertPathData</code> - Path optimization</li> <li><code>convertColors</code> - Color optimization  </li> <li><code>cleanupNumericValues</code> - Precision reduction</li> <li><code>removeComments</code> - Comment removal</li> </ul>"},{"location":"user/plugins/#medium-impact","title":"Medium Impact","text":"<ul> <li><code>removeEmptyAttrs</code> - Attribute cleanup</li> <li><code>collapseGroups</code> - Structure optimization</li> <li><code>cleanupIds</code> - ID optimization</li> </ul>"},{"location":"user/plugins/#low-impact-quality-of-life","title":"Low Impact (Quality of life)","text":"<ul> <li><code>sortAttrs</code> - Better compression</li> <li><code>removeDoctype</code> - Minimal size gain</li> <li><code>cleanupEnableBackground</code> - Edge case optimization</li> </ul>"},{"location":"user/plugins/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration - Learn how to configure plugins</li> <li>CLI Usage - Command-line plugin control</li> <li>Interactive Demo - Test plugins in your browser</li> </ul> <p>For the latest plugin status and implementation details, see our GitHub repository.</p>"}]}